<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Thrift | Amyangfei's Blog]]></title>
  <link href="http://amyangfei.me/blog/categories/thrift/atom.xml" rel="self"/>
  <link href="http://amyangfei.me/"/>
  <updated>2014-11-28T15:38:40+08:00</updated>
  <id>http://amyangfei.me/</id>
  <author>
    <name><![CDATA[amyangfei]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[thrift使用简介]]></title>
    <link href="http://amyangfei.me/2012/04/11/simple-thrift-useage/"/>
    <updated>2012-04-11T00:00:00+08:00</updated>
    <id>http://amyangfei.me/2012/04/11/simple-thrift-useage</id>
    <content type="html"><![CDATA[<p>在上一篇文章中提到过thrift，今天抽出一些时间学习了一下，框架用起来很方便。thrift最初是由facebook开发，用于跨语言的服务部署，它通过接口定义语言来定义RPC的接口和数据类型，使用自己的编译器根据固定格式的thrift文件生成不同语言的代码，并由生成的代码负责RPC协议层和传输层的实现。详细的框架设计，数据传输等等的细节就不多说了，<a href="http://thrift.apache.org/" target="_blank">Thrift</a>的官方文档说的很详细。接下来介绍的例子也主要参照官方文档的配置方法，也有一处地方在官方文档中没有提及，后面有详细的说明。简单说这些，现在一起Getting Started！</p>

<!-- more -->


<h3>下载 Thrift</h3>

<p>没什么好说的，请到这里<a href="http://thrift.apache.org/download/" target="_blank">download</a> a copy of Thrift.</p>

<h3>安装 Thrift 编译器</h3>

<p>继续官方文档blabla，<a href="http://thrift.apache.org/docs/install/" target="_blank">installing</a> Thrift guide，选择自己的操作系统，一步步执行so easy。安装时候需要的支持库很多，没有什么装什么。我按照官方文档的命令正常安装，没出现什么问题。</p>

<p><code>bash
sudo apt-get install libboost-dev libboost-test-dev libboost-program-options-dev libevent-dev \
automake libtool flex bison pkg-config g++ libssl-dev
</code></p>

<h3>根据服务器及客户端运行语言生成运行时</h3>

<p>这一步在我看到的很多thrift使用介绍以及官方文档中都没有提及，但这一步是不可缺少的。简单说如果要在框架下使用java就要有thrift对应的java库引用，就是打好的jar包。生成的方法很简单，找到下载的thrift源码包，lib目录下不同语言的名字对应于生成不同语言运行时的源码，基本都有写好的自动脚本。比如python，进入到 /lib/py 目录输入下面的命令下就OK啦。</p>

<p><code>bash
sudo python setup.py install
</code></p>

<h3>编写.thrift文件，生成client和server的代码</h3>

<p>.thrift文件就是用来定义数据类型和调用方法的，下面的代码定义了一个User类和两个要使用的方法。这一部分看文档也很简单。</p>

<p>``` c++
struct User {</p>

<pre><code>1: i32 uid,
2: string uname
</code></pre>

<p>}</p>

<p>service HelloWorld {</p>

<pre><code>User ping(1: User user),
string say(1:string msg)
</code></pre>

<p>}
```</p>

<p>然后生成client和server要使用的代码</p>

<p><code>bash
thrift --gen py helloworld.thrift
thrift --gen java helloworld.thrift
</code></p>

<h3>编写server和client</h3>

<p>我用python编写server端，用java编写客户端。thrift自动生成的代码里包括了server和client各自启动连接的部分，我看了java，C++，python自动生成的部分，使用方法基本相同。</p>

<h3>python server</h3>

<p>``` python</p>

<h1>!/usr/bin/env python</h1>

<p>import socket
import sys
sys.path.append(&lsquo;./gen-py&rsquo;)</p>

<p>from helloworld import HelloWorld
from helloworld.ttypes import *</p>

<p>from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
from thrift.server import TServer</p>

<p>class HelloWorldHandler:
  def ping(self, user):</p>

<pre><code>user.uid += 1
user.uname += " huang"
return user
</code></pre>

<p>  def say(self, msg):</p>

<pre><code>ret = "Response from server: " + msg
print "message from client:", msg
return ret
</code></pre>

<p>handler = HelloWorldHandler()
processor = HelloWorld.Processor(handler)
transport = TSocket.TServerSocket(&ldquo;localhost&rdquo;, 9090)
tfactory = TTransport.TBufferedTransportFactory()
pfactory = TBinaryProtocol.TBinaryProtocolFactory()</p>

<p>server = TServer.TSimpleServer(processor, transport, tfactory, pfactory)</p>

<p>print &ldquo;Starting thrift server in python&hellip;&rdquo;
server.serve()
print &ldquo;done!&rdquo;
```</p>

<h3>java client</h3>

<p>``` java
import org.apache.thrift.<em>;
import org.apache.thrift.protocol.</em>;
import org.apache.thrift.transport.*;</p>

<p>public class client {</p>

<pre><code>public static void main(String[] args) throws Exception {
    try {
        TTransport transport = new TSocket("localhost", 9090);
        TProtocol protocol = new TBinaryProtocol(transport);
        HelloWorld.Client client = new HelloWorld.Client(protocol);
        transport.open();

        User u = new User(1, "xiaoming");
        User uRet = client.ping(u);
        System.out.println("invoke of ping return: uid-" + uRet.uid + " uname-"+uRet.uname);
        String say = client.say("My heart will go on");
        System.out.println("invoke of say return:" + say);

        transport.close();
    } catch (TException x) {
        x.printStackTrace();
    }
}
</code></pre>

<p>}
```</p>

<p>客户端的输出结果如下图所示，xiaoming 变成了 xiaoming huang，uid 加了1，没有问题。
<img src="http://amyangfei.me/images/post/java-client-output.png" style="width: 580px;"/></p>

<h3>总结</h3>

<p>总体感觉按照官方文档thrift配置起来还是很顺手的，同时thrift的源码里有各种语言客户端服务器的使用例子，看一看很快就可以上手。以后有时间今天配thrift有一种似曾相识的感觉，后来想想，这种感觉应该是上学期配置<a href="http://wso2.com/" target="_blank"></a>WSO2的各种服务吧，Application Server，Enterprise Service Bus，Business Process Server。。。oh no。。。</p>
]]></content>
  </entry>
  
</feed>

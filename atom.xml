<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Amyangfei's Blog]]></title>
  <link href="http://amyangfei.me/atom.xml" rel="self"/>
  <link href="http://amyangfei.me/"/>
  <updated>2014-01-20T16:40:46+08:00</updated>
  <id>http://amyangfei.me/</id>
  <author>
    <name><![CDATA[amyangfei]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Making Ebooks of Pro Git]]></title>
    <link href="http://amyangfei.me/2014/01/10/making-progit-ebook/"/>
    <updated>2014-01-10T00:00:00+08:00</updated>
    <id>http://amyangfei.me/2014/01/10/making-progit-ebook</id>
    <content type="html"><![CDATA[<p>Pro Git 是一本用来学习 git 很好的书，从 <a href="https://github.com/progit/progit" target="_blank">progit</a> 这个开源项目可以获得这本书的全部内容，下边介绍在 Ubuntu Server 12.04 环境下制作电子书的过程。</p>

<h2>安装依赖</h2>

<h3>1. ruby, rubygems</h3>

<p>参考 Ruby-China 的 <a href="http://ruby-china.org/wiki/install-rails-on-ubuntu-12-04-server" target="_blank">wiki</a></p>

<h3>2. rdiscount</h3>

<p>markdown 使用的模板，通过 rubygems 安装</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gem install rdiscount
</span></code></pre></td></tr></table></div></figure>


<h3>3. calibre</h3>

<p><a href="http://en.wikipedia.org/wiki/Calibre_(software)" target="_blank">calibre</a> 是一款开源的电子书管理软件，生成 epub 或 mobi 格式需要安装。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt-get install calibre
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h3>4. pandoc，xelatex</h3>

<p>生成 pdf 格式需要安装这两个依赖，pandoc 安装比较简单，直接apt；安装 xelatex 则需要首先安装 texlive-xetex，然后打上 LaTeX::Driver 补丁（参考了这个网址 <a href="http://ledgersmb.org/faq/xelatex" target="_blank">Frequently Asked Questions &ndash; XeLaTeX</a> ）。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt-get install pandoc
</span><span class='line'><span class="nv">$ </span>sudo apt-get install texlive-xetex texlive-latex-base texlive-latex-extra
</span><span class='line'><span class="nv">$ </span>sudo apt-get install liblatex-<span class="o">{</span>driver,encode,table<span class="o">}</span>-perl
</span></code></pre></td></tr></table></div></figure>


<h3>5. install font</h3>

<p>生成 pdf 时读取 latex/config.yml 中的配置，使用过程中可能会出现一些字体不存在的错误。比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./makepdf en
</span><span class='line'>en:
</span><span class='line'>        Parsing markdown... <span class="k">done</span>
</span><span class='line'><span class="k">        </span>Creating main.tex <span class="k">for </span>en... <span class="k">done</span>
</span><span class='line'><span class="k">        </span>Running XeTeX:
</span><span class='line'>                Pass 1... failed with:
</span><span class='line'>                        ! I can<span class="s1">&#39;t find file `Helvetica&#39;</span>.
</span><span class='line'>        Consider running this again with --debug.
</span></code></pre></td></tr></table></div></figure>


<p>这个错误的原因是 Ubuntu 系统中 Helvetica 字体名字为 Nimbus Sans L，修改 confi.yml 文件default 节点下的 font 值即可。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">fc</span>-match <span class="s2">&quot;Helvetica Neue&quot;</span>
</span><span class='line'>DejaVuSans.ttf: <span class="s2">&quot;DejaVu Sans&quot;</span> <span class="s2">&quot;Book&quot;</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">fc</span>-match <span class="s2">&quot;Helvetica&quot;</span>
</span><span class='line'>n019003l.pfb: <span class="s2">&quot;Nimbus Sans L&quot;</span> <span class="s2">&quot;Regular&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>生成中文pdf时同样遇到了中文字体不存在的情况，默认的配置文件使用的是 AR PL UMing CN 和 AR PL UKai CN，直接安装即可。但是我个人感觉 AR PL UMing CN 字体太细瘦，换成了文泉驿微米黑字体，圆润多了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install ttf-arphic-ukai    <span class="c"># &quot;AR PL UKai&quot; 文鼎PL中楷</span>
</span><span class='line'>sudo apt-get install ttf-arphic-uming <span class="c"># &quot;AR PL UMing&quot; 文鼎PL细上海宋</span>
</span><span class='line'>sudo apt-get install ttf-wqy-microhei <span class="c"># &quot;WenQuanYi Micro Hei&quot; 文泉驿微米黑</span>
</span></code></pre></td></tr></table></div></figure>


<h2>make</h2>

<p>最后一步，生成电子书，好书一本，细细品读，Enjoy！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>./makeebooks en        <span class="c"># 默认生成mobi格式，en英文</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">FORMAT</span><span class="o">=</span>epub       <span class="c"># 设置FORMAT为epub，生成epub格式</span>
</span><span class='line'><span class="nv">$ </span>./makeebooks zh     <span class="c"># 生成epub格式，zh中文</span>
</span><span class='line'><span class="nv">$ </span>./makepdfs zh           <span class="c"># 生成pdf</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[APScheduler 源码阅读笔记]]></title>
    <link href="http://amyangfei.me/2013/11/06/apscheduler-source-analyse/"/>
    <updated>2013-11-06T00:00:00+08:00</updated>
    <id>http://amyangfei.me/2013/11/06/apscheduler-source-analyse</id>
    <content type="html"><![CDATA[<h3>概述</h3>

<p>APScheduler 是由 python 实现的一个轻量级任务调度器，它可以按照一定间隔（IntervalTrigger）、指定时间（2.1中的SimpleTrigger/3.0中的DateTrigger）或者以类似 cron（CronTrigger） 的形式触发待执行任务（即调用函数或者调用 python 的 callable 对象）。现在 pypi 上的稳定版是 <a href="https://pypi.python.org/pypi/APScheduler/2.1.1" target="_blank">APScheduler 2.1.1</a>，3.0 版本在 class Scheduler 中移除了针对不同 trigger 的 add_trigger_job() 接口，统一为 add_job()，但是底层实现变化不大。我主要看了 2.1.1 的代码。代码很简洁，加起来一共2049行。</p>

<h3>模块组织</h3>

<ul>
<li><p><strong>Scheduler</strong>  调度器的核心部分，负责对 job 的管理和调度，用户使用添加/移除任务，启动调度器都通过 Scheduler 提供的接口完成。</p></li>
<li><p><strong>Job</strong>  封装了需要调度的任务，每一个 Job 实例是在 Scheduler 添加 job 时被初始化，具体的初始化参数决定了调度被触发的形式（3类不同的trigger）。</p></li>
<li><p><strong>Trigger</strong>  包含 SimpleTrigger，IntervalTrigger和 CronTrigger 三个类。Trigger 的作用就是计算下一次触发任务的时间。</p></li>
<li><p><strong>JobStore</strong>  抽象基类，针对任务存储的介质有多个实现，包括基于内存（RAMJobStore）、使用shelve的简单持久化存储（ShelveJobStore）、使用数据库存储（RedisJobStore，MongoDBJobStore）等。如果不指定参数默认使用 RAMJobStore，使用持久化的 JobStore 的目的是在 Scheduler 重启之后能够恢复原有的任务调度。</p></li>
</ul>


<h3>底层实现</h3>

<p>从分析 Scheduler 类入手，首先看项目中自带的example：</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">apscheduler.scheduler</span> <span class="kn">import</span> <span class="n">Scheduler</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">tick</span><span class="p">():</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&#39;Tick! The time is: </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">scheduler</span> <span class="o">=</span> <span class="n">Scheduler</span><span class="p">(</span><span class="n">standalone</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>    <span class="n">scheduler</span><span class="o">.</span><span class="n">add_interval_job</span><span class="p">(</span><span class="n">tick</span><span class="p">,</span> <span class="n">seconds</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&#39;Press Ctrl+C to exit&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="n">scheduler</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</span><span class='line'>    <span class="k">except</span> <span class="p">(</span><span class="ne">KeyboardInterrupt</span><span class="p">,</span> <span class="ne">SystemExit</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span></code></pre></td></tr></table></div></figure>


<p>上边代码的最核心的三行就是初始化Scheduler，添加以interval为触发的 job 和启动scheduler。这也是使用APScheduler 最基本也最主要的方式。</p>

<p>初始化 Scheduler 有很多参数可以选择（详细可以参考 <a href="http://apscheduler.readthedocs.org/en/v2.1.0/#scheduler-configuration-options" target="_blank">scheduler-configuration-options</a>），这里简单介绍 standalone 和 daemonic 两个参数。standalone 设置为 False，那么 scheduler 将会以 embedded 模式运行，该模式下调度器会在一个新的线程中运行调度循环(_main_loop)；如果 standlone 设置为True，那么 scheduler 会阻塞当前线程，执行调度循环，直到不再有调度任务后返回，被阻塞的线程继续运行。daemonic 即是否以守护线程运行 scheduler，与python 守护线程的效果一致，如果 daemonic 设置为 False，显然该参数在 embedded 模式（standalone==False）下才有效果。Scheduler 默认的运行参数是 standalone == False, daemonic == True，即以 embedded 模式的守护线程中运行调度循环。</p>

<p>start 是启动 scheduler 的方法，如下所示。代码很简洁，启动前读取所有 job_store 中pending job（pending job 是 scheduler 未启动前添加的job），如果为 standalone 模式，会直接进入 _main_loop 调度循环，否则在新的线程中运行调度循环。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">start</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">running</span><span class="p">:</span>
</span><span class='line'>        <span class="k">raise</span> <span class="n">SchedulerAlreadyRunningError</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Create a RAMJobStore as the default if there is no default job store</span>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="s">&#39;default&#39;</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">_jobstores</span><span class="p">:</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">add_jobstore</span><span class="p">(</span><span class="n">RAMJobStore</span><span class="p">(),</span> <span class="s">&#39;default&#39;</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Schedule all pending jobs</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">job</span><span class="p">,</span> <span class="n">jobstore</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">_pending_jobs</span><span class="p">:</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_real_add_job</span><span class="p">(</span><span class="n">job</span><span class="p">,</span> <span class="n">jobstore</span><span class="p">,</span> <span class="bp">False</span><span class="p">)</span>
</span><span class='line'>    <span class="k">del</span> <span class="bp">self</span><span class="o">.</span><span class="n">_pending_jobs</span><span class="p">[:]</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">_stopped</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class='line'>    <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">standalone</span><span class="p">:</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_main_loop</span><span class="p">()</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_thread</span> <span class="o">=</span> <span class="n">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">_main_loop</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">&#39;APScheduler&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_thread</span><span class="o">.</span><span class="n">setDaemon</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">daemonic</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_thread</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>_main_loop 就是调度循环，主体就是一个 while 循环。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">while</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">_stopped</span><span class="p">:</span>
</span><span class='line'>    <span class="n">logger</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="s">&#39;Looking for jobs to run&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">now</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()</span>
</span><span class='line'>    <span class="n">next_wakeup_time</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_process_jobs</span><span class="p">(</span><span class="n">now</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Sleep until the next job is scheduled to be run, a new job is added or the scheduler is stopped</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">next_wakeup_time</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>        <span class="n">wait_seconds</span> <span class="o">=</span> <span class="n">time_difference</span><span class="p">(</span><span class="n">next_wakeup_time</span><span class="p">,</span> <span class="n">now</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_wakeup</span><span class="o">.</span><span class="n">wait</span><span class="p">(</span><span class="n">wait_seconds</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_wakeup</span><span class="o">.</span><span class="n">clear</span><span class="p">()</span>
</span><span class='line'>    <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">standalone</span><span class="p">:</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">shutdown</span><span class="p">()</span>
</span><span class='line'>        <span class="k">break</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_wakeup</span><span class="o">.</span><span class="n">wait</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_wakeup</span><span class="o">.</span><span class="n">clear</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>进入循环后首先调用 _process_jobs 处理任务，以此处理不同 job_store 中的 每一个 job。在处理 job 过程中首先通过 get_run_times 获取 run_times（get_run_times 很有趣，它获取在 next_run_time 和 now 之间所有需要进行任务调度的时间点，之所以这样做的原因是 APScheduler 允许设定一个 misfire_grace_time 时间，也就是事件执行的延迟时间，因为有很多原因会导致计划调度不能准确在设定好的时间执行。）_process_jobs 处理很简单，将 job 的执行调度交给 scheduler 的线程池，针对每一个 job 的触发会开启一个新的线程（一个疑问：这个线程设置了t.setDaemon(True)，但是文档上却说&#8221;Jobs are always executed in non-daemonic threads.&ldquo;）来执行，而实际的任务执行发生在 Scheduler 的 _run_job 方法中。</p>

<p>_process_jobs 会返回下次执行调度的时间，调度循环会根据返回值进行相应的处理，wait 指定时间、或一直 wait 等待事件通知唤醒、或退出循环。调度循环的阻塞和唤醒是由 python 原生 Event 的 wait 和 set 来实现的，阻塞结束的方式有两种：一是 wait(wait_seconds) 超时；另一种是在 scheduler 处于 running 状态添加新的任务，添加新任务过程中会自动调用 set()唤醒 event。</p>

<h3>总结</h3>

<p>总体而言 APScheduler 以 <a href="http://docs.python.org/2/library/threading.html#module-threading" target="_blank">threading</a> 模块为基础实现，主要用到了 threading.Event 和 threading.Thread，用到的 ThreadPool 是对 threading.Thread 的简单封装。真是因为此所以 APScheduler 有 &ldquo;No (hard) external dependencies&rdquo; 和 &ldquo;Thread-safe API&rdquo; 这两项优点。但同时存在一个问题，由于 <a href="https://wiki.python.org/moin/GlobalInterpreterLock" target="_blank">GIL</a> 的存在，任务的执行一定会阻塞主线程，所以如果任务执行时间较长、有更多异步调度的需求，那么可能就会用到另外一个更强大的框架：<a href="http://www.celeryproject.org/" target="_blank">Celery</a>。 Celery 毕竟是一个分布式的任务队列，相比而言 APScheduler 的特点是轻巧，一言以蔽之即: APScheduler is a light but powerful in-process task scheduler.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[xenserver 使用小结]]></title>
    <link href="http://amyangfei.me/2013/09/06/xenserver-use-tip/"/>
    <updated>2013-09-06T00:00:00+08:00</updated>
    <id>http://amyangfei.me/2013/09/06/xenserver-use-tip</id>
    <content type="html"><![CDATA[<p>手头四台服务器，准备搭建一个小的云平台，了解了几种不同的方案，包括Vmware Esxi，Xen，OpenStack 等。先把各种方法都试一试，然后确定一个具体实施。之前有使用过 Vmware ESXi，虽说 ESXi 可以免费使用，但是 Vmware 浓厚的商业气息让我有种道不同不相为谋的感觉。XenServer 最近有开源，于是昨天花了一个下午尝试了一下。</p>

<h3>安装 XenServer 和 XenCenter</h3>

<p>首先去官网下载 XenServer 的镜像文件，我下载了 6.2.0 版本。XenServer 本身其实就是一个 Linux 操作系统，于是服务器直接通过启动 bios 引导安装 XenServer，安装过程中配置好 root 的密码以及网络信息，这样就可以通过管理工具管理 XenServer 了。</p>

<p>使用的管理工具是 Windows 版的，貌似有 Linux 版本的<a href="http://sourceforge.net/projects/openxenceter/" target="_blank">OpenXenCenter</a>，我没有试验。进入 XenCenter，服务器是四网卡，现在接了0，2号网卡。2号网卡连接外网，配有有一个 166.111.xx.yy的 ip。0号网卡接内部网络，ip 设为 192.168.10.254。配置如下图：</p>

<!-- more -->


<p><img src="http://amyangfei.me/images/post/20130906_server_network.png" style="width: 610px;"/></p>

<h3>安装一台虚拟机</h3>

<p>接下来安装一台虚拟机。可以选择的操作系统比较多，比如选择 Ubuntu Server 12.04，需要注意的是加载虚拟镜像的方法，有两大类：一类是 Install from ISO library or DVD drive，另一类是 Boot from network。第二类我没有试验，第一类又分两种，一种是从光驱加载镜像，由于我在远程操作所以选择了另一种 ISO Library。建立 ISO Library 的方法是在左侧导航选择目标 xenserver 建立 New SR，然后选择 windwos 的文件共享或者是 NFS。选择好安装虚拟机时就可以找到镜像文件了。然后一步步配置好参数，开始运行，继续就是熟悉的 Ubuntu 安装过程。</p>

<h3>通过 iptables 进行 NAT</h3>

<p>安装好一台虚拟机后进行网络配置，首先在 XenCenter 中激活安装虚拟机的0号网卡，然后到 Console 界面配置 ip，比如设定 ip 为192.168.10.11，网关设为 192.168.10.254，OK。接下类需要到 XenServer 中配置 iptables 的 NAT 转发。<a href="http://blog.tangjianwei.com/2009/01/12/my-understanding-about-dnat-and-snat-in-iptables/" target="_blank"> iptables中DNAT与SNAT的理解 </a>这篇文章中作者对 iptables NAT 的原理解释比较清楚，其实无论是 NAT 穿透还是端口转发，本质都是在 iptables 处对 ip 数据包的源地址和目标地址的一定规则的转换。我配置了3条 iptables 规则，实现了内部虚拟机可以正常访问外网，同时外网的主机可以通过10022这个端口 ssh 访问内部虚拟机。其实第2条规则被第3条规则包含，可以去掉。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 端口重定向 </span>
</span><span class='line'><span class="nv">$ </span>iptables -t nat -A PREROUTING -d 166.111.xx.yy -p tcp --dport 10022 -j DNAT --to 192.168.10.11:22
</span><span class='line'><span class="nv">$ </span>iptables -t nat -A POSTROUTING -d 192.168.10.11 -p tcp --dport 22 -j SNAT --to 166.111.xx.yy
</span><span class='line'>
</span><span class='line'><span class="c"># NAT代理上网</span>
</span><span class='line'><span class="nv">$ </span>iptables -t nat -A POSTROUTING -j SNAT --to 166.111.xx.yy
</span></code></pre></td></tr></table></div></figure>


<p>总体过程比较顺利，配置 iptables NAT 折腾了一小会儿。于是，have fun, enjoy it ~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Tornado进行异步编程]]></title>
    <link href="http://amyangfei.me/2013/06/17/asynchronous-programming-with-tornado/"/>
    <updated>2013-06-17T00:00:00+08:00</updated>
    <id>http://amyangfei.me/2013/06/17/asynchronous-programming-with-tornado</id>
    <content type="html"><![CDATA[<p>翻译自：<a href="http://lbolla.info/blog/2012/10/03/asynchronous-programming-with-tornado" target="_blank">Asynchronous programming with Tornado</a></p>

<p>对于初学者来说异步编程很令人迷惑，因此我觉得有必要介绍一些有用的基本概念来帮助初学者避免一些常见的陷阱。如果希望理解通用的异步编程模型，可以查看以下这些网络资源，<a href="http://cs.brown.edu/courses/cs196-5/f12/handouts/async.pdf" target="_blank">Introduction to Asynchronous Programming</a>，<a href="http://krondo.com/?page_id=1327" target="_blank">Twisted Introduction</a>。在这篇文章中我将会着眼于如何使用 Tornado 进行异步编程。</p>

<p>来自Tornado主页的一段话：</p>

<blockquote><p>FriendFeed&rsquo;s web server is a relatively simple, non-blocking web server written in Python. The FriendFeed application is written using a web framework that looks a bit like web.py or Google&rsquo;s webapp, but with additional tools and optimizations to take advantage of the non-blocking web server and tools. Tornado is an open source version of this web server and some of the tools we use most often at FriendFeed. The framework is distinct from most mainstream web server frameworks (and certainly most Python frameworks) because it is non-blocking and reasonably fast. Because it is non-blocking and uses epoll or kqueue, it can handle thousands of simultaneous standing connections, which means the framework is ideal for real-time web services. We built the web server specifically to handle FriendFeed&rsquo;s real-time features every active user of FriendFeed maintains an open connection to the FriendFeed servers. (For more information on scaling servers to support thousands of clients, see The C10K problem.)</p></blockquote>

<p>对于初学者首先需要认清的是自己是否真的需要异步操作。异步编程比同步编程复杂得多，因此有人说：异步编程是不适合人类大脑的。</p>

<!-- more -->


<p>如果你的应用需要监控一些资源并且当这些资源的状态发生变化时需要采取一定的操作，那么你需要使用异步编程。比如对于一个 web 服务器，如果没有请求到达，那么它处于空闲状态；当有请求通过 socket 到达 web 服务器它就需要对这条请求进行一定的处理。另外一种需要异步编程的情况比如一个应用需要定期的执行一些任务或者延迟一段时间再执行代码。可以使用多线程/进程来控制多个任务的并发执行，那样编程模型也会迅速变得复杂起来。</p>

<p>第二步是需要确认你想要的操作是否能够进行异步操作。不幸的是在 Tornado 中，并非所有的功能都可以异步执行。</p>

<p>Tornado是单线程运行的（尽管在实际应用中，它支持多线程模式），因此阻塞操作会阻塞整个服务器。这意味着一个阻塞操作将会阻止系统执行下一个等待执行的任务。任务的调度通过<a href="http://www.tornadoweb.org/en/stable/ioloop.html" target="_blank"> IOLoop </a>完成，IOLoop运行在唯一的可用的线程中。</p>

<p>下边是一个错误使用 IOLoop 的例子（译者注：这段代码与原文不一样，是按照原文的描述修改的）：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">tornado.ioloop</span> <span class="kn">import</span> <span class="n">IOLoop</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">tornado</span> <span class="kn">import</span> <span class="n">gen</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nd">@gen.engine</span>
</span><span class='line'><span class="k">def</span> <span class="nf">f</span><span class="p">():</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;sleeping&#39;</span>
</span><span class='line'>    <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;awake!&#39;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="c"># Note that now code is executed &quot;concurrently&quot;</span>
</span><span class='line'>    <span class="n">IOLoop</span><span class="o">.</span><span class="n">instance</span><span class="p">()</span><span class="o">.</span><span class="n">add_callback</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class='line'>    <span class="n">IOLoop</span><span class="o">.</span><span class="n">instance</span><span class="p">()</span><span class="o">.</span><span class="n">add_callback</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class='line'>    <span class="n">IOLoop</span><span class="o">.</span><span class="n">instance</span><span class="p">()</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意到 blocking_call（译者注：函数f，不知道为什么原文作者说这是blocking_call） 被正确地调用，但是由于它被 time.sleep 阻塞，会阻止接下来任务（第二次调用该函数）的执行。只有当第一次调用结束后，这个函数才会被IOLoop 调度第二次调用。因此输出是这样的一个序列（“sleeping”, “awake!”, “sleeping”, “awake!”）。</p>

<p>对比同样的代码，但是使用 time.sleep 的异步版本，例如 add_timeout：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># Example of non-blocking sleep.</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">tornado.ioloop</span> <span class="kn">import</span> <span class="n">IOLoop</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">tornado</span> <span class="kn">import</span> <span class="n">gen</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nd">@gen.engine</span>
</span><span class='line'><span class="k">def</span> <span class="nf">f</span><span class="p">():</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;sleeping&#39;</span>
</span><span class='line'>    <span class="k">yield</span> <span class="n">gen</span><span class="o">.</span><span class="n">Task</span><span class="p">(</span><span class="n">IOLoop</span><span class="o">.</span><span class="n">instance</span><span class="p">()</span><span class="o">.</span><span class="n">add_timeout</span><span class="p">,</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;awake!&#39;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="c"># Note that now code is executed &quot;concurrently&quot;</span>
</span><span class='line'>    <span class="n">IOLoop</span><span class="o">.</span><span class="n">instance</span><span class="p">()</span><span class="o">.</span><span class="n">add_callback</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class='line'>    <span class="n">IOLoop</span><span class="o">.</span><span class="n">instance</span><span class="p">()</span><span class="o">.</span><span class="n">add_callback</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class='line'>    <span class="n">IOLoop</span><span class="o">.</span><span class="n">instance</span><span class="p">()</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>在这种情况下，函数 f 第一次被调用，会打印“sleeping”，然后它会在1秒之后向 IOLoop 请求继续执行。IOLoop 重获控制权，它会调度函数 f 的第二次调用，第二次调用首先打印“sleeping”，之后将控制权还给 IOLoop。1秒钟后 IOLoop 会在第一个函数挂起的位置继续执行并且打印“awake”。最后，第二次“awake”也会被打印。所以全部的打印序列为“sleeping”, “sleeping”, “awake!”, “awake!”。这两次函数调用是并发执行的（但不是<a href="http://stackoverflow.com/questions/1897993/difference-between-concurrent-programming-and-parallel-programming" target="_blank">并行</a>！）</p>

<p>现在我会听到你提问：“我如何创建一个函数并且异步地执行它？”在 Tornado 中，每一个有“callback”参数的函数都可以使用 “gen.engine.Task（译者注：应该是gen.Task）”进行异步操作。但是要注意：使用 Task 并不意味着就一定是异步执行！一个事实是函数会被调度获得控制权并执行，执行后任何传递给 callback 的值都会在 Task 中返回。看下边的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">tornado.ioloop</span> <span class="kn">import</span> <span class="n">IOLoop</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">tornado</span> <span class="kn">import</span> <span class="n">gen</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">my_function</span><span class="p">(</span><span class="n">callback</span><span class="p">):</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;do some work&#39;</span>
</span><span class='line'>    <span class="c"># Note: this line will block!</span>
</span><span class='line'>    <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">callback</span><span class="p">(</span><span class="mi">123</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nd">@gen.engine</span>
</span><span class='line'><span class="k">def</span> <span class="nf">f</span><span class="p">():</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;start&#39;</span>
</span><span class='line'>    <span class="c"># Call my_function and return here as soon as &quot;callback&quot; is called.</span>
</span><span class='line'>    <span class="c"># &quot;result&quot; is whatever argument was passed to &quot;callback&quot; in &quot;my_function&quot;.</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="k">yield</span> <span class="n">gen</span><span class="o">.</span><span class="n">Task</span><span class="p">(</span><span class="n">my_function</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;result is&#39;</span><span class="p">,</span> <span class="n">result</span>
</span><span class='line'>    <span class="n">IOLoop</span><span class="o">.</span><span class="n">instance</span><span class="p">()</span><span class="o">.</span><span class="n">stop</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">f</span><span class="p">()</span>
</span><span class='line'>    <span class="n">IOLoop</span><span class="o">.</span><span class="n">instance</span><span class="p">()</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>绝大多数初学者可能会这样写：Task(my_func)，然后认为 my_func 会自动被异步执行。事实上这并不是 Tornado 工作的原理，这是<a href="http://golang.org/" target="_blank"> Go </a>如何工作的！下边是我最后的建议(译者注：我觉得这是这篇文章最重要的建议)：</p>

<blockquote><p><strong><em> In a function that is going to be used “asynchronously”, only asynchronous libraries should be used. </em></strong></p></blockquote>

<p>就是说如果希望异步编程，那么一些阻塞的调用比如 time.sleep 或者 urllib2.urlopen 或者 db.query，它们需要替换成相应的异步版本。比如，IOLoop.add_timeout 是 time.sleep 的替换，AsyncHTTPClient.fetch 是 urllib2.urlopen 的替换等等。对于数据库查询，情况比较复杂，需要一些特定的异步查询驱动，比如对于 MongoDB 的<a href="http://blog.mongodb.org/post/30927719826/motor-asynchronous-driver-for-mongodb-and-python" target="_blank"> Motor </a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[线段合并求最长线段]]></title>
    <link href="http://amyangfei.me/2013/05/10/longest-segement-merge/"/>
    <updated>2013-05-10T00:00:00+08:00</updated>
    <id>http://amyangfei.me/2013/05/10/longest-segement-merge</id>
    <content type="html"><![CDATA[<p>原始题目来自于雅虎北研黑客日初赛试题，大概的描述是“在一维空间有n条线段，将每两条具有交集的线段（如[a,b],[c,d],b>a,d>c）合并为一条线段，合并后的线段为 [min(a,c),max(b,d)]”，求经过合并操作后最长的线段长度。</p>

<p>在acm timus找到一道几乎一样的题目<a href="http://acm.timus.ru/problem.aspx?space=1&num=1019" target="_blank"> timus 1019 </a>。用<a href="https://en.wikipedia.org/wiki/Segment_tree" target="_blank">线段树</a>求解这两道题十分简单，例如 <a href="http://www.cnblogs.com/scau20110726/archive/2013/04/03/2998742.html" target="_blank">ural(Timus) 1019 Line Painting</a> 中的解法。</p>

<p>我答题的时候没有使用线段树，而是通过一个有序列表记录实际线段的起止坐标，对于题目1019，将画白线对应于加入线段，画黑线对应于擦除线段。那么每次画线的起止点分别有4种情况：起点在线段上；起点在线段外；终点在线段上；终点在线段外。根据情况修改有序列表记录的坐标值，有序列表中 [i,i+1]（i=0,2,4&hellip;）始终表示不相交的线段。最后遍历有序列表即可得到最长的线段。</p>

<!-- more -->


<p>实现代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">import</span> <span class="n">sys</span>
</span><span class='line'><span class="n">import</span> <span class="n">bisect</span>
</span><span class='line'>
</span><span class='line'><span class="n">MAX</span> <span class="o">=</span> <span class="mi">1000000000</span>
</span><span class='line'><span class="n">joined_lines</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="n">MAX</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">def</span> <span class="n">insert_node</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="n">first</span><span class="p">,</span> <span class="n">second</span><span class="p">,</span> <span class="n">ptype</span><span class="p">,</span> <span class="n">remove_val</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>    <span class="n">global</span> <span class="n">joined_lines</span>
</span><span class='line'>    <span class="n">flag</span> <span class="o">=</span> <span class="mi">0</span> <span class="k">if</span> <span class="n">ptype</span> <span class="o">==</span> <span class="sc">&#39;w&#39;</span> <span class="k">else</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">second</span> <span class="o">==</span> <span class="nl">first:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">first</span> <span class="o">&amp;</span> <span class="mi">1</span> <span class="o">==</span> <span class="nl">flag:</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">first</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="n">and</span> <span class="n">joined_lines</span><span class="p">[</span><span class="n">first</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">line</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">:</span>
</span><span class='line'>                <span class="n">remove_val</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">line</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">second</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">(</span><span class="n">joined_lines</span><span class="p">)</span> <span class="n">and</span> <span class="n">joined_lines</span><span class="p">[</span><span class="n">second</span><span class="p">]</span> <span class="o">==</span> <span class="n">line</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">:</span>
</span><span class='line'>                <span class="n">remove_val</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">line</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>            <span class="n">bisect</span><span class="p">.</span><span class="n">insort</span><span class="p">(</span><span class="n">joined_lines</span><span class="p">,</span> <span class="n">line</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'>            <span class="n">bisect</span><span class="p">.</span><span class="n">insort</span><span class="p">(</span><span class="n">joined_lines</span><span class="p">,</span> <span class="n">line</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>    <span class="k">else</span><span class="o">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">first</span> <span class="o">&amp;</span> <span class="mi">1</span> <span class="o">==</span> <span class="nl">flag:</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">first</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="n">and</span> <span class="n">joined_lines</span><span class="p">[</span><span class="n">first</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">line</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">:</span>
</span><span class='line'>                <span class="n">remove_val</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">line</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'>            <span class="n">joined_lines</span><span class="p">[</span><span class="n">first</span><span class="p">]</span> <span class="o">=</span> <span class="n">line</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">second</span> <span class="o">&amp;</span> <span class="mi">1</span> <span class="o">==</span> <span class="nl">flag:</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">second</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">(</span><span class="n">joined_lines</span><span class="p">)</span> <span class="n">and</span> <span class="n">joined_lines</span><span class="p">[</span><span class="n">second</span><span class="p">]</span> <span class="o">==</span> <span class="n">line</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">:</span>
</span><span class='line'>                <span class="n">remove_val</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">line</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>            <span class="n">joined_lines</span><span class="p">[</span><span class="n">second</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">line</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>        <span class="n">del_pos</span> <span class="o">=</span> <span class="n">first</span><span class="o">+</span><span class="mi">1</span> <span class="k">if</span> <span class="n">joined_lines</span><span class="p">[</span><span class="n">first</span><span class="p">]</span> <span class="o">==</span> <span class="n">line</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="k">else</span> <span class="n">first</span>
</span><span class='line'>        <span class="k">while</span> <span class="n">del_pos</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">(</span><span class="n">joined_lines</span><span class="p">)</span> <span class="n">and</span> <span class="n">joined_lines</span><span class="p">[</span><span class="n">del_pos</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">line</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">:</span>
</span><span class='line'>            <span class="n">joined_lines</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="n">joined_lines</span><span class="p">[</span><span class="n">del_pos</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="err">&#39;</span><span class="n">__main__</span><span class="err">&#39;</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">data</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">stdin</span><span class="p">.</span><span class="n">readlines</span><span class="p">()</span>
</span><span class='line'>    <span class="n">number</span> <span class="o">=</span> <span class="kt">int</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="n">in</span> <span class="n">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">number</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>        <span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">,</span> <span class="n">ptype</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">split</span><span class="p">()</span>
</span><span class='line'>        <span class="n">line</span> <span class="o">=</span> <span class="p">[</span><span class="kt">int</span><span class="p">(</span><span class="n">start</span><span class="p">),</span> <span class="kt">int</span><span class="p">(</span><span class="n">end</span><span class="p">)]</span>
</span><span class='line'>        <span class="n">first</span> <span class="o">=</span> <span class="n">bisect</span><span class="p">.</span><span class="n">bisect</span><span class="p">(</span><span class="n">joined_lines</span><span class="p">,</span> <span class="n">line</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'>        <span class="n">second</span> <span class="o">=</span> <span class="n">bisect</span><span class="p">.</span><span class="n">bisect</span><span class="p">(</span><span class="n">joined_lines</span><span class="p">,</span> <span class="n">line</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>        <span class="n">remove_val</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">insert_node</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="n">first</span><span class="p">,</span> <span class="n">second</span><span class="p">,</span> <span class="n">ptype</span><span class="p">,</span> <span class="n">remove_val</span><span class="p">)</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">rv</span> <span class="n">in</span> <span class="nl">remove_val:</span>
</span><span class='line'>            <span class="n">joined_lines</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="n">rv</span><span class="p">)</span>
</span><span class='line'>            <span class="n">joined_lines</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="n">rv</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">max</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">right</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="n">in</span> <span class="n">range</span><span class="p">(</span><span class="n">len</span><span class="p">(</span><span class="n">joined_lines</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">joined_lines</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="n">joined_lines</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nl">max:</span>
</span><span class='line'>            <span class="n">max</span> <span class="o">=</span> <span class="n">joined_lines</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="n">joined_lines</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>            <span class="n">left</span><span class="p">,</span> <span class="n">right</span> <span class="o">=</span> <span class="n">joined_lines</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="n">i</span><span class="p">],</span> <span class="n">joined_lines</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>    <span class="n">print</span> <span class="n">str</span><span class="p">(</span><span class="n">left</span><span class="p">)</span><span class="o">+</span><span class="sc">&#39; &#39;</span><span class="o">+</span><span class="n">str</span><span class="p">(</span><span class="n">right</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[stl make_heap在llvm和g++下的不同实现]]></title>
    <link href="http://amyangfei.me/2013/05/05/stl-heap-llvm-gcc/"/>
    <updated>2013-05-05T00:00:00+08:00</updated>
    <id>http://amyangfei.me/2013/05/05/stl-heap-llvm-gcc</id>
    <content type="html"><![CDATA[<p>先来看一段十分简单的使用stl的c++代码，</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">vec</span> <span class="o">=</span> <span class="k">new</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">();</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">len</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="o">*</span><span class="n">vec</span><span class="p">).</span><span class="n">push_back</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>    <span class="n">make_heap</span><span class="p">((</span><span class="o">*</span><span class="n">vec</span><span class="p">).</span><span class="n">begin</span><span class="p">(),</span> <span class="p">(</span><span class="o">*</span><span class="n">vec</span><span class="p">).</span><span class="n">end</span><span class="p">());</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;::</span><span class="n">iterator</span> <span class="n">iter</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">vec</span><span class="p">).</span><span class="n">begin</span><span class="p">();</span> <span class="n">iter</span> <span class="o">!=</span> <span class="p">(</span><span class="o">*</span><span class="n">vec</span><span class="p">).</span><span class="n">end</span><span class="p">();</span> <span class="n">iter</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="o">*</span><span class="n">iter</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; &quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>发现在 xcode 中运行和在 mac terminal 中利用 g++ 编译运行结果不一样，分别为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">xcode</span><span class="o">-</span><span class="k">default</span> <span class="o">:</span> <span class="mi">5</span> <span class="mi">4</span> <span class="mi">2</span> <span class="mi">1</span> <span class="mi">3</span>
</span><span class='line'><span class="n">terminal</span><span class="o">-</span><span class="n">g</span><span class="o">++</span>  <span class="o">:</span> <span class="mi">5</span> <span class="mi">4</span> <span class="mi">3</span> <span class="mi">1</span> <span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>建堆产生不同结果的原因很简单，即两次编译代码所使用的编译器不同，xcode中默认使用&#8221;Apple LLVM compiler&#8221;，在g++中使用的是&#8221;LLVM GCC&#8221;。而这两种不同编译器选择的STL实现方法是不一样的，LLVM默认选择&#8221;libc++(LLVM C++ standard library)&ldquo;，而g++默认使用的是&#8221;libstdc++(GNU C++ standard library)&#8221;。</p>

<h3>libc++中的实现</h3>

<p>在libc++中make_heap的实现如下所示，从代码中可以看出，通过 __last 这个随机访问的迭代器，从前向后遍历，调用 __push_heap_back 将数据依次插入到堆中。__push_heap_back 的实现是将新插入元素放在堆尾，然后针对这个元素使用 shift up 策略调整至合适位置。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">class</span> <span class="nc">_Compare</span><span class="p">,</span> <span class="k">class</span> <span class="nc">_RandomAccessIterator</span><span class="o">&gt;</span>
</span><span class='line'><span class="kt">void</span>
</span><span class='line'><span class="n">__make_heap</span><span class="p">(</span><span class="n">_RandomAccessIterator</span> <span class="n">__first</span><span class="p">,</span> <span class="n">_RandomAccessIterator</span> <span class="n">__last</span><span class="p">,</span> <span class="n">_Compare</span> <span class="n">__comp</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">typedef</span> <span class="k">typename</span> <span class="n">iterator_traits</span><span class="o">&lt;</span><span class="n">_RandomAccessIterator</span><span class="o">&gt;::</span><span class="n">difference_type</span> <span class="n">difference_type</span><span class="p">;</span>
</span><span class='line'>    <span class="n">difference_type</span> <span class="n">__n</span> <span class="o">=</span> <span class="n">__last</span> <span class="o">-</span> <span class="n">__first</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">__n</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">__last</span> <span class="o">=</span> <span class="n">__first</span><span class="p">;</span>
</span><span class='line'>        <span class="o">++</span><span class="n">__last</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">difference_type</span> <span class="n">__i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">__i</span> <span class="o">&lt;</span> <span class="n">__n</span><span class="p">;)</span>
</span><span class='line'>            <span class="n">__push_heap_back</span><span class="o">&lt;</span><span class="n">_Compare</span><span class="o">&gt;</span><span class="p">(</span><span class="n">__first</span><span class="p">,</span> <span class="o">++</span><span class="n">__last</span><span class="p">,</span> <span class="n">__comp</span><span class="p">,</span> <span class="o">++</span><span class="n">__i</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>libstdc++中的实现</h3>

<p>在 libstdc++ 中 make_heap 首先将所有元素按照原顺序放入堆的存储结构，然后从最大的非叶子节点开始调整元素位置，即调用 __adjust_heap 操作，__adjust_heap 会自上向下依次选择每个子节点中较大的元素上升。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'>  <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">_RandomAccessIterator</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="kt">void</span>
</span><span class='line'>    <span class="n">make_heap</span><span class="p">(</span><span class="n">_RandomAccessIterator</span> <span class="n">__first</span><span class="p">,</span> <span class="n">_RandomAccessIterator</span> <span class="n">__last</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="k">typedef</span> <span class="k">typename</span> <span class="n">iterator_traits</span><span class="o">&lt;</span><span class="n">_RandomAccessIterator</span><span class="o">&gt;::</span><span class="n">value_type</span> <span class="n">_ValueType</span><span class="p">;</span>
</span><span class='line'>      <span class="k">typedef</span> <span class="k">typename</span> <span class="n">iterator_traits</span><span class="o">&lt;</span><span class="n">_RandomAccessIterator</span><span class="o">&gt;::</span><span class="n">difference_type</span> <span class="n">_DistanceType</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// concept requirements</span>
</span><span class='line'>      <span class="n">__glibcxx_function_requires</span><span class="p">(</span><span class="n">_Mutable_RandomAccessIteratorConcept</span><span class="o">&lt;</span><span class="n">_RandomAccessIterator</span><span class="o">&gt;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">__glibcxx_function_requires</span><span class="p">(</span><span class="n">_LessThanComparableConcept</span><span class="o">&lt;</span><span class="n">_ValueType</span><span class="o">&gt;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">__glibcxx_requires_valid_range</span><span class="p">(</span><span class="n">__first</span><span class="p">,</span> <span class="n">__last</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">__last</span> <span class="o">-</span> <span class="n">__first</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">const</span> <span class="n">_DistanceType</span> <span class="n">__len</span> <span class="o">=</span> <span class="n">__last</span> <span class="o">-</span> <span class="n">__first</span><span class="p">;</span>
</span><span class='line'>      <span class="n">_DistanceType</span> <span class="n">__parent</span> <span class="o">=</span> <span class="p">(</span><span class="n">__len</span> <span class="o">-</span> <span class="mi">2</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>      <span class="k">while</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">__adjust_heap</span><span class="p">(</span><span class="n">__first</span><span class="p">,</span> <span class="n">__parent</span><span class="p">,</span> <span class="n">__len</span><span class="p">,</span>
</span><span class='line'>                 <span class="n">_ValueType</span><span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="n">__first</span> <span class="o">+</span> <span class="n">__parent</span><span class="p">)));</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">__parent</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>      <span class="n">__parent</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[scrapy使用笔记]]></title>
    <link href="http://amyangfei.me/2013/03/16/tips-of-scrapy/"/>
    <updated>2013-03-16T00:00:00+08:00</updated>
    <id>http://amyangfei.me/2013/03/16/tips-of-scrapy</id>
    <content type="html"><![CDATA[<p>最近在使用 scrapy 做爬虫，整个爬取框架很清晰，使用 <a href="http://twistedmatrix.com/trac/" target="_blank">twisted</a> 这个异步网络库来处理网络通讯，由 scrapy engine 作为系统调度。具体使用时通过继承 BaseSpider 自定义爬虫类，用户自己实现具体的页面分析、提供带抓取url，系统会自动调度完成页面的请求、下载返回resonse供解析。对于需要保存的数据，可以送到 Item Pipeline 中做后续处理。</p>

<h3>递归爬取页面</h3>

<p>爬虫运行时不断发现新的页面并进行爬取。跟踪 scrapy 源码中 BaseSpider 类，会发现下边的方法。爬去框架初始运行时会由系统调度，通过调用 next()，在 yield 挂起处继续执行 make_requests_from_url 返回 Request 对象，然后由系统调度进一步请求页面。每次爬去页面返回获得response后执行 spider 中的 parse 函数。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">start_requests</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">url</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">start_urls</span><span class="p">:</span>
</span><span class='line'>        <span class="k">yield</span> <span class="bp">self</span><span class="o">.</span><span class="n">make_requests_from_url</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">make_requests_from_url</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">url</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Request</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">dont_filter</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">#code in engine.py/class ExecutionEngine</span>
</span><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>  <span class="n">request</span> <span class="o">=</span> <span class="n">slot</span><span class="o">.</span><span class="n">start_requests</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
</span><span class='line'><span class="k">except</span> <span class="ne">StopIteration</span><span class="p">:</span>
</span><span class='line'>    <span class="n">slot</span><span class="o">.</span><span class="n">start_requests</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'><span class="k">except</span> <span class="ne">Exception</span><span class="p">,</span> <span class="n">exc</span><span class="p">:</span>
</span><span class='line'>    <span class="n">log</span><span class="o">.</span><span class="n">err</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="s">&#39;Obtaining request from start requests&#39;</span><span class="p">,</span> <span class="n">spider</span><span class="o">=</span><span class="n">spider</span><span class="p">)</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">crawl</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">spider</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>爬虫爬取时会不断发现新的 url 要爬取，在scrapy中实现递归爬取的方法很简单，只需要将下面的代码加到 parse 函数中。这样 parse 会在 yield 处挂起，等待系统的调度。下一次调用 next()后返回挂起点继续执行。</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">yield</span> <span class="bp">self</span><span class="o">.</span><span class="n">make_requests_from_url</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
</span><span class='line'><span class="c"># you can also use the following line</span>
</span><span class='line'><span class="n">items</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">make_requests_from_url</span><span class="p">(</span><span class="n">url</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>需要注意的是递归调用 make_requests_from_url 的代码 <b>一定写在 parse 函数中</b>，否则如果像下边代码的结构，parse 调用 _handle_page ，当_handle_page 进入 yield 语句块时会挂起，等待 next 信号，但是 parse 函数会运行退出，于是 yield 后的 make_requests_from_url 将不再会被调用，爬取也无法递归的进行下去。我一开始写就遇到了这个问题，分析系统调度过程中使用 yield 之后发现了问题所在。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">parse</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span>
</span><span class='line'>    <span class="n">page_type</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_gen_type_fromurl</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">url</span><span class="p">)</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">_handle_page</span><span class="p">(</span><span class="n">response</span><span class="p">,</span> <span class="n">page_type</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">_handle_page</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">response</span><span class="p">,</span> <span class="n">page_type</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">page_type</span> <span class="o">==</span> <span class="s">&#39;subject&#39;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">hxs</span> <span class="o">=</span> <span class="n">HtmlXPathSelector</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
</span><span class='line'>        <span class="n">new_url</span> <span class="o">=</span> <span class="n">hxs</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="s">&#39;//div[@class=&quot;rr&quot;]/a/@href&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">extract</span><span class="p">()</span>
</span><span class='line'>        <span class="k">yield</span> <span class="bp">self</span><span class="o">.</span><span class="n">make_requests_from_url</span><span class="p">(</span><span class="n">new_url</span><span class="p">)</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">page_type</span> <span class="o">==</span> <span class="s">&#39;review&#39;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">hxs</span> <span class="o">=</span> <span class="n">HtmlXPathSelector</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
</span><span class='line'>        <span class="n">content</span> <span class="o">=</span> <span class="n">hxs</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="s">&#39;//div[@id=&quot;link-report&quot;]/div&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="s">&#39;text()&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">extract</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>下边这个 demo 是上边错误的简化版本，调用 funcb 函数，funcc 函数挂起，funcb 内部的代码执行后 funcb 函数退出。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">funcb</span><span class="p">():</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;fun-b starts&#39;</span>
</span><span class='line'>    <span class="n">funcc</span><span class="p">()</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;fun-b ends&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">funcc</span><span class="p">():</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;fun-c starts&#39;</span>
</span><span class='line'>    <span class="k">yield</span> <span class="s">&#39;fun-c yield&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">b</span> <span class="o">=</span> <span class="n">funcb</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c">#output</span>
</span><span class='line'><span class="n">fun</span><span class="o">-</span><span class="n">b</span> <span class="n">starts</span>
</span><span class='line'><span class="n">fun</span><span class="o">-</span><span class="n">b</span> <span class="n">ends</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Scrapy相关资源链接</h3>

<ol>
<li><a href="http://blog.pluskid.org/?p=366" target="_blank">Scrapy 轻松定制网络爬虫</a></li>
<li><a href="http://www.yakergong.net/blog/archives/500" target="_blank">使用scrapy进行大规模抓取</a></li>
<li><a href="http://isbullsh.it/2012/04/Web-crawling-with-scrapy/" target="_blank">Crawl a website with scrapy</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tornado源码分析5]]></title>
    <link href="http://amyangfei.me/2013/03/01/tornado-source-analysis-5/"/>
    <updated>2013-03-01T00:00:00+08:00</updated>
    <id>http://amyangfei.me/2013/03/01/tornado-source-analysis-5</id>
    <content type="html"><![CDATA[<p>Tornado的web框架在web.py中实现，主要包括RequestHandler类（本质为对http请求处理的封装）和Application类（是一些列请求处理的集合，构成的一个web-application，源代码注释不翻译更容易理解：A collection of request handlers that make up a web application）。</p>

<h3>RequestHandler分析</h3>

<p>RequestHandler提供了一个针对http请求处理的基类封装，方法比较多，主要有以下功能：</p>

<ol>
<li><p>提供了GET/HEAD/POST/DELETE/PATCH/PUT/OPTIONS等方法的功能接口，具体开发时RequestHandler的子类重写这些方法以支持不同需求的请求处理。</p></li>
<li><p>提供对http请求的处理方法，包括对headers，页面元素，cookie的处理。</p></li>
<li><p>提供对请求响应的一些列功能，包括redirect，write（将数据写入输出缓冲区），渲染模板（render, reander_string）等</p></li>
<li><p>其他的一些辅助功能，如结束请求/响应，刷新输出缓冲区，对用户授权相关处理等。</p></li>
</ol>


<!-- more -->


<h3>Application分析</h3>

<p>源代码中的注释写的非常好：A collection of request handlers that make up a web application. Instances of this class are <strong>callable</strong> and can be passed directly to HTTPServer to serve the application. 该类初始化的第一个参数接受一个(regexp, request_class)形式的列表，指定了针对不同URL请求所采取的处理方法，包括对静态文件请求的处理（web.StaticFileHandler）。Application类中实现 <a href="http://docs.python.org/2/reference/datamodel.html#object.__call__" target="_blank">__call__</a> 函数，这样该类就成为可调用的对象，由HTTPServer来进行调用。比如下边是httpserver.py中HTTPConection类的代码，该处request_callback即为Application对象。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">_on_headers</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
</span><span class='line'>  <span class="c"># some codes...</span>
</span><span class='line'>  <span class="bp">self</span><span class="o">.</span><span class="n">request_callback</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_request</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>__call__函数会遍历Application的handlers列表，匹配到相应的URL后通过handler._execute进行相应处理；如果没有匹配的URL，则会调用ErrorHandler。</p>

<p>在Application初始时有一个debug参数，当debug=True时，运行程序时当有代码、模块发生修改，程序会自动重新加载，即实现了auto-reload功能。该功能在autoreload.py文件中实现，是否需要reload的检查在每次接收到http请求时进行，基本原理是检查每一个sys.modules以及_watched_files所包含的模块在程序中所保存的最近修改时间和文件系统中的最近修改时间是否一致，如果不一致，则整个程序重新加载。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">_reload_on_update</span><span class="p">(</span><span class="n">modify_times</span><span class="p">):</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">module</span> <span class="ow">in</span> <span class="n">sys</span><span class="o">.</span><span class="n">modules</span><span class="o">.</span><span class="n">values</span><span class="p">():</span>
</span><span class='line'>        <span class="c"># module test and some path handles</span>
</span><span class='line'>        <span class="n">_check_file</span><span class="p">(</span><span class="n">modify_times</span><span class="p">,</span> <span class="n">path</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">path</span> <span class="ow">in</span> <span class="n">_watched_files</span><span class="p">:</span>
</span><span class='line'>        <span class="n">_check_file</span><span class="p">(</span><span class="n">modify_times</span><span class="p">,</span> <span class="n">path</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Tornado的autoreload模块提供了一个对外的main接口，可以通过下边的方法实现运行test.py程序运行的auto-reload。但是测试了一下，功能有限，相比于django的autorelaod模块（具有较好的封装和较完善的功能）还是有一定的差距。最主要的原因是Tornado中的实现耦合了一些ioloop的功能，因而autoreload不是一个可独立的模块。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># tornado</span>
</span><span class='line'>python -m tornado.autoreload test.py <span class="o">[</span>args...<span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c"># django</span>
</span><span class='line'>from django.utils import autoreload
</span><span class='line'>autoreload.main<span class="o">(</span>your-main-func<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>asynchronous方法</h3>

<p>该方法通常被用为请求处理函数的decorator，以实现异步操作，被@asynchronous修饰后的请求处理为长连接，在调用self.finish之前会一直处于连接等待状态。</p>

<h3>总结</h3>

<p><a href="http://amyangfei.me/2013/01/29/tornado-source-analysis-2/" target="_blank">tornado源码分析2</a> 一文中给出了一张tornado httpserver的工作流程图，调用Application发生在HTTPConnection大方框的handle_request椭圆中。那篇文章里使用的是一个简单的请求处理函数handle_request，无论是handle_request还是application，其本质是一个函数（可调用的对象），当服务器接收连接并读取http请求header之后进行调用，进行请求处理和应答。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">http_server</span> <span class="o">=</span> <span class="n">httpserver</span><span class="o">.</span><span class="n">HTTPServer</span><span class="p">(</span><span class="n">handle_request</span><span class="p">)</span>
</span><span class='line'><span class="n">http_server</span> <span class="o">=</span> <span class="n">httpserver</span><span class="o">.</span><span class="n">HTTPServer</span><span class="p">(</span><span class="n">application</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[通过端口映射访问虚拟机内部网络]]></title>
    <link href="http://amyangfei.me/2013/02/28/access-vm-ssh-via-port-mapping/"/>
    <updated>2013-02-28T00:00:00+08:00</updated>
    <id>http://amyangfei.me/2013/02/28/access-vm-ssh-via-port-mapping</id>
    <content type="html"><![CDATA[<p>在VMware Workstation中如果使用NAT，虚拟机内部只会获取内网地址。现在我有这样的实验环境：</p>

<ul>
<li><p>主机：Windows7 + Vmware Workstation 9  公网IP: 166.111.x.x</p></li>
<li><p>虚拟机：Ubuntu12.10  内网IP: 192.168.248.129</p></li>
</ul>


<p>需求：在虚拟机内部搭建http服务，在外网可以直接访问；在外网通过ssh连接虚拟机。下边是进行ssh端口映射的步骤，http服务类似。</p>

<!-- more -->


<p>1. 找到Edit-Virtual Network Editor，选取虚拟机对应的网卡，这里为VMnet8。打开NAT Settings。</p>

<p><img src="http://amyangfei.me/images/post/20130228network_editor.png" style=""/></p>

<p>2. 在port forwarding中添加端口映射，将主机的10000端口影射为虚拟机的22端口。如果主机打开了防火墙，主机开了防火墙，手动打开10000端口，<a href="http://windows.microsoft.com/zh-CN/windows7/Open-a-port-in-Windows-Firewall" target="_blank">开启端口方法</a>。</p>

<p><img src="http://amyangfei.me/images/post/20130228portmapping.png" style=""/></p>

<p>之后就可以在外网直接通过ssh连接虚拟机： ssh <a href="&#x6d;&#97;&#x69;&#108;&#x74;&#111;&#x3a;&#x75;&#115;&#101;&#x72;&#110;&#97;&#109;&#x65;&#x40;&#x31;&#x36;&#x36;&#46;&#49;&#x31;&#49;&#46;&#x78;&#46;&#120;">&#x75;&#115;&#101;&#114;&#x6e;&#97;&#x6d;&#x65;&#x40;&#x31;&#54;&#x36;&#x2e;&#49;&#49;&#49;&#46;&#120;&#x2e;&#x78;</a> -p10000</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android运行脚本与定时工具]]></title>
    <link href="http://amyangfei.me/2013/02/08/android-taskscheduler-and-scripting/"/>
    <updated>2013-02-08T00:00:00+08:00</updated>
    <id>http://amyangfei.me/2013/02/08/android-taskscheduler-and-scripting</id>
    <content type="html"><![CDATA[<p>用惯了crontab，实验室的机器因为某些原因连不上，于是希望在自己的Android手机上完成定时执行一些脚本的任务。google一下找到了 <a href="http://i55m411.appspot.com/?p=594004" target="_blank">android应用实现定时打电话</a> 这样一篇文章，正好满足我的需求。下面做一个简单的总结。</p>

<h3>安装的软件</h3>

<ul>
<li><p><a href="http://code.google.com/p/android-scripting" target="_blank">SL4A(Scripting Layer for Android)</a>，Andriod系统下运行脚本的环境，可以在终端、后台或Locale中运行，现阶段支持Python, Perl, JRuby, Lua, BeanShell, JavaScript, Tcl和shell脚本。</p></li>
<li><p><a href="http://code.google.com/p/android-scripting/downloads/detail?name=PythonForAndroid_r4.apk&can=2" target="_blank">Py4A</a>，SL4A的python插件，安装之后就可以运行python脚本。</p></li>
<li><p><a href="https://play.google.com/store/apps/details?id=org.androidideas.taskbomb" target="_blank">TaskBomb task scheduler</a>，一个可以执行计划任务的app，类似于Unix中的crontab。</p></li>
<li><p><a href="https://play.google.com/store/apps/details?id=org.androidideas.scriptlauncher" target="_blank">SL4A Script Launcher</a>，TaskBomb可以通过此app执行SL4A脚本。</p></li>
</ul>


<!-- more -->


<h3>简单使用</h3>

<ul>
<li><p>安装Py4A后进入程序，点击最上边的Install会自动下载Python运行所需要的类库。</p></li>
<li><p>进入SL4A会看到在SL4A程序Scripts目录下的脚本，可以在terminal或后台运行这些脚本；在SL4A中可以添加、修改、删除脚本程序，使用方法很简单，不详细说明。</p></li>
<li><p>需要注意的是Py4A支持的是python2.6，最新的python-for-android的项目地址已经在 <a href="http://code.google.com/p/python-for-android/" target="_blank">这里</a> 。Py4A不仅支持python的原生API，同时可以很方便的调用Android的系统API，比如可以使用下边很简单的代码向目标手机发送短信。详细可参考 <a href="http://code.google.com/p/android-scripting/wiki/ApiReference" target="_blank">ApiReference</a>。</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">android</span>
</span><span class='line'>
</span><span class='line'><span class="n">droid</span> <span class="o">=</span> <span class="n">android</span><span class="o">.</span><span class="n">Android</span><span class="p">()</span>
</span><span class='line'><span class="n">droid</span><span class="o">.</span><span class="n">smsSend</span><span class="p">(</span><span class="s">&#39;15120000xxx&#39;</span><span class="p">,</span> <span class="s">&#39;this is an sms auto sent by Py4A.&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>其他</h3>

<p>最后这部分就是与文章内容不相关了。是一个虾米音乐自动签到的程序。需要注意的就是登录时一定要将headers中的User-Agent修改为浏览器的User-Agent，签到的post请求需要修改headers中的User-Agent和Referer地址。其他就没有什么了（突然想到和某只喵喵的比赛是不是可以拿TaskBomb+SL4A作弊），各位看官求轻拍，捂面。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">urllib2</span><span class="o">,</span> <span class="nn">urllib</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">login</span><span class="p">(</span><span class="n">email</span><span class="p">,</span> <span class="n">password</span><span class="p">):</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="n">cookies</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">HTTPCookieProcessor</span><span class="p">()</span>
</span><span class='line'>        <span class="n">opener</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">build_opener</span><span class="p">(</span><span class="n">cookies</span><span class="p">)</span>
</span><span class='line'>        <span class="n">urllib2</span><span class="o">.</span><span class="n">install_opener</span><span class="p">(</span><span class="n">opener</span><span class="p">)</span>
</span><span class='line'>        <span class="n">params</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;email&#39;</span><span class="p">:</span><span class="n">email</span><span class="p">,</span> <span class="s">&#39;password&#39;</span><span class="p">:</span><span class="n">password</span><span class="p">,</span> <span class="s">&#39;submit&#39;</span><span class="p">:</span><span class="s">&#39;登 录&#39;</span><span class="p">}</span>
</span><span class='line'>        <span class="n">loginUrl</span> <span class="o">=</span> <span class="s">&#39;http://www.xiami.com/member/login&#39;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="s">&quot;User-Agent&quot;</span><span class="p">:</span> <span class="s">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2) AppleWebKit/537.17 (KHTML, like Gecko) Chrome/24.0.1312.57 Safari/537.17&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="n">request</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">Request</span><span class="p">(</span>
</span><span class='line'>            <span class="n">url</span>     <span class="o">=</span> <span class="n">loginUrl</span><span class="p">,</span>
</span><span class='line'>            <span class="n">headers</span> <span class="o">=</span> <span class="n">headers</span><span class="p">,</span>
</span><span class='line'>            <span class="n">data</span>    <span class="o">=</span> <span class="n">urllib</span><span class="o">.</span><span class="n">urlencode</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="n">login</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="n">request</span><span class="p">)</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;login successfully...&#39;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">login</span>
</span><span class='line'>    <span class="k">except</span> <span class="ne">Exception</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;login failed:&#39;</span><span class="p">,</span> <span class="n">e</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">None</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">signin</span><span class="p">(</span><span class="n">email</span><span class="p">,</span> <span class="n">password</span><span class="p">):</span>
</span><span class='line'>    <span class="n">signurl</span> <span class="o">=</span> <span class="s">&#39;http://www.xiami.com/task/signin&#39;</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">login</span><span class="p">(</span><span class="n">email</span><span class="p">,</span> <span class="n">password</span><span class="p">)</span> <span class="o">!=</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>                <span class="s">&quot;Referer&quot;</span><span class="p">:</span> <span class="s">&quot;http://www.xiami.com/?register&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s">&quot;User-Agent&quot;</span><span class="p">:</span> <span class="s">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2) AppleWebKit/537.17 (KHTML, like Gecko) Chrome/24.0.1312.57 Safari/537.17&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">request</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">Request</span><span class="p">(</span>
</span><span class='line'>              <span class="n">url</span>  <span class="o">=</span> <span class="n">signurl</span><span class="p">,</span>
</span><span class='line'>              <span class="n">headers</span> <span class="o">=</span> <span class="n">headers</span>
</span><span class='line'>              <span class="p">)</span>
</span><span class='line'>            <span class="n">response</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="n">request</span><span class="p">)</span>
</span><span class='line'>            <span class="n">retcode</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'>            <span class="k">if</span> <span class="nb">str</span><span class="o">.</span><span class="n">isdigit</span><span class="p">(</span><span class="n">retcode</span><span class="p">):</span>
</span><span class='line'>              <span class="k">print</span> <span class="s">&#39;sign in days:&#39;</span><span class="p">,</span> <span class="n">retcode</span>
</span><span class='line'>        <span class="k">except</span> <span class="ne">Exception</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span> <span class="s">&#39;signin error:&#39;</span><span class="p">,</span> <span class="n">e</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">email</span> <span class="o">=</span> <span class="s">&#39;xxx&#39;</span>
</span><span class='line'>    <span class="n">password</span> <span class="o">=</span> <span class="s">&#39;xxx&#39;</span>
</span><span class='line'>    <span class="n">signin</span><span class="p">(</span><span class="n">email</span><span class="p">,</span> <span class="n">password</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>参考</h3>

<p><a href="http://i55m411.appspot.com/?p=594004" target="_blank">android应用实现定时打电话</a>， <a href="http://code.google.com/p/android-scripting/" target="_blank">google code SL4A</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tornado源码分析4]]></title>
    <link href="http://amyangfei.me/2013/02/05/tornado-source-analysis-4/"/>
    <updated>2013-02-05T00:00:00+08:00</updated>
    <id>http://amyangfei.me/2013/02/05/tornado-source-analysis-4</id>
    <content type="html"><![CDATA[<p>IOStream对socket读写进行了封装，分别提供读、写缓冲区实现对socket的异步读写。当socket被accept之后HTTPServer的_handle_connection会被回调并初始化IOStream对象，进一步通过IOStream提供的功能接口完成socket的读写。文章接下来将关注IOStream实现读写的细节。</p>

<h3>IOStream的初始化</h3>

<p>IOStream初始化过程中主要完成以下操作：</p>

<ol>
<li>绑定对应的socket</li>
<li>绑定ioloop</li>
<li>创建读缓冲区_read_buffer，一个python deque容器</li>
<li>创建写缓冲区_write_buffer，同样也是一个python deque容器</li>
</ol>


<!-- more -->


<h3>IOStream提供的主要功能接口</h3>

<p>主要的读写接口包括以下四个：</p>

<table width="100%">
    <tbody>
        <tr>
            <td>
                class IOStream(object):
            </td>
        </tr>
        <tr>
            <td>&nbsp;&nbsp;&nbsp;&nbsp;def read_until(self, delimiter, callback):
            <br>
                &nbsp;&nbsp;&nbsp;&nbsp;def read_bytes(self, num_bytes, callback, streaming_callback=None):
            <br>
                &nbsp;&nbsp;&nbsp;&nbsp;def read_until_regex(self, regex, callback):
            <br>
                &nbsp;&nbsp;&nbsp;&nbsp;def read_until_close(self, callback, streaming_callback=None):
            <br>
                &nbsp;&nbsp;&nbsp;&nbsp;def write(self, data, callback=None):
            </td>
        </tr>
    </tbody>
</table>


<ul>
<li>read_until和read_bytes是最常用的读接口，它们工作的过程都是先注册读事件结束时调用的回调函数，然后调用_try_inline_read方法。_try_inline_read首先尝试_read_from_buffer，即从上一次的读缓冲区中取数据，如果有数据直接调用 self._run_callback(callback, self._consume(data_length)) 执行回调函数，_consume消耗掉了_read_buffer中的数据；否则即_read_buffer之前没有未读数据，先通过_read_to_buffer将数据从socket读入_read_buffer，然后再执行_read_from_buffer操作。read_until和read_bytes的区别在于_read_from_buffer过程中截取数据的方法不同，read_until读取到delimiter终止，而read_bytes则读取num_bytes个字节终止。执行过程如下图所示：</li>
</ul>


<p><img src="http://amyangfei.me/images/post/20130205iostream_read.png" style="margin-left:22px;"/></p>

<ul>
<li><p>read_until_regex相当于delimiter为某一正则表达式的read_until。</p></li>
<li><p>read_until_close主要用于IOStream流关闭前后的读取：如果调用read_until_close时stream已经关闭，那么将会_consume掉_read_buffer中的所有数据；否则_read_until_close标志位设为True，注册_streaming_callback回调函数，调用_add_io_state添加io_loop.READ状态。</p></li>
<li><p>write首先将data按照数据块大小WRITE_BUFFER_CHUNK_SIZE分块写入<em>write_buffer，然后调用</em>handle_write向socket发送数据。</p></li>
</ul>


<h3>其他内部功能接口</h3>

<ul>
<li><p>def _handle_events(self, fd, events): 通常为IOLoop对象add_handler方法传入的回调函数，由IOLoop的事件机制来进行调度。</p></li>
<li><p>def _add_io_state(self, state): 为IOLoop对象的handler注册IOLoop.READ或IOLoop.WRITE状态，handler为IOStream对象的_handle_events方法。</p></li>
<li><p>def _consume(self, loc): 合并读缓冲区loc个字节，从读缓冲区删除并返回这些数据</p></li>
</ul>


<h3>参考</h3>

<p><a href="http://kenby.iteye.com/blog/1159621" target="_blank">Tornado源码分析之http服务器篇</a>， <a href="http://www.cnblogs.com/Bozh/archive/2012/07/22/2603976.html" target="_blank">tornado源码分析系列</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tornado源码分析3]]></title>
    <link href="http://amyangfei.me/2013/02/03/tornado-source-analysis-3/"/>
    <updated>2013-02-03T00:00:00+08:00</updated>
    <id>http://amyangfei.me/2013/02/03/tornado-source-analysis-3</id>
    <content type="html"><![CDATA[<p>注：在分割线之前是基于 Tornado2.4 的分析。在Tornado3.0+以后IOLoop发生了一些改动，分割线之后有相应的介绍。</p>

<p>IOLoop是基于epoll实现的底层网络I/O的核心调度模块，用于处理socket相关的连接、响应、异步读写等网络事件。每个Tornado进程都会初始化一个全局唯一的IOLoop实例，在IOLoop中通过静态方法instance()进行封装，获取IOLoop实例直接调用此方法即可。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nd">@staticmethod</span>
</span><span class='line'><span class="k">def</span> <span class="nf">instance</span><span class="p">():</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    class MyClass(object):</span>
</span><span class='line'><span class="sd">        def __init__(self, io_loop=None):</span>
</span><span class='line'><span class="sd">            self.io_loop = io_loop or IOLoop.instance()</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">IOLoop</span><span class="p">,</span> <span class="s">&quot;_instance&quot;</span><span class="p">):</span>
</span><span class='line'>        <span class="k">with</span> <span class="n">IOLoop</span><span class="o">.</span><span class="n">_instance_lock</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="ow">not</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">IOLoop</span><span class="p">,</span> <span class="s">&quot;_instance&quot;</span><span class="p">):</span>
</span><span class='line'>                <span class="c"># New instance after double check</span>
</span><span class='line'>                <span class="n">IOLoop</span><span class="o">.</span><span class="n">_instance</span> <span class="o">=</span> <span class="n">IOLoop</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">IOLoop</span><span class="o">.</span><span class="n">_instance</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>在上一篇文章中已经分析Tornado服务器启动时会创建监听socket，并将socket的file descriptor注册到IOLoop实例中，IOLoop添加对socket的IOLoop.READ事件监听并传入回调处理函数。当某个socket通过accept接受连接请求后调用注册的回调函数进行读写。接下来主要分析IOLoop对epoll的封装和I/O调度具体实现。</p>

<p><a href="http://www.kernel.org/doc/man-pages/online/pages/man4/epoll.4.html" target="_blank">epoll</a>是Linux内核中实现的一种可扩展的I/O事件通知机制，是对POISX系统中<a href="http://www.kernel.org/doc/man-pages/online/pages/man2/select.2.html" target="_blank"> select(2) </a> 和<a href="http://www.kernel.org/doc/man-pages/online/pages/man2/poll.2.html" target="_blank"> poll(2) </a>的替代，具有更高的性能和扩展性，FreeBSD中类似的实现是kqueue。Tornado中基于Python C扩展实现的的epoll模块(或kqueue)对epoll(kqueue)的使用进行了封装，使得IOLoop对象可以通过相应的事件处理机制对I/O进行调度。</p>

<p>IOLoop模块对网络事件类型的封装与epoll一致，分为READ，WRITE， ERROR三类，具体如下所示。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">READ</span> <span class="o">=</span> <span class="n">_EPOLLIN</span>
</span><span class='line'><span class="n">WRITE</span> <span class="o">=</span> <span class="n">_EPOLLOUT</span>
</span><span class='line'><span class="n">ERROR</span> <span class="o">=</span> <span class="n">_EPOLLERR</span> <span class="o">|</span> <span class="n">_EPOLLHUP</span>
</span></code></pre></td></tr></table></div></figure>


<h3>IOLoop的初始化</h3>

<p>初始化过程中选择epoll的实现方式，Linux平台为epoll，BSD平台为kqueue，其他平台如果安装有C模块扩展的epoll则使用tornado对epoll的封装，否则退化为select。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">impl</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">_impl</span> <span class="o">=</span> <span class="n">impl</span> <span class="ow">or</span> <span class="n">_poll</span><span class="p">()</span>
</span><span class='line'>    <span class="c">#省略部分代码</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">_waker</span> <span class="o">=</span> <span class="n">Waker</span><span class="p">()</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">add_handler</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_waker</span><span class="o">.</span><span class="n">fileno</span><span class="p">(),</span>
</span><span class='line'>                     <span class="k">lambda</span> <span class="n">fd</span><span class="p">,</span> <span class="n">events</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">_waker</span><span class="o">.</span><span class="n">consume</span><span class="p">(),</span>
</span><span class='line'>                     <span class="bp">self</span><span class="o">.</span><span class="n">READ</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">add_handler</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">fd</span><span class="p">,</span> <span class="n">handler</span><span class="p">,</span> <span class="n">events</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Registers the given handler to receive the given events for fd.&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">_handlers</span><span class="p">[</span><span class="n">fd</span><span class="p">]</span> <span class="o">=</span> <span class="n">stack_context</span><span class="o">.</span><span class="n">wrap</span><span class="p">(</span><span class="n">handler</span><span class="p">)</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">_impl</span><span class="o">.</span><span class="n">register</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">events</span> <span class="o">|</span> <span class="bp">self</span><span class="o">.</span><span class="n">ERROR</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>在IOLoop初始化的过程中创建了一个Waker对象，将Waker对象fd的读端注册到事件循环中并设定相应的回调函数（这样做的好处是当事件循环阻塞而没有响应描述符出现，需要在最大timeout时间之前返回，就可以向这个管道发送一个字符）。Waker的使用：一种是在其他线程向IOLoop添加callback时使用，唤醒IOLoop同时会将控制权转移给IOLoop线程并完成特定请求。唤醒的方法向管道中写入一个字符&#8217;x&#8217;。另外，在IOLoop的stop函数中会调用self._waker.wake()，通过向管道写入&#8217;x&#8217;停止事件循环。</p>

<p>add_handler函数使用了stack_context提供的wrap方法。wrap返回了一个可以直接调用的对象并且保存了传入之前的堆栈信息，在执行时可以恢复，这样就保证了函数的异步调用时具有正确的运行环境。</p>

<h3>IOLoop的start方法</h3>

<p>IOLoop的核心调度集中在start方法中，IOLoop实例对象调用start后开始epoll事件循环机制，该方法会一直运行直到IOLoop对象调用stop函数、当前所有事件循环完成。start方法中主要分三个部分：一个部分是对超时的相关处理；一部分是epoll事件通知阻塞、接收；一部分是对epoll返回I/O事件的处理。</p>

<ul>
<li><p>为防止IO event starvation，将回调函数延迟到下一轮事件循环中执行。</p></li>
<li><p>超时的处理
heapq维护一个最小堆，记录每个回调函数的超时时间（deadline）。每次取出deadline最早的回调函数，如果callback标志位为True并且已经超时，通过_run_callback调用函数；如果没有超时需要重新设定poll_timeout的值。</p></li>
<li><p>通过self._impl.poll(poll_timeout)进行事件阻塞，当有事件通知或超时时poll返回特定的event_pairs。</p></li>
<li><p>epoll返回通知事件后将新事件加入待处理队列，将就绪事件逐个弹出，通过stack_context.wrap(handler)保存的可执行对象调用事件处理。</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>    <span class="n">poll_timeout</span> <span class="o">=</span> <span class="mf">3600.0</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">_callback_lock</span><span class="p">:</span>
</span><span class='line'>        <span class="n">callbacks</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_callbacks</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_callbacks</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">callback</span> <span class="ow">in</span> <span class="n">callbacks</span><span class="p">:</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_run_callback</span><span class="p">(</span><span class="n">callback</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># 超时处理</span>
</span><span class='line'>    <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">_timeouts</span><span class="p">:</span>
</span><span class='line'>        <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
</span><span class='line'>        <span class="k">while</span> <span class="bp">self</span><span class="o">.</span><span class="n">_timeouts</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">_timeouts</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">callback</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>                <span class="c"># the timeout was cancelled</span>
</span><span class='line'>                <span class="n">heapq</span><span class="o">.</span><span class="n">heappop</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_timeouts</span><span class="p">)</span>
</span><span class='line'>            <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">_timeouts</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">deadline</span> <span class="o">&lt;=</span> <span class="n">now</span><span class="p">:</span>
</span><span class='line'>                <span class="n">timeout</span> <span class="o">=</span> <span class="n">heapq</span><span class="o">.</span><span class="n">heappop</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_timeouts</span><span class="p">)</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">_run_callback</span><span class="p">(</span><span class="n">timeout</span><span class="o">.</span><span class="n">callback</span><span class="p">)</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="n">seconds</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_timeouts</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">deadline</span> <span class="o">-</span> <span class="n">now</span>
</span><span class='line'>                <span class="n">poll_timeout</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">seconds</span><span class="p">,</span> <span class="n">poll_timeout</span><span class="p">)</span>
</span><span class='line'>                <span class="k">break</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">_callbacks</span><span class="p">:</span>
</span><span class='line'>        <span class="c"># If any callbacks or timeouts called add_callback,</span>
</span><span class='line'>        <span class="c"># we don&#39;t want to wait in poll() before we run them.</span>
</span><span class='line'>        <span class="n">poll_timeout</span> <span class="o">=</span> <span class="mf">0.0</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">_running</span><span class="p">:</span>
</span><span class='line'>        <span class="k">break</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">_blocking_signal_threshold</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>        <span class="c"># clear alarm so it doesn&#39;t fire while poll is waiting for events.</span>
</span><span class='line'>        <span class="n">signal</span><span class="o">.</span><span class="n">setitimer</span><span class="p">(</span><span class="n">signal</span><span class="o">.</span><span class="n">ITIMER_REAL</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># epoll阻塞，当有事件通知或超时返回event_pairs</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="n">event_pairs</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_impl</span><span class="o">.</span><span class="n">poll</span><span class="p">(</span><span class="n">poll_timeout</span><span class="p">)</span>
</span><span class='line'>    <span class="k">except</span> <span class="ne">Exception</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span>
</span><span class='line'>        <span class="c"># 异常处理，省略</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># 对epoll返回event_pairs事件的处理</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">_events</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">event_pairs</span><span class="p">)</span>
</span><span class='line'>    <span class="k">while</span> <span class="bp">self</span><span class="o">.</span><span class="n">_events</span><span class="p">:</span>
</span><span class='line'>        <span class="n">fd</span><span class="p">,</span> <span class="n">events</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_events</span><span class="o">.</span><span class="n">popitem</span><span class="p">()</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">_handlers</span><span class="p">[</span><span class="n">fd</span><span class="p">](</span><span class="n">fd</span><span class="p">,</span> <span class="n">events</span><span class="p">)</span>
</span><span class='line'>        <span class="k">except</span> <span class="ne">Exception</span> <span class="n">e</span><span class="p">:</span>
</span><span class='line'>            <span class="c"># 异常处理，省略</span>
</span></code></pre></td></tr></table></div></figure>


<p>至此IOLoop模块的分析基本完成。下一篇文章将会继续分析IOStream模块。</p>

<p>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;我是分割线&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;</p>

<p>补充于2013年4月30日，介绍Tornado3.0以后IOLoop模块的一些改动。</p>

<p>1. IOLoop成为util.Configurable的子类，IOLoop 中绝大多数成员方法都作为抽象接口，具体实现由派生类 PollIOLoop 完成。IOLoop实现了 Configurable 中的 configurable_base 和 configurable_default 这两个抽象接口，用于初始化过程中获取类类型和类的实现方法（即 IOLoop 中 poller 的实现方式）。在Tornado3.0+ 中针对不同平台，单独出 poller 相应的实现，EPollIOLoop、KQueueIOLoop、SelectIOLoop 均继承于 PollIOLoop。下边的代码是 configurable_default 方法根据平台选择相应的 epoll 实现。初始化 IOLoop 的过程中会自动根据平台选择合适的 poller 的实现方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nd">@classmethod</span>
</span><span class='line'><span class="k">def</span> <span class="nf">configurable_default</span><span class="p">(</span><span class="n">cls</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">select</span><span class="p">,</span> <span class="s">&quot;epoll&quot;</span><span class="p">):</span>
</span><span class='line'>        <span class="kn">from</span> <span class="nn">tornado.platform.epoll</span> <span class="kn">import</span> <span class="n">EPollIOLoop</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">EPollIOLoop</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">select</span><span class="p">,</span> <span class="s">&quot;kqueue&quot;</span><span class="p">):</span>
</span><span class='line'>        <span class="c"># Python 2.6+ on BSD or Mac</span>
</span><span class='line'>        <span class="kn">from</span> <span class="nn">tornado.platform.kqueue</span> <span class="kn">import</span> <span class="n">KQueueIOLoop</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">KQueueIOLoop</span>
</span><span class='line'>    <span class="kn">from</span> <span class="nn">tornado.platform.select</span> <span class="kn">import</span> <span class="n">SelectIOLoop</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">SelectIOLoop</span>
</span></code></pre></td></tr></table></div></figure>


<p>2. 其他有很多细节上的改动，详细可参见官方文档<a href="http://www.tornadoweb.org/en/stable/releases/v3.0.0.html#tornado-ioloop" target="_blank">What’s new in Tornado 3.0</a></p>

<h3>参考</h3>

<p><a href="http://kenby.iteye.com/blog/1159621" target="_blank">Tornado源码分析之http服务器篇</a>， <a href="http://www.cnblogs.com/Bozh/archive/2012/07/22/2603976.html" target="_blank">tornado源码分析系列</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tornado源码分析2]]></title>
    <link href="http://amyangfei.me/2013/01/29/tornado-source-analysis-2/"/>
    <updated>2013-01-29T00:00:00+08:00</updated>
    <id>http://amyangfei.me/2013/01/29/tornado-source-analysis-2</id>
    <content type="html"><![CDATA[<p>httpserver.py中给出了一个简单的http服务器的demo，代码如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">tornado</span> <span class="kn">import</span> <span class="n">httpserver</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">tornado</span> <span class="kn">import</span> <span class="n">ioloop</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">handle_request</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span><span class='line'>   <span class="n">message</span> <span class="o">=</span> <span class="s">&quot;You requested </span><span class="si">%s</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">request</span><span class="o">.</span><span class="n">uri</span>
</span><span class='line'>   <span class="n">request</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;HTTP/1.1 200 OK</span><span class="se">\r\n</span><span class="s">Content-Length: </span><span class="si">%d</span><span class="se">\r\n\r\n</span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span>
</span><span class='line'>                 <span class="nb">len</span><span class="p">(</span><span class="n">message</span><span class="p">),</span> <span class="n">message</span><span class="p">))</span>
</span><span class='line'>   <span class="n">request</span><span class="o">.</span><span class="n">finish</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">http_server</span> <span class="o">=</span> <span class="n">httpserver</span><span class="o">.</span><span class="n">HTTPServer</span><span class="p">(</span><span class="n">handle_request</span><span class="p">)</span>
</span><span class='line'><span class="n">http_server</span><span class="o">.</span><span class="n">bind</span><span class="p">(</span><span class="mi">8888</span><span class="p">)</span>
</span><span class='line'><span class="n">http_server</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</span><span class='line'><span class="n">ioloop</span><span class="o">.</span><span class="n">IOLoop</span><span class="o">.</span><span class="n">instance</span><span class="p">()</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>该http服务器主要使用到IOLoop, IOStream, HTTPServer, HTTPConnection几大模块，分别在代码ioloop.py, iostream.py, httpserver.py中实现。工作的流程如下图所示：</p>

<!-- more -->


<p><img src="http://amyangfei.me/images/post/20130128tornado-httpserver.png" style="width:610px;"/></p>

<p>服务器的工作流程：首先按照socket->bind->listen顺序创建listen socket监听客户端，并将每个listen socket的fd注册到IOLoop的单例实例中；当listen socket可读时回调_handle_events处理客户端请求；在与客户端通信的过程中使用IOStream封装了读、写缓冲区，实现与客户端的异步读写。</p>

<h3>HTTPServer分析</h3>

<p>HTTPServer在httpserver.py中实现，继承自TCPServer（netutil.py中实现），是一个无阻塞、单线程HTTP服务器。支持HTTP/1.1协议keep-alive连接，但不支持chunked encoding。服务器支持&#8217;X-Real-IP&#8217;和&#8217;X-Scheme&#8217;头以及SSL传输，支持多进程为prefork模式实现。在源代码的注释中对以上描述比较详细的说明，这里就不再细说。</p>

<p>HTTPServer和TCPServer的类结构</p>

<table width="100%">
    <tbody>
        <tr>
            <td>
                class HTTPServer(TCPServer):
            </td>
        </tr>
        <tr>
            <td>&nbsp;&nbsp;&nbsp;&nbsp;def __init__(self, request_callback, no_keep_alive=False, io_loop=None,
                 xheaders=False, ssl_options=None, **kwargs):
                <br>
                &nbsp;&nbsp;&nbsp;&nbsp;def handle_stream(self, stream, address):
            </td>
        </tr>
    </tbody>
</table>




<table width="100%">
    <tbody>
        <tr>
            <td>
                class TCPServer(object):
            </td>
        </tr>
        <tr>
            <td>&nbsp;&nbsp;&nbsp;&nbsp;def __init__(self, io_loop=None, ssl_options=None):
            <br>
                &nbsp;&nbsp;&nbsp;&nbsp;def listen(self, port, address=&#8221;&#8220;):
            <br>
                &nbsp;&nbsp;&nbsp;&nbsp;def add_sockets(self, sockets):
            <br>
                &nbsp;&nbsp;&nbsp;&nbsp;def bind(self, port, address=None, family=socket.AF_UNSPEC, backlog=128):   
            <br>
                &nbsp;&nbsp;&nbsp;&nbsp;def start(self, num_processes=1):
            <br>
                &nbsp;&nbsp;&nbsp;&nbsp;def stop(self):
            <br>
                &nbsp;&nbsp;&nbsp;&nbsp;def handle_stream(self, stream, address):
            <br>
                &nbsp;&nbsp;&nbsp;&nbsp;def _handle_connection(self, connection, address):
            </td>
        </tr>
    </tbody>
</table>


<p>文章开始部分创建HTTPServer的过程：首先需要定义处理request的回调函数，在tornado中通常使用tornado.web.Application封装。然后构造HTTPServer实例，注册回调函数。接下来监听端口，启动服务器。最后启动IOLoop。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">listen</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">port</span><span class="p">,</span> <span class="n">address</span><span class="o">=</span><span class="s">&quot;&quot;</span><span class="p">):</span>
</span><span class='line'>    <span class="n">sockets</span> <span class="o">=</span> <span class="n">bind_sockets</span><span class="p">(</span><span class="n">port</span><span class="p">,</span> <span class="n">address</span><span class="o">=</span><span class="n">address</span><span class="p">)</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">add_sockets</span><span class="p">(</span><span class="n">sockets</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">bind_sockets</span><span class="p">(</span><span class="n">port</span><span class="p">,</span> <span class="n">address</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">family</span><span class="o">=</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_UNSPEC</span><span class="p">,</span> <span class="n">backlog</span><span class="o">=</span><span class="mi">128</span><span class="p">):</span>
</span><span class='line'>    <span class="c"># 省略sockets创建，address，flags处理部分代码</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">res</span> <span class="ow">in</span> <span class="nb">set</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">getaddrinfo</span><span class="p">(</span><span class="n">address</span><span class="p">,</span> <span class="n">port</span><span class="p">,</span> <span class="n">family</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">,</span>
</span><span class='line'>                                  <span class="mi">0</span><span class="p">,</span> <span class="n">flags</span><span class="p">)):</span>
</span><span class='line'>        <span class="n">af</span><span class="p">,</span> <span class="n">socktype</span><span class="p">,</span> <span class="n">proto</span><span class="p">,</span> <span class="n">canonname</span><span class="p">,</span> <span class="n">sockaddr</span> <span class="o">=</span> <span class="n">res</span>
</span><span class='line'>        <span class="c"># 创建socket</span>
</span><span class='line'>        <span class="n">sock</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">af</span><span class="p">,</span> <span class="n">socktype</span><span class="p">,</span> <span class="n">proto</span><span class="p">)</span>
</span><span class='line'>        <span class="c"># 设置socket属性，代码省略</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">sock</span><span class="o">.</span><span class="n">bind</span><span class="p">(</span><span class="n">sockaddr</span><span class="p">)</span>
</span><span class='line'>        <span class="n">sock</span><span class="o">.</span><span class="n">listen</span><span class="p">(</span><span class="n">backlog</span><span class="p">)</span>
</span><span class='line'>        <span class="n">sockets</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">sock</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">sockets</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">add_sockets</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">sockets</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">io_loop</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">io_loop</span> <span class="o">=</span> <span class="n">IOLoop</span><span class="o">.</span><span class="n">instance</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">sock</span> <span class="ow">in</span> <span class="n">sockets</span><span class="p">:</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_sockets</span><span class="p">[</span><span class="n">sock</span><span class="o">.</span><span class="n">fileno</span><span class="p">()]</span> <span class="o">=</span> <span class="n">sock</span>
</span><span class='line'>        <span class="n">add_accept_handler</span><span class="p">(</span><span class="n">sock</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">_handle_connection</span><span class="p">,</span>
</span><span class='line'>                           <span class="n">io_loop</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">io_loop</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">add_accept_handler</span><span class="p">(</span><span class="n">sock</span><span class="p">,</span> <span class="n">callback</span><span class="p">,</span> <span class="n">io_loop</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">io_loop</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>        <span class="n">io_loop</span> <span class="o">=</span> <span class="n">IOLoop</span><span class="o">.</span><span class="n">instance</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">accept_handler</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">events</span><span class="p">):</span>
</span><span class='line'>        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>            <span class="k">try</span><span class="p">:</span>
</span><span class='line'>                <span class="n">connection</span><span class="p">,</span> <span class="n">address</span> <span class="o">=</span> <span class="n">sock</span><span class="o">.</span><span class="n">accept</span><span class="p">()</span>
</span><span class='line'>            <span class="k">except</span> <span class="n">socket</span><span class="o">.</span><span class="n">error</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">args</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="ow">in</span> <span class="p">(</span><span class="n">errno</span><span class="o">.</span><span class="n">EWOULDBLOCK</span><span class="p">,</span> <span class="n">errno</span><span class="o">.</span><span class="n">EAGAIN</span><span class="p">):</span>
</span><span class='line'>                    <span class="k">return</span>
</span><span class='line'>                <span class="k">raise</span>
</span><span class='line'>            <span class="c"># 当有连接被accepted时callback会被调用</span>
</span><span class='line'>            <span class="n">callback</span><span class="p">(</span><span class="n">connection</span><span class="p">,</span> <span class="n">address</span><span class="p">)</span>
</span><span class='line'>    <span class="n">io_loop</span><span class="o">.</span><span class="n">add_handler</span><span class="p">(</span><span class="n">sock</span><span class="o">.</span><span class="n">fileno</span><span class="p">(),</span> <span class="n">accept_handler</span><span class="p">,</span> <span class="n">IOLoop</span><span class="o">.</span><span class="n">READ</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">_handle_connection</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">connection</span><span class="p">,</span> <span class="n">address</span><span class="p">):</span>
</span><span class='line'>    <span class="c"># SSL部分省略</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="n">stream</span> <span class="o">=</span> <span class="n">IOStream</span><span class="p">(</span><span class="n">connection</span><span class="p">,</span> <span class="n">io_loop</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">io_loop</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">handle_stream</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="n">address</span><span class="p">)</span>
</span><span class='line'>    <span class="k">except</span> <span class="ne">Exception</span><span class="p">:</span>
</span><span class='line'>        <span class="n">logging</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="s">&quot;Error in connection callback&quot;</span><span class="p">,</span> <span class="n">exc_info</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里分析HTTPServer通过listen函数启动监听，这种方法是单进程模式。另外可以通过先后调用bind和start(num_processes=1)函数启动监听同时创建多进程服务器实例，后文有关于此的详细描述。</p>

<p>bind_sockets在启动监听端口过程中调用，getaddrinfo返回服务器的所有网卡信息, 每块网卡上都要创建监听客户端的请求并返回创建的sockets。创建socket过程中绑定地址和端口，同时设置了fcntl.FD_CLOEXEC（创建子进程时关闭打开的socket）和socket.SO_REUSEADDR（保证某一socket关闭后立即释放端口，实现端口复用）标志位。sock.listen(backlog=128)默认设定等待被处理的连接最大个数为128。</p>

<p>返回的每一个socket都加入到IOLoop中同时添加回调函数_handle_connection，IOLoop添加对相应socket的IOLoop.READ事件监听。_handle_connection在接受客户端的连接处理结束之后会被调用，调用时传入连接和ioloop对象初始化IOStream对象，用于对客户端的异步读写；然后调用handle_stream，传入创建的IOStream对象初始化一个HTTPConnection对象，HTTPConnection封装了IOStream的一些操作，用于处理HTTPRequest并返回。至此HTTP Server的创建、启动、注册回调函数的过程分析结束。</p>

<h3>HTTPConnection分析</h3>

<p>该类用于处理http请求。在HTTPConnection初始化时对self.request_callback赋值为一个可调用的对象（该对象用于对http请求的具体处理和应答）。该类首先读取http请求中header的结束符b(&ldquo;\r\n\r\n&rdquo;)，然后回调self._on_headers函数。request_callback的相关实现在以后的系列中有详细介绍。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">stream</span><span class="p">,</span> <span class="n">address</span><span class="p">,</span> <span class="n">request_callback</span><span class="p">,</span> <span class="n">no_keep_alive</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
</span><span class='line'>                 <span class="n">xheaders</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">request_callback</span> <span class="o">=</span> <span class="n">request_callback</span>
</span><span class='line'>    <span class="c"># some configuration code</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">_header_callback</span> <span class="o">=</span> <span class="n">stack_context</span><span class="o">.</span><span class="n">wrap</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_on_headers</span><span class="p">)</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">stream</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="n">b</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\r\n\r\n</span><span class="s">&quot;</span><span class="p">),</span> <span class="bp">self</span><span class="o">.</span><span class="n">_header_callback</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">_on_headers</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
</span><span class='line'>    <span class="c"># some codes</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">request_callback</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_request</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>多进程HTTPServer</h3>

<p>Tornado的HTTPServer是单进程单线程模式，同时提供了创建多进程服务器的接口，具体实现是在主进程启动HTTPServer时通过process.fork_processes(num_processes)产生新的服务器子进程，所有进程之间共享端口。fork_process的方法在process.py中实现，十分简洁。<a href="http://fjctlzy.diandian.com/post/2012-08-04/40031899614" target="_blank">从开源代码学习Python之tornado的多进程</a> 对fork_process有详细的分析。</p>

<p>FriendFeed使用nginx提供负载均衡、反向代理服务并作为静态文件服务器，在后端服务器上可以部署多个Tornado实例。<a href="http://www.v2ex.com/t/17505" target="_blank">v2ex:Tornado 项目都是如何部署</a> 里讨论的方案是通过Supervisor控制Tornado app，然后再通过nginx对Tornado的输出进行反向代理。<a href="https://idndx.com/2011/10/18/ways-to-deploy-tornado-under-production-environment-using-supervisor/" target="_blank">Tornado + Supervisor 在生产环境下的部署方法</a> 这篇文章也有相似的讨论。</p>

<h3>参考</h3>

<p><a href="http://kenby.iteye.com/blog/1159621" target="_blank">Tornado源码分析之http服务器篇</a>， <a href="http://www.cnblogs.com/Bozh/archive/2012/07/24/2606765.html" target="_blank">tornado源码分析系列</a>， <a href="http://golubenco.org/2009/09/19/understanding-the-code-inside-tornado-the-asynchronous-web-server-powering-friendfeed/" target="_blank">Understanding the code inside Tornado, the asynchronous web server</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tornado源码分析1]]></title>
    <link href="http://amyangfei.me/2013/01/27/tornado-source-analysis-1/"/>
    <updated>2013-01-27T00:00:00+08:00</updated>
    <id>http://amyangfei.me/2013/01/27/tornado-source-analysis-1</id>
    <content type="html"><![CDATA[<h3>引言</h3>

<p>Tornado是<a href="http://friendfeed.com/" target="_blank">FriendFeed</a>最早使用的一款由python编写的轻量级、无阻塞式Web服务器，还包括一些相关的工具和优化。现已由Facebook开源在<a href="https://github.com/facebook/tornado" target="_blank">github</a>。得益于无阻塞IO和epoll（or kqueue in FreeBSD, Mac OS X）的使用，Tornado每秒可以处理大量/数千的客户端连接，适用于实时的Web服务（详细可以参阅<a href="http://www.kegel.com/c10k.html" target="_blank">The C10K problem</a>）。</p>

<p>接下来几篇文章将会从Web服务器框架设计、代码实现细节等角度介绍我对Tornado源码的分析。这篇文章作为概述，首先介绍Tornado的模块按功能分类，同时提供后续文章的结构目录。</p>

<!-- more -->


<h3>Tornado模块分类</h3>

<ul>
<li><p><strong>Core web framework</strong></p>

<ul>
<li>tornado.web — 包含web框架的大部分主要功能，包含RequestHandler和Application两个重要的类</li>
<li>tornado.httpserver — 一个无阻塞HTTP服务器的实现</li>
<li>tornado.template — 模版系统</li>
<li>tornado.escape — HTML,JSON,URLs等的编码解码和一些字符串操作</li>
<li>tornado.locale — 国际化支持</li>
</ul>
</li>
<li><p><strong>Asynchronous networking 底层模块</strong></p>

<ul>
<li>tornado.ioloop — 核心的I/O循环</li>
<li>tornado.iostream — 对非阻塞式的 socket 的简单封装，以方便常用读写操作</li>
<li>tornado.httpclient — 一个无阻塞的HTTP服务器实现</li>
<li>tornado.netutil — 一些网络应用的实现，主要实现TCPServer类</li>
</ul>
</li>
<li><p><strong>Integration with other services</strong></p>

<ul>
<li>tornado.auth — 使用OpenId和OAuth进行第三方登录</li>
<li>tornado.database — 简单的MySQL服务端封装</li>
<li>tornado.platform.twisted — 在Tornado上运行为Twisted实现的代码</li>
<li>tornado.websocket — 实现和浏览器的双向通信</li>
<li>tornado.wsgi — 与其他python网络框架/服务器的相互操作</li>
</ul>
</li>
<li><p><strong>Utilities</strong></p>

<ul>
<li>tornado.autoreload — 生产环境中自动检查代码更新</li>
<li>tornado.gen — 一个基于生成器的接口，使用该模块保证代码异步运行</li>
<li>tornado.httputil — 分析HTTP请求内容</li>
<li>tornado.options — 解析终端参数</li>
<li>tornado.process — 多进程实现的封装</li>
<li>tornado.stack_context — 用于异步环境中对回调函数的上下文保存、异常处理</li>
<li>tornado.testing — 单元测试</li>
</ul>
</li>
</ul>


<h3>系列文章结构</h3>

<ol>
<li>概述</li>
<li><a href="http://amyangfei.me/2013/01/29/tornado-source-analysis-2/" target="_blank">Tornado HTTP服务器介绍</a></li>
<li><a href="http://amyangfei.me/2013/02/03/tornado-source-analysis-3/" target="_blank">I/O核心调度模块IOLoop</a></li>
<li><a href="http://amyangfei.me/2013/02/05/tornado-source-analysis-4/" target="_blank">读写缓冲模块IOStream</a></li>
<li><a href="http://amyangfei.me/2013/03/01/tornado-source-analysis-5/" target="_blank">核心web框架介绍</a></li>
<li>未完待续</li>
</ol>


<h3>参考</h3>

<p><a href="http://www.tornadoweb.org/documentation/index.html" target="_blank">Tornado Documentation</a>, <a href="http://www.tornadoweb.cn/documentation" target="_blank">Tornado Documentation CN</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[bash subshell变量作用域问题]]></title>
    <link href="http://amyangfei.me/2013/01/07/abtest-script-and-bash-subshell/"/>
    <updated>2013-01-07T00:00:00+08:00</updated>
    <id>http://amyangfei.me/2013/01/07/abtest-script-and-bash-subshell</id>
    <content type="html"><![CDATA[<p>今天研究apache ab这个测试工具，在网上看到<a href="http://blog.csdn.net/chosen0ne/article/details/7302991" target="_blank">压力测试shell脚本</a>一文介绍了一个封装的bash脚本，用于多次测试返回requests per second的平均值，对脚本进行了简单的改写，将所有的测试输出进行记录。改写脚本在文章的最后。</p>

<p>改写过程中发现这样一个问题，比如写下面的脚本：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nv">result</span><span class="o">=</span><span class="s2">&quot;&quot;</span>
</span><span class='line'>cat abtest_temp.log | <span class="k">while </span><span class="nb">read </span>LINE
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="nv">result</span><span class="o">=</span><span class="sb">`</span><span class="nb">echo</span> <span class="nv">$LINE</span> | grep <span class="s1">&#39;Requests per second:&#39;</span><span class="sb">`</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$result&quot;</span> !<span class="o">=</span> <span class="s2">&quot;&quot;</span> <span class="o">]</span>
</span><span class='line'>    <span class="k">then</span>
</span><span class='line'><span class="k">        </span><span class="nb">break</span>
</span><span class='line'><span class="nb">    </span><span class="k">fi</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;result is &quot;</span><span class="k">${</span><span class="nv">result</span><span class="k">}</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>在读取abtest_temp.log文件内容后，result的值仍为空，这是因为bash遇到管道后会创建一个新的进程，于是result是subshell中的局域变量，subshell对变量的修改不会影响原shell中的变量。</p>

<p>subshell可以export父shell中的变量，但export出来的变量只是父shell中变量的一个拷贝，进行修改并不能影响到父shell。但反过来，父shell再次更改此变量时，subshell 再去读时，读到的是新值，而不是原来的值。参考bash man page中的说明：<a href="http://www.gnu.org/software/bash/manual/bashref.html#Pipelines" target="_blank">Each command in a pipeline is executed in its own subshell</a>以及<a href="http://linux.die.net/man/1/bash" target="_blank">Each command in a pipeline is executed as a separate process (i.e., in a subshell).</a></p>

<p>对于这种情形有一些解决方法，这里给出两种：第一种是将subshell外需要访问的变量输出到临时文件中。第二种是使用命名管道。本质都是进程间通信的实现。</p>

<h3>使用临时文件</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nv">result</span><span class="o">=</span><span class="s2">&quot;&quot;</span>
</span><span class='line'>cat abtest_temp.log | <span class="k">while </span><span class="nb">read </span>LINE
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="nv">result</span><span class="o">=</span><span class="sb">`</span><span class="nb">echo</span> <span class="nv">$LINE</span> | grep <span class="s1">&#39;Requests per second:&#39;</span><span class="sb">`</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$result&quot;</span> !<span class="o">=</span> <span class="s2">&quot;&quot;</span> <span class="o">]</span>
</span><span class='line'>    <span class="k">then</span>
</span><span class='line'><span class="k">        </span><span class="nb">echo</span> <span class="nv">$result</span> &gt; .result_temp
</span><span class='line'>        <span class="nb">break</span>
</span><span class='line'><span class="nb">    </span><span class="k">fi</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;result is &quot;</span><span class="sb">`</span>cat .result_temp<span class="sb">`</span>
</span></code></pre></td></tr></table></div></figure>


<h3>使用命名管道</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nv">result</span><span class="o">=</span><span class="s2">&quot;&quot;</span>
</span><span class='line'>mkfifo pipetem
</span><span class='line'><span class="o">(</span>cat abtest_temp.log | <span class="k">while </span><span class="nb">read </span>LINE
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="nv">result</span><span class="o">=</span><span class="sb">`</span><span class="nb">echo</span> <span class="nv">$LINE</span> | grep <span class="s1">&#39;Requests per second:&#39;</span><span class="sb">`</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$result&quot;</span> !<span class="o">=</span> <span class="s2">&quot;&quot;</span> <span class="o">]</span>
</span><span class='line'>    <span class="k">then</span>
</span><span class='line'><span class="k">        </span><span class="nb">echo</span> <span class="nv">$result</span> &gt; pipetem &amp;
</span><span class='line'>        <span class="nb">break</span>
</span><span class='line'><span class="nb">    </span><span class="k">fi</span>
</span><span class='line'><span class="k">done</span><span class="o">)</span>
</span><span class='line'><span class="nb">read </span>result &lt; pipetem
</span><span class='line'>rm pipetem
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;result is &quot;</span><span class="k">${</span><span class="nv">result</span><span class="k">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>对apache ab封装的测试脚本</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nv">total_request</span><span class="o">=</span>1000
</span><span class='line'><span class="nv">concurrency</span><span class="o">=</span>100
</span><span class='line'><span class="nb">times</span><span class="o">=</span>1
</span><span class='line'>
</span><span class='line'><span class="nv">cmd_idx</span><span class="o">=</span>1
</span><span class='line'><span class="nv">param_count</span><span class="o">=</span><span class="nv">$#</span>
</span><span class='line'><span class="k">while</span> <span class="o">[</span> <span class="nv">$cmd_idx</span> -lt <span class="nv">$param_count</span> <span class="o">]</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="nv">cmd</span><span class="o">=</span><span class="nv">$1</span>
</span><span class='line'>    <span class="nb">shift </span>1 <span class="c">#remove $1</span>
</span><span class='line'>    <span class="k">case</span> <span class="nv">$cmd</span> in
</span><span class='line'>        -n<span class="o">)</span>
</span><span class='line'>            <span class="nv">total_request</span><span class="o">=</span><span class="nv">$1</span>
</span><span class='line'>            <span class="nb">shift </span>1;;
</span><span class='line'>        -c<span class="o">)</span>
</span><span class='line'>            <span class="nv">concurrency</span><span class="o">=</span><span class="nv">$1</span>
</span><span class='line'>            <span class="nb">shift </span>1;;
</span><span class='line'>        -t<span class="o">)</span>
</span><span class='line'>            <span class="nb">times</span><span class="o">=</span><span class="nv">$1</span>
</span><span class='line'>            <span class="nb">shift </span>1;;
</span><span class='line'>        *<span class="o">)</span>
</span><span class='line'>            <span class="nb">echo</span> <span class="s2">&quot;$cmd, support parameter: -n, -c, -t&quot;</span>;;
</span><span class='line'>    <span class="k">esac</span>
</span><span class='line'><span class="k">    </span><span class="nv">cmd_idx</span><span class="o">=</span><span class="sb">`</span>expr <span class="nv">$cmd_idx</span> + 2<span class="sb">`</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="nv">url</span><span class="o">=</span><span class="nv">$1</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="nv">$url</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> <span class="s1">&#39;the test url must be provided...&#39;</span>
</span><span class='line'>    <span class="nb">exit </span>2
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Total Request: $total_request, Concurrency: $concurrency, URL: $url, Times: $times&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">ab_dir</span><span class="o">=</span>/usr/bin
</span><span class='line'><span class="nv">ab_cmd</span><span class="o">=</span><span class="s2">&quot;$ab_dir/ab -n $total_request -c $concurrency $url&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="nv">$ab_cmd</span>
</span><span class='line'><span class="nv">idx</span><span class="o">=</span>1
</span><span class='line'><span class="nv">rps_sum</span><span class="o">=</span>0
</span><span class='line'><span class="nv">max</span><span class="o">=</span>-1
</span><span class='line'><span class="nv">min</span><span class="o">=</span>99999999
</span><span class='line'><span class="k">while</span> <span class="o">[</span> <span class="nv">$idx</span> -le <span class="nv">$times</span> <span class="o">]</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> <span class="s2">&quot;start loop $idx&quot;</span>
</span><span class='line'>    <span class="nv">$ab_cmd</span> &gt;abtest_temp.log 2&gt;&amp;1
</span><span class='line'>    cat abtest_temp.log | <span class="k">while </span><span class="nb">read </span>LINE
</span><span class='line'>    <span class="k">do</span>
</span><span class='line'><span class="k">        </span><span class="nv">result</span><span class="o">=</span><span class="sb">`</span><span class="nb">echo</span> <span class="nv">$LINE</span> | grep <span class="s1">&#39;Requests per second:&#39;</span><span class="sb">`</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$result&quot;</span> !<span class="o">=</span> <span class="s2">&quot;&quot;</span> <span class="o">]</span>
</span><span class='line'>        <span class="k">then</span>
</span><span class='line'><span class="k">            </span><span class="nb">echo</span> <span class="nv">$result</span> &gt; .result_temp
</span><span class='line'>            <span class="nb">break</span>
</span><span class='line'><span class="nb">        </span><span class="k">fi</span>
</span><span class='line'><span class="k">    done</span>
</span><span class='line'><span class="k">    </span><span class="nv">result</span><span class="o">=</span><span class="sb">`</span>cat .result_temp<span class="sb">`</span>
</span><span class='line'>    rm .result_temp
</span><span class='line'>    <span class="nv">result</span><span class="o">=</span><span class="sb">`</span><span class="nb">echo</span> <span class="nv">$result</span> | awk -F <span class="s1">&#39; &#39;</span> <span class="s1">&#39;{ print $4 }&#39;</span> | awk -F <span class="s1">&#39;.&#39;</span> <span class="s1">&#39;{ print $1 }&#39;</span><span class="sb">`</span>
</span><span class='line'>    <span class="nv">rps_sum</span><span class="o">=</span><span class="sb">`</span>expr <span class="nv">$result</span> + <span class="nv">$rps_sum</span><span class="sb">`</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">[</span> <span class="nv">$result</span> -gt <span class="nv">$max</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">        </span><span class="nv">max</span><span class="o">=</span><span class="nv">$result</span>
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'><span class="k">    if</span> <span class="o">[</span> <span class="nv">$result</span> -lt <span class="nv">$min</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">        </span><span class="nv">min</span><span class="o">=</span><span class="nv">$result</span>
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'><span class="k">    </span><span class="nv">idx</span><span class="o">=</span><span class="sb">`</span>expr <span class="nv">$idx</span> + 1<span class="sb">`</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;avg rps: &quot;</span><span class="sb">`</span>expr <span class="nv">$rps_sum</span> / <span class="nv">$times</span><span class="sb">`</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;min rps: $min&quot;</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;max rps: $max&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>参考文章</h3>

<p><a href="http://blog.csdn.net/chosen0ne/article/details/7302991" target="_blank">压力测试shell脚本</a>，<a href="http://blog.csdn.net/sosodream/article/details/5683515" target="_blank">实例解析shell子进程（subshell )</a>，<a href="http://lihdd.net/bash-pipe-pitfall" target="_blank">小心bash的管道</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[baidu-star算法题-地铁]]></title>
    <link href="http://amyangfei.me/2013/01/02/baidustar-code-digraph/"/>
    <updated>2013-01-02T00:00:00+08:00</updated>
    <id>http://amyangfei.me/2013/01/02/baidustar-code-digraph</id>
    <content type="html"><![CDATA[<p>题目来源：<a href="http://astar.baidu.com/index.php?r=home/detail&id=8" target="_blank">百度之星-2012年12月23号竞赛题目三-地铁</a></p>

<p>思路：地图是一个有向图，需要从M条边中删除M-K条有向边。下面将一个点的出度与入度差的绝对值记为该点的“度”。由于只删边不增加边，那么如果希望降低系统的最大度，那么具有最大度的顶点一定需要删除与其相关的边。考虑使用贪心算法，每次选择删除边的规则如下：</p>

<ol>
<li>选出具有最大度的所有顶点，定义一个待删除相关节点最大度lastdegmax。对应每一个顶点u，如果u的出度大于入度，那么对应每一条(u,v),若删除(u,v)后会降低v的度，并且v的度大于lastdegmax，那么将(u,v)设置为将要删除的缓冲区(待删除缓冲区长度为1)。如果u的入度大于出度，操作类似。</li>
<li>如果1中删除任何一条(u,v)或(v,u)都会增加v的度，那么选择选择具有最小度的v，将(u,v)或(v,u)加入待删除缓冲区。</li>
<li>缓冲区中的边即为该轮迭代中将要删除的边。</li>
</ol>


<!-- more -->


<p>实现代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="cp">#include &lt;map&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cmath&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span><span class="o">::</span><span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">bool</span> <span class="n">SortByDeg</span><span class="p">(</span><span class="k">const</span> <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">v1</span><span class="p">,</span> <span class="k">const</span> <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">v2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">abs</span><span class="p">(</span><span class="n">v1</span><span class="p">.</span><span class="n">second</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">abs</span><span class="p">(</span><span class="n">v2</span><span class="p">.</span><span class="n">second</span><span class="p">);</span> <span class="c1">//desc sort</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">SortWrap</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">deg</span><span class="p">,</span> <span class="n">map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">degmap</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">sort</span><span class="p">(</span><span class="n">deg</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">deg</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">SortByDeg</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">deg</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">degmap</span><span class="p">[</span><span class="n">deg</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">first</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">deldeg</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">deldeg</span><span class="p">,</span> <span class="kt">int</span> <span class="n">u</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;::</span><span class="n">iterator</span> <span class="n">uiter</span> <span class="o">=</span> <span class="n">deldeg</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">uiter</span> <span class="o">!=</span> <span class="n">deldeg</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="n">uiter</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">uiter</span> <span class="o">==</span> <span class="n">u</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">deldeg</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">uiter</span><span class="p">);</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">update</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">outdeg</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">indeg</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">deg</span><span class="p">,</span> <span class="n">map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">degmap</span><span class="p">,</span> <span class="kt">int</span> <span class="n">u</span><span class="p">,</span> <span class="kt">int</span> <span class="n">v</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">deldeg</span><span class="p">(</span><span class="n">outdeg</span><span class="p">,</span> <span class="n">v</span><span class="p">);</span>
</span><span class='line'>    <span class="n">deldeg</span><span class="p">(</span><span class="n">indeg</span><span class="p">,</span> <span class="n">u</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;::</span><span class="n">iterator</span> <span class="n">iter</span> <span class="o">=</span> <span class="n">deg</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">iter</span> <span class="o">!=</span> <span class="n">deg</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="n">iter</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">ret</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">((</span><span class="o">*</span><span class="n">iter</span><span class="p">).</span><span class="n">first</span> <span class="o">==</span> <span class="n">u</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">(</span><span class="o">*</span><span class="n">iter</span><span class="p">).</span><span class="n">second</span> <span class="o">-=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="n">ret</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">if</span> <span class="p">((</span><span class="o">*</span><span class="n">iter</span><span class="p">).</span><span class="n">first</span> <span class="o">==</span> <span class="n">v</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">(</span><span class="o">*</span><span class="n">iter</span><span class="p">).</span><span class="n">second</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="n">ret</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">SortWrap</span><span class="p">(</span><span class="n">deg</span><span class="p">,</span> <span class="n">degmap</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">setdelbuf</span><span class="p">(</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">delbuf</span><span class="p">,</span> <span class="kt">int</span> <span class="n">u</span><span class="p">,</span> <span class="kt">int</span> <span class="n">v</span><span class="p">,</span> <span class="kt">int</span> <span class="n">handleOut</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">delbuf</span><span class="p">.</span><span class="n">first</span> <span class="o">=</span> <span class="n">handleOut</span><span class="o">&gt;</span><span class="mi">0</span> <span class="o">?</span> <span class="n">u</span> <span class="o">:</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'>    <span class="n">delbuf</span><span class="p">.</span><span class="n">second</span> <span class="o">=</span> <span class="n">handleOut</span><span class="o">&gt;</span><span class="mi">0</span> <span class="o">?</span> <span class="n">v</span> <span class="o">:</span> <span class="n">u</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">oneSelect</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">outdeg</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">indeg</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">deg</span><span class="p">,</span> <span class="n">map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">degmap</span><span class="p">,</span> <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">delbuf</span><span class="p">,</span> <span class="kt">int</span> <span class="n">u</span><span class="p">,</span> <span class="kt">int</span> <span class="o">*</span><span class="n">lastdegmax</span><span class="p">,</span> <span class="kt">int</span> <span class="o">*</span><span class="n">lastdegmin</span><span class="p">,</span> <span class="kt">bool</span> <span class="o">*</span><span class="n">minusmax</span><span class="p">,</span> <span class="kt">int</span> <span class="n">handleOut</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">handleDeg</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">handleOut</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="n">handleDeg</span> <span class="o">=</span> <span class="n">outdeg</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="n">handleDeg</span> <span class="o">=</span> <span class="n">indeg</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;::</span><span class="n">iterator</span> <span class="n">viter</span> <span class="o">=</span> <span class="n">handleDeg</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">viter</span> <span class="o">!=</span> <span class="n">handleDeg</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="n">viter</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">deg</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">degmap</span><span class="p">[</span><span class="o">*</span><span class="n">viter</span><span class="p">]).</span><span class="n">second</span> <span class="o">*</span> <span class="n">handleOut</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">abs</span><span class="p">(</span><span class="n">deg</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">degmap</span><span class="p">[</span><span class="o">*</span><span class="n">viter</span><span class="p">]).</span><span class="n">second</span><span class="p">)</span> <span class="o">&gt;</span> <span class="o">*</span><span class="n">lastdegmax</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="o">*</span><span class="n">lastdegmax</span> <span class="o">=</span> <span class="n">abs</span><span class="p">(</span><span class="n">deg</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">degmap</span><span class="p">[</span><span class="o">*</span><span class="n">viter</span><span class="p">]).</span><span class="n">second</span><span class="p">);</span>
</span><span class='line'>                <span class="n">setdelbuf</span><span class="p">(</span><span class="n">delbuf</span><span class="p">,</span> <span class="n">u</span><span class="p">,</span> <span class="o">*</span><span class="n">viter</span><span class="p">,</span> <span class="n">handleOut</span><span class="p">);</span>
</span><span class='line'>                <span class="o">*</span><span class="n">minusmax</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="o">*</span><span class="n">minusmax</span><span class="p">)</span> <span class="p">){</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span> <span class="n">abs</span><span class="p">(</span><span class="n">deg</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">degmap</span><span class="p">[</span><span class="o">*</span><span class="n">viter</span><span class="p">]).</span><span class="n">second</span><span class="p">)</span> <span class="o">&lt;</span> <span class="o">*</span><span class="n">lastdegmin</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">setdelbuf</span><span class="p">(</span><span class="n">delbuf</span><span class="p">,</span> <span class="n">u</span><span class="p">,</span> <span class="o">*</span><span class="n">viter</span><span class="p">,</span> <span class="n">handleOut</span><span class="p">);</span>
</span><span class='line'>                <span class="o">*</span><span class="n">lastdegmin</span> <span class="o">=</span> <span class="n">abs</span><span class="p">(</span><span class="n">deg</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">degmap</span><span class="p">[</span><span class="o">*</span><span class="n">viter</span><span class="p">]).</span><span class="n">second</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">cutSelect</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">outdeg</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">indeg</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">deg</span><span class="p">,</span> <span class="n">map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">degmap</span><span class="p">,</span> <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">delbuf</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">degmax</span> <span class="o">=</span> <span class="n">abs</span><span class="p">(</span><span class="n">deg</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="n">second</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">lastdegmax</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">lastdegmin</span> <span class="o">=</span> <span class="n">degmax</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="n">minusmax</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">deg</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="n">abs</span><span class="p">(</span><span class="n">deg</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">j</span><span class="p">).</span><span class="n">second</span><span class="p">)</span><span class="o">==</span><span class="n">degmax</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">handleOut</span> <span class="o">=</span> <span class="n">deg</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">j</span><span class="p">).</span><span class="n">second</span><span class="o">&gt;</span><span class="mi">0</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="n">oneSelect</span><span class="p">(</span><span class="n">outdeg</span><span class="p">[</span><span class="n">deg</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">j</span><span class="p">).</span><span class="n">first</span><span class="p">],</span> <span class="n">indeg</span><span class="p">[</span><span class="n">deg</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">j</span><span class="p">).</span><span class="n">first</span><span class="p">],</span> <span class="n">deg</span><span class="p">,</span> <span class="n">degmap</span><span class="p">,</span> <span class="n">delbuf</span><span class="p">,</span> <span class="n">deg</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">j</span><span class="p">).</span><span class="n">first</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">lastdegmax</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">lastdegmin</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">minusmax</span><span class="p">,</span> <span class="n">handleOut</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">solve</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">int</span> <span class="n">m</span><span class="p">,</span> <span class="kt">int</span> <span class="n">k</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">way</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">outdeg</span> <span class="o">=</span> <span class="k">new</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">[</span><span class="n">n</span><span class="p">];</span>
</span><span class='line'>    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">indeg</span> <span class="o">=</span> <span class="k">new</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">[</span><span class="n">n</span><span class="p">];</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;::</span><span class="n">iterator</span> <span class="n">iter</span> <span class="o">=</span> <span class="n">way</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">iter</span> <span class="o">!=</span> <span class="n">way</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="n">iter</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">outdeg</span><span class="p">[(</span><span class="o">*</span><span class="n">iter</span><span class="p">).</span><span class="n">first</span><span class="p">].</span><span class="n">push_back</span><span class="p">((</span><span class="o">*</span><span class="n">iter</span><span class="p">).</span><span class="n">second</span><span class="p">);</span>
</span><span class='line'>        <span class="n">indeg</span><span class="p">[(</span><span class="o">*</span><span class="n">iter</span><span class="p">).</span><span class="n">second</span><span class="p">].</span><span class="n">push_back</span><span class="p">((</span><span class="o">*</span><span class="n">iter</span><span class="p">).</span><span class="n">first</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">vector</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">deg</span><span class="p">;</span>
</span><span class='line'>    <span class="n">map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">degmap</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">deg</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">make_pair</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">outdeg</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">size</span><span class="p">()</span><span class="o">-</span><span class="n">indeg</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">size</span><span class="p">()));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">SortWrap</span><span class="p">(</span><span class="n">deg</span><span class="p">,</span> <span class="n">degmap</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="o">-</span><span class="n">k</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">delbuf</span> <span class="o">=</span> <span class="n">make_pair</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="n">cutSelect</span><span class="p">(</span><span class="n">outdeg</span><span class="p">,</span> <span class="n">indeg</span><span class="p">,</span> <span class="n">deg</span><span class="p">,</span> <span class="n">degmap</span><span class="p">,</span> <span class="n">delbuf</span><span class="p">);</span>
</span><span class='line'>        <span class="n">update</span><span class="p">(</span><span class="n">outdeg</span><span class="p">[</span><span class="n">delbuf</span><span class="p">.</span><span class="n">first</span><span class="p">],</span> <span class="n">indeg</span><span class="p">[</span><span class="n">delbuf</span><span class="p">.</span><span class="n">second</span><span class="p">],</span> <span class="n">deg</span><span class="p">,</span> <span class="n">degmap</span><span class="p">,</span> <span class="n">delbuf</span><span class="p">.</span><span class="n">first</span><span class="p">,</span> <span class="n">delbuf</span><span class="p">.</span><span class="n">second</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">abs</span><span class="p">(</span><span class="n">deg</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="n">second</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">T</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">T</span><span class="p">;</span>
</span><span class='line'>    <span class="n">vector</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">*</span><span class="n">way</span> <span class="o">=</span><span class="k">new</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;</span><span class="p">[</span><span class="n">T</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">int</span> <span class="o">*</span><span class="n">n</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">[</span><span class="n">T</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">int</span> <span class="o">*</span><span class="n">m</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">[</span><span class="n">T</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">int</span> <span class="o">*</span><span class="n">k</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">[</span><span class="n">T</span><span class="p">];</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">T</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;&gt;</span> <span class="n">m</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;&gt;</span> <span class="n">k</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">[</span><span class="n">i</span><span class="p">];</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'>            <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">a</span> <span class="o">&gt;&gt;</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'>            <span class="n">way</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">push_back</span><span class="p">(</span><span class="n">make_pair</span><span class="p">(</span><span class="n">a</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">b</span><span class="o">-</span><span class="mi">1</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">T</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Case &quot;</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">solve</span><span class="p">(</span><span class="n">n</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">m</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">k</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">way</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>测试数据</h3>

<p>&#8220; bash
6
2 1 1
1 2
2 1 0
1 2
4 4 3
1 2 1 3 2 4 4 3
9 8 4
1 2 1 3 2 4 2 5 2 6 3 7 3 8 3 9
9 8 7
1 2 1 3 2 4 2 5 2 6 3 7 3 8 3 9
5 4 3
1 2 1 3 2 5 4 3</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">### 输出 ###</span>
</span></code></pre></td></tr></table></div></figure>


<p>Case 1: 1
Case 2: 0
Case 3: 1
Case 4: 1
Case 5: 2
Case 6: 1
&#8220;`</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[baidu-star算法题-du熊学斐波那契I]]></title>
    <link href="http://amyangfei.me/2012/12/31/baidustar-code-fibonacci/"/>
    <updated>2012-12-31T00:00:00+08:00</updated>
    <id>http://amyangfei.me/2012/12/31/baidustar-code-fibonacci</id>
    <content type="html"><![CDATA[<p>题目来源：<a href="http://astar.baidu.com/index.php?r=home/detail&id=2" target="_blank">百度之星-du熊学斐波那契I</a></p>

<p>题目其实很简单，如果不考虑时间和内存可以按照fibonacci的生成方式暴力进行下去。注意到每次增长只针对最后两位数字，所以每次增长的两位数字组合最多有100种：[0,0]~[9,9]，所以增长一定次数之后会出现一个内嵌的循环。</p>

<p>在oschina上看到一篇帖子，给出了两种很漂亮的python实现，<a href="http://www.oschina.net/code/snippet_103482_16641" target="_blank">原文</a>。下面来分析一下：</p>

<h3>实现一简洁版</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">f1</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'>    <span class="n">intDigits</span><span class="o">=</span><span class="k">lambda</span> <span class="n">n</span><span class="p">:</span> <span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">n</span><span class="p">))</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">reduce</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">:</span> <span class="n">x</span><span class="o">+</span><span class="n">intDigits</span><span class="p">(</span><span class="nb">sum</span><span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">:])),</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="p">),</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">])[</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">test</span><span class="o">=</span><span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">],[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">8</span><span class="p">],[</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">8</span><span class="p">]]</span>
</span><span class='line'><span class="k">print</span> <span class="p">[</span><span class="n">f1</span><span class="p">(</span><span class="o">*</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">test</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个版本就是暴力计算了，一直增长n-2次</p>

<!-- more -->


<h3>实现二高效版</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">partition</span><span class="o">=</span><span class="k">lambda</span> <span class="n">L</span><span class="p">:</span> <span class="p">[</span><span class="n">L</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">L</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)]</span>
</span><span class='line'><span class="n">intDigits</span><span class="o">=</span><span class="k">lambda</span> <span class="n">n</span><span class="p">:</span> <span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">n</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">f2</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'>    <span class="n">r</span><span class="o">=</span><span class="p">[</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">]</span>
</span><span class='line'>    <span class="k">while</span> <span class="n">r</span><span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">:]</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">partition</span><span class="p">(</span><span class="n">r</span><span class="p">[:</span><span class="o">-</span><span class="mi">2</span><span class="p">]):</span>
</span><span class='line'>        <span class="n">r</span><span class="o">=</span><span class="n">r</span><span class="o">+</span><span class="n">intDigits</span><span class="p">(</span><span class="n">r</span><span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span><span class="o">+</span><span class="n">r</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>    <span class="n">pos</span><span class="o">=</span> <span class="n">partition</span><span class="p">(</span><span class="n">r</span><span class="p">)</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">r</span><span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">:])</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">r</span><span class="p">[</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span> <span class="k">if</span> <span class="n">n</span><span class="o">&lt;</span><span class="n">pos</span> <span class="k">else</span> <span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="n">pos</span><span class="p">)</span><span class="o">%</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">r</span><span class="p">)</span><span class="o">-</span><span class="n">pos</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="n">pos</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">test</span><span class="o">=</span><span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">],[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">8</span><span class="p">],[</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">8</span><span class="p">],[</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">100</span><span class="p">],[</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">10</span><span class="o">**</span><span class="mi">8</span><span class="o">-</span><span class="mi">1</span><span class="p">],[</span><span class="mi">1</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">10</span><span class="o">**</span><span class="mi">8</span><span class="p">]]</span>
</span><span class='line'><span class="k">print</span> <span class="p">[</span><span class="n">f2</span><span class="p">(</span><span class="o">*</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">test</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种方法通过lambda表达式拆分每次增长后的序列，得到没两位组成的加法模式，出现循环后停止增长，可以很容易返回第n位的值。但是这种算法有一个bug，比如初始值[9, 1, 7]，那么增长出的序列应该是9110112……由于第一次出现的11并不是得到它们的增长过程中的最后两位，因而在出现了110的模式而不是112。</p>

<h3>我的实现</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">iniDigets</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">n</span><span class="p">:</span> <span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">n</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">fun</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'>    <span class="n">turplemap</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>    <span class="n">r</span> <span class="o">=</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">]</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">r</span><span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">],</span><span class="n">r</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">turplemap</span><span class="p">:</span>
</span><span class='line'>        <span class="n">turplemap</span><span class="p">[(</span><span class="n">r</span><span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">],</span><span class="n">r</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">])]</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">r</span><span class="p">)</span><span class="o">-</span><span class="mi">2</span>
</span><span class='line'>        <span class="n">r</span> <span class="o">+=</span> <span class="n">iniDigets</span><span class="p">(</span><span class="n">r</span><span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span> <span class="o">+</span> <span class="n">r</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>    <span class="n">pos</span> <span class="o">=</span> <span class="n">turplemap</span><span class="p">[(</span><span class="n">r</span><span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">],</span><span class="n">r</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">])]</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">r</span><span class="p">[</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span> <span class="k">if</span> <span class="n">n</span><span class="o">&lt;</span><span class="n">pos</span> <span class="k">else</span> <span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="n">pos</span><span class="p">)</span><span class="o">%</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">r</span><span class="p">)</span><span class="o">-</span><span class="mi">2</span><span class="o">-</span><span class="n">pos</span><span class="p">)</span> <span class="o">+</span> <span class="n">pos</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">test</span><span class="o">=</span><span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">8</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">8</span><span class="p">],</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">100</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">10</span><span class="o">**</span><span class="mi">8</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">10</span><span class="o">**</span><span class="mi">8</span><span class="p">],</span> <span class="p">[</span><span class="mi">9</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">7</span><span class="p">]]</span>
</span><span class='line'><span class="k">print</span> <span class="p">[</span><span class="n">fun</span><span class="p">(</span><span class="o">*</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">test</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>参考实现二的方法，我利用一个字典记录每次增长后序列<strong><em>最后两位</em></strong>的位置，每次在字典中查找是否已出现模式循环。</p>

<h3>c++实现</h3>

<p>最后附上一个C++版，思路和上面的实现三一致。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sstream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;map&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">func</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">stringstream</span> <span class="n">ss</span><span class="p">;</span>
</span><span class='line'>    <span class="n">string</span> <span class="n">res</span><span class="p">;</span>
</span><span class='line'>    <span class="n">ss</span> <span class="o">&lt;&lt;</span> <span class="n">a</span> <span class="o">&lt;&lt;</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'>    <span class="n">ss</span> <span class="o">&gt;&gt;</span> <span class="n">res</span><span class="p">;</span>
</span><span class='line'>    <span class="n">map</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">char</span><span class="p">,</span> <span class="kt">char</span><span class="o">&gt;</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">tuplemap</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">res</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>
</span><span class='line'>        <span class="n">map</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">char</span><span class="p">,</span> <span class="kt">char</span><span class="o">&gt;</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;::</span><span class="n">iterator</span> <span class="n">miter</span> <span class="o">=</span> <span class="n">tuplemap</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">make_pair</span><span class="p">(</span><span class="n">res</span><span class="p">[</span><span class="n">len</span><span class="o">-</span><span class="mi">2</span><span class="p">],</span> <span class="n">res</span><span class="p">[</span><span class="n">len</span><span class="o">-</span><span class="mi">1</span><span class="p">]));</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">miter</span> <span class="o">!=</span> <span class="n">tuplemap</span><span class="p">.</span><span class="n">end</span><span class="p">())</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="n">tuplemap</span><span class="p">[</span><span class="n">make_pair</span><span class="p">(</span><span class="n">res</span><span class="p">[</span><span class="n">len</span><span class="o">-</span><span class="mi">2</span><span class="p">],</span> <span class="n">res</span><span class="p">[</span><span class="n">len</span><span class="o">-</span><span class="mi">1</span><span class="p">])]</span> <span class="o">=</span> <span class="n">len</span><span class="o">-</span><span class="mi">2</span><span class="p">;</span>
</span><span class='line'>        <span class="n">ss</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
</span><span class='line'>        <span class="n">ss</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">res</span><span class="p">[</span><span class="n">len</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span><span class="o">-</span><span class="sc">&#39;0&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="n">res</span><span class="p">[</span><span class="n">len</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="sc">&#39;0&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">string</span> <span class="n">temp</span><span class="p">;</span>
</span><span class='line'>        <span class="n">ss</span> <span class="o">&gt;&gt;</span> <span class="n">temp</span><span class="p">;</span>
</span><span class='line'>        <span class="n">res</span> <span class="o">+=</span> <span class="n">temp</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="n">tuplemap</span><span class="p">[</span><span class="n">make_pair</span><span class="p">(</span><span class="n">res</span><span class="p">[</span><span class="n">res</span><span class="p">.</span><span class="n">length</span><span class="p">()</span><span class="o">-</span><span class="mi">2</span><span class="p">],</span> <span class="n">res</span><span class="p">[</span><span class="n">res</span><span class="p">.</span><span class="n">length</span><span class="p">()</span><span class="o">-</span><span class="mi">1</span><span class="p">])];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">&lt;</span> <span class="n">pos</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">res</span><span class="p">[</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="sc">&#39;0&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">res</span><span class="p">[(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="n">pos</span><span class="p">)</span><span class="o">%</span><span class="p">(</span><span class="n">res</span><span class="p">.</span><span class="n">length</span><span class="p">()</span><span class="o">-</span><span class="mi">2</span><span class="o">-</span><span class="n">pos</span><span class="p">)</span><span class="o">+</span><span class="n">pos</span><span class="p">]</span> <span class="o">-</span> <span class="sc">&#39;0&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">test</span><span class="p">[][</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">},{</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">8</span><span class="p">},{</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">8</span><span class="p">},{</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">100</span><span class="p">},{</span><span class="mi">9</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">7</span><span class="p">}</span> <span class="p">};</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">test</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">[</span><span class="mi">3</span><span class="p">]);</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">func</span><span class="p">(</span><span class="n">test</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span> <span class="n">test</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">],</span> <span class="n">test</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">2</span><span class="p">])</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[how to build this blog]]></title>
    <link href="http://amyangfei.me/2012/12/30/how-to-build-this-blog/"/>
    <updated>2012-12-30T00:00:00+08:00</updated>
    <id>http://amyangfei.me/2012/12/30/how-to-build-this-blog</id>
    <content type="html"><![CDATA[<p>系统环境Mac OS X 10.8.2，这个博客主要通过jekyll生成静态页面，使用ruby提供的一些扩展插件，比如按月份进行归档等，配置环境的过程如下。</p>

<p>安装ruby，rubygems</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo port ruby
</span><span class='line'>sudo port install rb-rubygems
</span><span class='line'>sudo gem install rubygems-update
</span><span class='line'>sudo gem update --system
</span></code></pre></td></tr></table></div></figure>


<p>安装bundle</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo gem install bundler
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>安装jeklly，rdiscount（支持markdown语法，<a href="https://github.com/rtomayko/rdiscount" target="_blank">rdiscount github</a>），liquid（支持jekyll模板渲染，<a href="https://github.com/mojombo/jekyll/wiki/liquid-extensions" target="_blank">Liquid Extensions</a>）。可以写到一个Gemfile文件中然后 bundle install。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bundle install
</span></code></pre></td></tr></table></div></figure>


<p>Gemfile文件内容</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">source</span> <span class="s2">&quot;http://rubygems.org&quot;</span>
</span><span class='line'>
</span><span class='line'>gem <span class="s2">&quot;jekyll&quot;</span>, <span class="s2">&quot;0.10.0&quot;</span>
</span><span class='line'>gem <span class="s2">&quot;jekyll_ext&quot;</span>
</span><span class='line'>gem <span class="s2">&quot;liquid&quot;</span>, <span class="s2">&quot;2.2.2&quot;</span>
</span><span class='line'>gem <span class="s2">&quot;rdiscount&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>关于jekyll的一些扩展插件，可以参考 <a href="https://github.com/mojombo/jekyll/wiki/Plugins" target="_blank">jekyll plugins</a> 和 <a href="https://github.com/rfelix/my_jekyll_extensions" target="_blank">rfelix&rsquo;s jelyll extensions</a> 。</p>

<p>生成静态页面，运行服务器</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bundle <span class="nb">exec </span>ejekyll --server
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[随机排序算法简介]]></title>
    <link href="http://amyangfei.me/2012/11/29/shuffle-algorithm/"/>
    <updated>2012-11-29T00:00:00+08:00</updated>
    <id>http://amyangfei.me/2012/11/29/shuffle-algorithm</id>
    <content type="html"><![CDATA[<p>前几天看了酷壳上的一篇文章<a href="http://coolshell.cn/articles/8593.html" target="_blank">如何测试洗牌程序</a>，之后仔细看了Wikipedia对<a href="http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle" target="_blank">Fisher–Yates shuffle</a>算法的介绍，这里简单的总结一下，基本是翻译Wikipedia。</p>

<h2>Fisher and Yates&#8217; original method</h2>

<p>该算法最初是1938年由Ronald A. Fisher和Frank Yates在《Statistical tables for biological, agricultural and medical research》一书中描述，算法生成1-N个数的随机排列的过程如下：</p>

<ol>
<li>原始数组中有数字1到N</li>
<li>设原始数组未被标记的数字个数为k，生成一个1到k之间的随机数</li>
<li>取出原始数组未被标记数字中的第k个，将其标记并插入到新的排列数组尾端。</li>
<li>重复过程2直到原始数组中没有未被标记的数字</li>
<li>过程3中生成的新数组就是一个对原始数组的随机排列</li>
</ol>


<p>该算法可以理解为已知有n个元素，先从n个元素中任选一个，放入新空间的第一个位置，然后再从剩下的n-1个元素中任选一个，放入第二个位置，依此类推。算法在过程3查找未被标记的第k个数字有很多重复操作，导致算法效率并不高，总的时间复杂度为O(N<sup>2</sup> )，空间复杂度为O(N)。算法的python实现如下所示：</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">random</span> <span class="kn">import</span> <span class="n">random</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">FisherYateOldShullfe</span><span class="p">(</span><span class="n">items</span><span class="p">):</span>
</span><span class='line'>  <span class="n">ret</span> <span class="o">=</span> <span class="p">[</span><span class="bp">None</span><span class="p">]</span> <span class="o">*</span> <span class="nb">len</span><span class="p">(</span><span class="n">items</span><span class="p">)</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">reversed</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">items</span><span class="p">))):</span>
</span><span class='line'>      <span class="n">j</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">random</span><span class="p">()</span> <span class="o">*</span> <span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'>      <span class="n">ret</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">items</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
</span><span class='line'>      <span class="k">del</span> <span class="n">items</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">ret</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>  <span class="n">srclist</span> <span class="o">=</span> <span class="p">[</span><span class="n">n</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">)]</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">FisherYateOldShullfe</span><span class="p">(</span><span class="n">srclist</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Modern version of the Fisher–Yates shuffle</h2>

<p>改进版的Fisher–Yates shuffle算法是1964年Richard Durstenfeld在 Communications of the ACM volume 7, issue 7中首次提出，相比于原始Fisher-Yates shuffle最大的改进是不需要在步骤3中重复的数未被标记的数字，该算法不再将标记过的数字移动到一个新数组的尾端，而是将随机数选出的数字与排在最后位置的未标记数字进行交换。算法在python下的实现如下所示：</p>

<div>
  <pre><code class='python'>from random import random

def FisherYatesShuffle(items):
    for i in reversed(range(1, len(items))):
        j = int(random() * (i+1))
        items[i], items[j] = items[j], items[i]

if __name__ == &#39;__main__&#39;:
    srclist = [n for n in range(10)]
    FisherYatesShuffle(srclist)
    print srclist</code></pre>
</div>


<p>该算法同样可以理解成为这样的过程：从1到n个数字中依次随机抽取一个数字，并放到一个新序列的尾端（该算法通过互换数字实现），逐渐形成一个新的序列。计算一下概率：如果某个元素被放入第i（1≤i≤n）个位置，就必须是在前 i-1 次选取中都没有选到它，并且第 i 次恰好选中它。其概率为：</p>

<p><img src="http://amyangfei.me/images/post/20121129probability.png" style=""/></p>

<p>算法中只有一个从1到N-1的循环，循环内操作为常数步，因而算法总的时间复杂度为O(N)，空间复杂度为O(1)。</p>

<h2>Inside-out algorithm</h2>

<p>Fisher-Yates shuffle是一种在原地交换的生成过程，即给定一个序列，算法在这个序列本身的存储空间进行操作。与这种in-place的方式不同，inside-out针对给定序列，会生成该序列随机排列的一个副本。这种方法有利于对长度较大的序列进行随机排列。 Inside-out算法的基本思想是从前向后扫描，依次增加i，每一步操作中将新数组位置i的数字更新为原始数组位置i的数字，然后在新数组中将位置i和随机选出的位置j（0≤j≤i）交换数字。算法亦可以理解为现将原始数组完全复制到新数组，然后新数组位置i(i from 1 to n-1)依次和随机位置j交换数字。算法的python实现如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">random</span> <span class="kn">import</span> <span class="n">random</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">insideout</span><span class="p">(</span><span class="n">source</span><span class="p">):</span>
</span><span class='line'>    <span class="n">ret</span> <span class="o">=</span> <span class="p">[</span><span class="bp">None</span><span class="p">]</span> <span class="o">*</span> <span class="nb">len</span><span class="p">(</span><span class="n">source</span><span class="p">)</span>
</span><span class='line'>    <span class="n">ret</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">source</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">source</span><span class="p">)):</span>
</span><span class='line'>        <span class="n">j</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">random</span><span class="p">()</span> <span class="o">*</span> <span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'>        <span class="n">ret</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">ret</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
</span><span class='line'>        <span class="n">ret</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">source</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">ret</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>  <span class="n">srclist</span> <span class="o">=</span> <span class="p">[</span><span class="n">n</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">)]</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">insideout</span><span class="p">(</span><span class="n">srclist</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>对于这个算法，我们分析可以出现多少种不同的排列数，从$i=1$开始，每一次交换都可以衍生出$(i+1)$倍的排列数，因而总的排列方案数如下图。在随机函数完全随机的情况下每一种排列都是等概率出现的，因而这种算法得到的是一个随机排序。它的时间复杂度和空间复杂度都是O(N)。</p>

<p><img src="http://amyangfei.me/images/post/20121129sum.png" style=""/></p>

<p>该算法有一个优点就是可以通过不断读取原始数组的下一个元素同时使新的排列数组长度加一，进而生成一个随机排列，即可以对长度未知的序列进行随机排列。实现的伪代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">while</span> <span class="n">source</span><span class="p">.</span><span class="n">moreDataAvailable</span>
</span><span class='line'>      <span class="n">j</span> <span class="o">&lt;-</span> <span class="n">random</span> <span class="n">integer</span> <span class="n">with</span> <span class="mi">0</span> <span class="o">&lt;=</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">a</span><span class="p">.</span><span class="n">length</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">j</span> <span class="o">=</span> <span class="n">a</span><span class="p">.</span><span class="n">length</span>
</span><span class='line'>          <span class="n">a</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">source</span><span class="p">.</span><span class="n">next</span><span class="p">)</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>          <span class="n">a</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
</span><span class='line'>          <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&lt;-</span> <span class="n">source</span><span class="p">.</span><span class="n">next</span>
</span></code></pre></td></tr></table></div></figure>


<h2>另一种想法</h2>

<p>对n个元素的随机排序对应于这n个元素全排列中的一种，所以有这样一种方法求随机排序：求n个元素的随机排列，给定一个随机数k（1≤k≤n!），取出n!个全排列中的第k个即是一种随机排序。于是需要解决2个问题：一是在一个足够大的范围内求随机数；另外是实现一种是在n!个全排列中求第k个全排列的方法。第一个问题很古老，有人说随机数的最大范围决定于随即种子的大小，我有一种想法是对分段求随机数，比如需要求最大范围为N的随机数，那么可以对N进行M进制分解，分别求M进制下的每一位的随机数，最后合成一个大的随机数；而第二个问题就比较容易了，有很多全排列生成算法，通过“原排列”->“原中介数”->“新中介数”->“新排列”的过程，可以很方便的求出第k个全排列。</p>

<h2>参考文章</h2>

<p><a href="http://blog.csdn.net/huagong_adu/article/details/7621603" target="_blank">洗牌程序</a>，<a href="http://www.gocalf.com/blog/shuffle-algo.html" target="_blank">等概率随机排列数组（洗牌算法）</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[配置安全ssh的几个方法]]></title>
    <link href="http://amyangfei.me/2012/11/12/secure-tips-for-ssh/"/>
    <updated>2012-11-12T00:00:00+08:00</updated>
    <id>http://amyangfei.me/2012/11/12/secure-tips-for-ssh</id>
    <content type="html"><![CDATA[<p>最近一直通过ssh连接到机房的电脑，昨天把ssh端口改回了默认的22，结果今天早上收到Logwatch的报告时发现来自3个不同ip的100多条登陆失败的记录，于是总结一些配置安全ssh的方法。本文实验环境为unbutu12.10。</p>

<h3>SSH服务配置，合理配置/etc/ssh/sshd_config文件</h3>

<ul>
<li>1.修改默认端口：ssh默认登录端口为22，修改后可以增加入侵者探测系统是否运行有sshd守护进程的难度。如：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Port 4312
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>2.限定监听ip：通常如果配置ListenAddress 0.0.0.0，那么任意ip都可以通过ssh访问。如果指定了ListenAddress为特定IP，那么仅有这些限定的IP可以访问。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ListenAddress 192.168.1.100
</span><span class='line'>ListenAddress 192.168.1.101
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<ul>
<li>3.禁止root登录</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>PermitRootLogin no
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>4.禁止/允许特定用户和用户组登录:
以下分别对应禁止用户登录、禁止用户组登录、允许用户登录、允许用户组登录。处理顺序是：DenyUsers, AllowUsers, DenyGroups, AllowGroups。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>DenyUsers apache jame
</span><span class='line'>DenyGroups developers qa
</span><span class='line'>AllowUsers apple pear
</span><span class='line'>AllowGroups sysadmin dba
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>5.设置超时断开:可以通过修改ClientAliveInterval和ClientAliveCountMax参数断开一定时间内没有活动的连接用户。ClientAliveCountMax参数表示ssh-server向client发送活动检测的次数，例如ClientAliveInterval=150，ClientAliveCountMax=3，那么大约在450s后会断开没有响应的连接。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ClientAliveInterval 150
</span><span class='line'>ClientAliveCountMax 3
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>6.限制密码尝试次数</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>MaxAuthTries 10
</span></code></pre></td></tr></table></div></figure>


<h3>配置hosts.allow和hosts.deny文件</h3>

<p>/etc/hosts.allow控制可以访问本机的IP地址，/etc/hosts.deny控制禁止访问本机的IP。如果两个文件的配置有冲突，/etc/hosts.allow优先级较高，即同时出现在.allow和.deny中的IP是可以访问本机的。比如限定禁止访问的IP直接加到/etc/hosts.deny文件中即可</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sshd:119.196.231.193
</span><span class='line'>sshd:125.136.130.18
</span><span class='line'>sshd:94.103.147.75
</span></code></pre></td></tr></table></div></figure>


<p>在网上看到了一种比较好的方法，就是每天利用crontab任务分析系统登录日志，将登陆失败次数达到一定范围的IP加入/etc/hosts.deny文件来拒绝这个IP登录。原文地址-><a href="http://www.pyshell.com/index.php/archives/225" target="_blank"> 利用shell拒绝ssh暴力破解 </a>实现脚本如下，注意，只修改hosts.allow和hosts.deny文件不需要重启networking服务。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nv">blackip</span><span class="o">=</span><span class="s1">&#39;/var/myscript/blackip.txt&#39;</span>
</span><span class='line'>cat /var/log/auth.log | awk <span class="s1">&#39;/Failed/{print $(NF-3)}&#39;</span> | sort | uniq -c | awk <span class="s1">&#39;{if ($1 &gt;= 9) {print $2&quot;=&quot;$1}}&#39;</span> &gt; <span class="nv">$blackip</span>
</span><span class='line'><span class="k">for </span>i in <span class="k">$(</span>cat <span class="nv">$blackip</span><span class="k">)</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="nv">ip</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span> <span class="nv">$i</span> | awk -F<span class="o">=</span> <span class="s1">&#39;{print $1}&#39;</span><span class="k">)</span>
</span><span class='line'>    grep <span class="nv">$ip</span> /etc/hosts.deny
</span><span class='line'>    <span class="k">if</span> <span class="o">[</span> <span class="nv">$?</span> -gt 0 <span class="o">]</span>;
</span><span class='line'>    <span class="k">then</span>
</span><span class='line'><span class="k">        </span><span class="nb">echo</span> <span class="s2">&quot;sshd:$ip&quot;</span> &gt;&gt; /etc/hosts.deny
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>

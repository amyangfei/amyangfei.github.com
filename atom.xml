<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Amyangfei&#39;s Blog</title>
  
  <subtitle>Enjoy Programming</subtitle>
  <link href="http://amyangfei.me/atom.xml" rel="self"/>
  
  <link href="http://amyangfei.me/"/>
  <updated>2020-12-13T07:06:58.025Z</updated>
  <id>http://amyangfei.me/</id>
  
  <author>
    <name>amyangfei</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用 Go 编写 Redis Loadable Modules</title>
    <link href="http://amyangfei.me/2016/08/03/redis-module-with-cgo/"/>
    <id>http://amyangfei.me/2016/08/03/redis-module-with-cgo/</id>
    <published>2016-08-03T00:00:00.000Z</published>
    <updated>2020-12-13T07:06:58.025Z</updated>
    
    <content type="html"><![CDATA[<p>本文会介绍如何使用 go 编写 redis loadable modules，并分析编写模块和使用cgo可能遇到的坑。</p><h2 id="什么是redis-loadable-modules"><a href="#什么是redis-loadable-modules" class="headerlink" title="什么是redis loadable modules"></a>什么是redis loadable modules</h2><p>可加载模块是redis最新加入的功能，目前需要在<code>unstable</code>分支才可以使用。简单说模块系统是redis的C代码暴露出一些API，定义在头文件<a href="https://github.com/antirez/redis/blob/unstable/src/redismodule.h">redismodule.h</a>中，外部模块引用该头文件即可访问所有的API函数，这些API提供了包括访问redis的字典空间、调用redis命令、向客户端返回数据等诸多功能。外部模块是以动态库的形式被redis server加载并使用，可以在redis server启动时加载，也可以在启动后动态加载。更多的细节可以参考文档<a href="https://github.com/antirez/redis/blob/unstable/src/modules/INTRO.md">redis module INTRO</a>。</p><p>在此之前想对redis扩展有两种方案：一是利用lua脚本；另一种则需要修改redis源码，类似于<a href="https://github.com/mattsta/krmt">Kit of Redis Module Tools</a>提供的方案。lua脚本的扩展性有限，并且lua是通过redis的上层API来调用redis命令的，无法直接访问底层的存储数据，调用redis更底层的API；修改源码的方案就更加hack，是没有办法不断与上游分支合并的。</p><a id="more"></a><p>显然心的模块系统明显优于以上两种方案，优点包括：</p><ul><li>直接访问redis存储的各种数据结构；</li><li>直接对存储数据的内存进行操作；</li><li>模块仅依赖<code>redismodule.h</code>暴露的接口函数，而不依赖redis本身的实现，因此可以兼容redis的版本升级。</li></ul><p>模块系统也有缺点，比如模块中的代码bug引发的异常会直接导致redis server crash掉；模块的问题譬如引入的内存泄漏，代码执行阻塞都会影响redis服务的正常运行。这些缺点不是模块系统本身的问题，而是这种扩展的灵活性和系统稳定性的权衡，是可以通过优质的扩展模块来避免的。</p><p>使用C来编写redis扩展模块很简单，参考文档<a href="https://github.com/antirez/redis/blob/unstable/src/modules/INTRO.md">redis module INTRO</a>，你可以在5分钟内学会编写一个redis扩展模块。Redis Lab官方也提供了很多有趣的模块 <a href="http://redismodules.com/">Module Hub</a>。在文档中同样提到可以用其它语言来编写redis扩展模块。</p><blockquote><p>it will be possible to use C++ or other languages that have C binding functionalities.</p></blockquote><p>go语言的<a href="https://golang.org/cmd/cgo/">cgo</a>提供了Go和C互相调用的支持，因此本文来尝试通过go语言编写redis的扩展模块。下文所有的代码都可以在<a href="https://github.com/amyangfei/RedisModules-Go">RedisModules-Go</a>这个仓库找到，仓库里还提供了redis module lab的两个模块<a href="http://redismodules.com/modules/password/">password</a>，<a href="http://redismodules.com/modules/graphicsmagick-2/">graphicsmagick</a>的go版本，以及一些简单的benchmark。</p><p>redis扩展模块的形式是很固定的，需要编写且只编写两个部分：注册命令的函数和具体实现命令的函数。我们分两个阶段来编写redis的go扩展模块：第一阶段是通过go编写逻辑代码，即go代码拿到数据、处理、返回处理结果；第二阶段是go代码直接访问redismodule.h提供的API获取数据、处理、返回。先看看第一种类型。</p><h2 id="通过go编写逻辑处理"><a href="#通过go编写逻辑处理" class="headerlink" title="通过go编写逻辑处理"></a>通过go编写逻辑处理</h2><p>基本思路是使用go编写逻辑处理，go的函数接收的输入是C的数据类型，可以是指向C内存空间的指针；在C代码中调用由go编写的逻辑处理函数，具体的调用方式是go代码编译时指定<code>buildmode=c-shared</code>得到动态库和相关头文件，在C代码中引用头文件并调用。最简单的实现代码如下所示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ECHO1 &lt;string&gt; - Echo back a string sent from the client */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Echo1Command</span><span class="params">(RedisModuleCtx *ctx, RedisModuleString **argv, <span class="keyword">int</span> argc)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (argc &lt; <span class="number">2</span>) <span class="keyword">return</span> RedisModule_WrongArity(ctx);</span><br><span class="line">    RedisModule_AutoMemory(ctx);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">size_t</span> len;</span><br><span class="line">    <span class="keyword">char</span> *dst = RedisModule_Strdup(RedisModule_StringPtrLen(argv[<span class="number">1</span>], &amp;len));</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">GoEcho1_return</span> <span class="title">r</span> =</span> GoEcho1(dst);</span><br><span class="line">    RedisModuleString *rm_str = RedisModule_CreateString(ctx, r.r0, r.r1);</span><br><span class="line">    <span class="built_in">free</span>(r.r0);</span><br><span class="line">    RedisModule_Free(dst);</span><br><span class="line"></span><br><span class="line">    RedisModule_ReplyWithString(ctx, rm_str);</span><br><span class="line">    <span class="keyword">return</span> REDISMODULE_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">// #include &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;C&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//export GoEcho1</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GoEcho1</span><span class="params">(s *C.char)</span> <span class="params">(*C.char, <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    gostr := (C.GoString(s) + <span class="string">&quot; from golang1&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> C.CString(gostr), <span class="built_in">len</span>(gostr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>具体实现中涉及到申请的内存空间是在C的运行环境还是go的运行环境，因为go的运行时提供了gc，而C则需要手动管理内存，因此这其中有很多细节需要注意；同时go和C之间可以传递的数据也有一些限制，后文会详细叙述。</p><h2 id="通过go调用redismodule-h定义的API"><a href="#通过go调用redismodule-h定义的API" class="headerlink" title="通过go调用redismodule.h定义的API"></a>通过go调用redismodule.h定义的API</h2><p>第一步中所做的是提供数据给go代码进行逻辑处理并返回数据，那么如果希望在go代码中也可以调用redismodule.h定义的API，又需要如何处理？</p><p>直观的想通过go调用C代码，在go中直接<code>#include &quot;redismodule.h&quot;</code>就可以了嘛，于是我们编写如下的go代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">// #include &quot;redismodule.h&quot;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">typedef RedisModuleString *(*redis_func) (RedisModuleCtx *ctx, char *ptr, size_t len);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">inline RedisModuleString *redis_bridge_func(redis_func f, RedisModuleCtx *ctx, char *ptr, size_t len)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    return f(ctx, ptr, len);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;C&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//export GoEcho</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GoEcho</span><span class="params">(ctx *C.RedisModuleCtx, s *C.char)</span> *<span class="title">C</span>.<span class="title">RedisModuleString</span></span> &#123;</span><br><span class="line">    gostr := (C.GoString(s) + <span class="string">&quot; from golang&quot;</span>)</span><br><span class="line">    f := C.redis_func(C.RedisModule_CreateString)</span><br><span class="line">    <span class="keyword">return</span> C.redis_bridge_func(f, ctx, C.CString(gostr), C.size_t(<span class="built_in">len</span>(gostr)))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;&#125;</span><br></pre></td></tr></table></figure><p><code>redismodule.h</code>定义的API函数都是函数指针，由于go不支持直接调用C的函数指针，所以通过通过go的变量保存C的函数指针，并将该变量作为参数调用C的<code>bridge_function</code>，在<code>bridge_function</code>中调用目标函数指针。编译是可以通过的，但实际运行就会crash。通过调试很容易发现<code>C.RedisModule_CreateString</code>的值是<code>nil</code>，它没有指向正确的函数地址。那换一种方式使用一个C的函数来调用<code>RedisModule_CreateString</code>呢？</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#include &quot;redismodule.h&quot;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">inline RedisModuleString *RedisModule_CreateString_Wrap(RedisModuleCtx *ctx, char *ptr, size_t len) &#123;</span></span><br><span class="line"><span class="comment">    void *getapifuncptr = ((void**)ctx)[0];</span></span><br><span class="line"><span class="comment">    RedisModule_GetApi = (int (*)(const char *, void *)) (unsigned long)getapifuncptr;</span></span><br><span class="line"><span class="comment">    RedisModule_GetApi(&quot;RedisModule_CreateString&quot;, (void **)&amp;RedisModule_CreateString);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    RedisModuleString *rms = RedisModule_CreateString(ctx, ptr, len);</span></span><br><span class="line"><span class="comment">    return rms;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;C&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//export GoEcho</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GoEcho</span><span class="params">(ctx *C.RedisModuleCtx, s *C.char)</span> *<span class="title">C</span>.<span class="title">RedisModuleString</span></span> &#123;</span><br><span class="line">        gostr := (C.GoString(s) + <span class="string">&quot; from golang version bridge&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> C.RedisModule_CreateString_Wrap(ctx, C.CString(gostr), C.size_t(<span class="built_in">len</span>(gostr)))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>实际运行时依然会在调用<code>RedisModule_CreateString</code>函数时crash掉，跟进gdb调试可以看到该函数指针并没有指向正确的内存地址。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(gdb) l</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span>       <span class="comment">/*</span></span><br><span class="line"><span class="comment">4       #include &quot;redismodule.h&quot;</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">6       inline RedisModuleString *RedisModule_CreateString_Wrap(RedisModuleCtx *ctx, char *ptr, size_t len) &#123;</span></span><br><span class="line"><span class="comment">7           RedisModuleString *rms = RedisModule_CreateString(ctx, ptr, len);</span></span><br><span class="line"><span class="comment">8           return rms;</span></span><br><span class="line"><span class="comment">9       &#125;</span></span><br><span class="line"><span class="comment">10      */</span></span><br><span class="line"><span class="number">11</span>      <span class="keyword">import</span> <span class="string">&quot;C&quot;</span></span><br><span class="line">(gdb) p RedisModule_CreateString</span><br><span class="line">$<span class="number">1</span> = (RedisModuleString *(*)(RedisModuleCtx *, <span class="keyword">const</span> <span class="keyword">char</span> *, <span class="keyword">size_t</span>)) <span class="number">0x0</span></span><br></pre></td></tr></table></figure><p>那么<code>redismodule.h</code>对外提供的函数指针是在何时指向实际的函数内存地址呢？从<code>redismodule.h</code>文件本身就会得到答案：加载一个外部模块都需要调用<code>RedisModule_Init</code>函数，在这个函数中会通过<code>RedisModuleCtx *ctx</code>变量定位到在redis代码<code>module.c</code>内提供的实际API函数，然后将函数指针指向真正的函数地址。由于在上述的go模块中，没有调用<code>RedisModule_Init</code>，<code>RedisModule_CreateString</code>自然指向的是非法的内存地址。所以简单改动一下代码，主动注册一下函数指针的地址即可在go的模块中调用<code>redismodule.h</code>提供的API。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#include &quot;redismodule.h&quot;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">inline RedisModuleString *RedisModule_CreateString_Wrap(RedisModuleCtx *ctx, char *ptr, size_t len) &#123;</span></span><br><span class="line"><span class="comment">    void *getapifuncptr = ((void**)ctx)[0];</span></span><br><span class="line"><span class="comment">    RedisModule_GetApi = (int (*)(const char *, void *)) (unsigned long)getapifuncptr;</span></span><br><span class="line"><span class="comment">    RedisModule_GetApi(&quot;RedisModule_CreateString&quot;, (void **)&amp;RedisModule_CreateString);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    RedisModuleString *rms = RedisModule_CreateString(ctx, ptr, len);</span></span><br><span class="line"><span class="comment">    return rms;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;C&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//export GoEcho</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GoEcho</span><span class="params">(ctx *C.RedisModuleCtx, s *C.char)</span> *<span class="title">C</span>.<span class="title">RedisModuleString</span></span> &#123;</span><br><span class="line">        gostr := (C.GoString(s) + <span class="string">&quot; from golang version bridge&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> C.RedisModule_CreateString_Wrap(ctx, C.CString(gostr), C.size_t(<span class="built_in">len</span>(gostr)))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="一些细节"><a href="#一些细节" class="headerlink" title="一些细节"></a>一些细节</h2><p>编写模块的过程中关于内存使用发现不少有趣的地方。</p><h3 id="1-Go和C之间传递指针的规则和限制"><a href="#1-Go和C之间传递指针的规则和限制" class="headerlink" title="1. Go和C之间传递指针的规则和限制"></a>1. Go和C之间传递指针的规则和限制</h3><p>在<a href="https://github.com/amyangfei/RedisModules-Go/blob/master/example/basic/go1dot5/hello_module.go">go1.5/hello_module.go</a>这个文件中可以看到export给C的go函数的返回值很多返回了go的指针，在C代码中调用go函数之后可以直接访问go的内存，这在go1.5是支持的，但是从go1.6之后加入了Go和C之间传递指针的限制，明确指出：</p><blockquote><p>A Go function called by C code may not return a Go pointer.</p></blockquote><p>go1.6对go和C的互相调用进行了大量的规范，有编译层面的也有在运行时的检查，详细可以参考<a href="https://github.com/golang/proposal/blob/master/design/12416-cgo-pointers.md">12416-cgo-pointers</a>。规范的出发点有两点：一是更便于go的内存管理，总所周知go提供了gc，所以有一些破坏了gc规则的使用需要禁止；二是尽可能减少程序运行时内存访问出现的未知错误。</p><p>那么回到我们的redis go模块，如果不能从go函数返回go指针给C代码使用，那么从go如何返回数据给C代码呢？目前有两种，一是返回完整的C数据，二是返回C的指针。以hello.echo模块为例，对应的两种返回形式分别是：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GoEcho1</span><span class="params">(s *C.char)</span> <span class="params">(*C.char, <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    gostr := (C.GoString(s) + <span class="string">&quot; from golang1&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> C.CString(gostr), <span class="built_in">len</span>(gostr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GoEcho6</span><span class="params">(s *C.char, length, capacity C.<span class="keyword">int</span>)</span> <span class="params">(unsafe.Pointer, <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    incr := <span class="string">&quot; from golang6&quot;</span></span><br><span class="line">    zslice := cgoutils.ZeroCopySlice(unsafe.Pointer(s), <span class="keyword">int</span>(capacity), <span class="keyword">int</span>(capacity), <span class="literal">false</span>)</span><br><span class="line">    <span class="built_in">copy</span>(zslice.Data[<span class="keyword">int</span>(length):], incr)</span><br><span class="line">    <span class="keyword">return</span> unsafe.Pointer(&amp;zslice.Data[<span class="number">0</span>]), <span class="keyword">int</span>(length) + <span class="built_in">len</span>(incr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>echo1就是直接通过<code>C.String</code>生成C的<code>char *</code>并进行一次内存复制，将<code>gostr</code>的内容复制到C的内存空间。echo6的例子则是现将从C代码传来的内存地址直接映射到go的slice（这里在C代码已经为待处理的数据申请了足够多的内存空间），然后直接在go中直接操作这部分内存，最后返回这部分内存的C指针。显然，echo6比echo1减少了<code>gostr</code>的一次内存复制。使用较大的echo string进行benchmark可以很明显看到echo6比echo1更快。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Benchmark_Echo1     2000            815435 ns/op</span><br><span class="line">Benchmark_Echo6     2000            575206 ns/op</span><br></pre></td></tr></table></figure><h3 id="2-内存管理"><a href="#2-内存管理" class="headerlink" title="2. 内存管理"></a>2. 内存管理</h3><p>在使用cgo时一定需要区分变量是在go的内存空间还是在C的内存空间，尤其注意在go代码中申请的C的数据一定需要手动释放内存，因为go的gc并不会回收这部分内存。所以譬如通过<code>C.Cstring()</code>生成的数据、通过<code>C.malloc()</code>申请的内存在使用后都需要手动回收。</p><h3 id="3-Go直接映射C的内存空间"><a href="#3-Go直接映射C的内存空间" class="headerlink" title="3. Go直接映射C的内存空间"></a>3. Go直接映射C的内存空间</h3><p>在go代码中C的数据类型会映射成为C.x，可以直接访问C数据类型的变量，但是如果想要对变量进行go代码的逻辑操作，就必须先转换成为go的数据类型，譬如希望对一个C的<code>char *</code>进行处理，需要现转换成为go的<code>slice</code>。转换有两种方法：一是直接调用<code>C.GoBytes</code>方法，另一种是利用反射构造<code>slice</code>，具体的使用方法参考<a href="https://github.com/amyangfei/RedisModules-Go/blob/master/cgoutils/sharemem.go">sharemem.go</a>。使用<code>C.GoBytes</code>会将C数据结构的内存复制到go的内存空间。而第二种方法则是直接映射，没有内存复制。</p><p>在直接映射C内存的使用场景下，对go对象slice的一些操作可以直接作用于C的内存空间，譬如在echo6中使用<code>copy(zslice.Data[int(length):], incr)</code>。这里就需要注意，如果一开始C申请的内存空间不足，但是强制增大go中slice的capacity，然后进行copy操作，结果会发现程序运行中会crash掉。这种用法的问题在于不能区分slice增加的capacity内存是位于C代码还是go代码的运行环境；如果不是copy而是使用slice的append操作，由于capacity不足go的slice会重新申请内存空间，那么对应的内存都位于go的运行环境，与原来C运行环境中的数据就没有关系了。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>后续还会对比使用go和C编写同样的扩展模块在性能方面会有怎样的差距，这里就不再继续讨论。redis计划会在4.0版本中合并模块系统的功能，这还是很值得期待的。使用cgo来完成go和C的交互也十分常见，go标准库本身就有很多地方使用到了cgo来使用C的代码，本文编写的<a href="https://github.com/amyangfei/RedisModules-Go/tree/master/modules/graphicsmagick">graphicsmagick</a>模块使用的<a href="https://github.com/gographics/imagick">imagick</a>库本身也是通过cgo对ImageMagick MagickWand C API的封装。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文会介绍如何使用 go 编写 redis loadable modules，并分析编写模块和使用cgo可能遇到的坑。&lt;/p&gt;
&lt;h2 id=&quot;什么是redis-loadable-modules&quot;&gt;&lt;a href=&quot;#什么是redis-loadable-modules&quot; class=&quot;headerlink&quot; title=&quot;什么是redis loadable modules&quot;&gt;&lt;/a&gt;什么是redis loadable modules&lt;/h2&gt;&lt;p&gt;可加载模块是redis最新加入的功能，目前需要在&lt;code&gt;unstable&lt;/code&gt;分支才可以使用。简单说模块系统是redis的C代码暴露出一些API，定义在头文件&lt;a href=&quot;https://github.com/antirez/redis/blob/unstable/src/redismodule.h&quot;&gt;redismodule.h&lt;/a&gt;中，外部模块引用该头文件即可访问所有的API函数，这些API提供了包括访问redis的字典空间、调用redis命令、向客户端返回数据等诸多功能。外部模块是以动态库的形式被redis server加载并使用，可以在redis server启动时加载，也可以在启动后动态加载。更多的细节可以参考文档&lt;a href=&quot;https://github.com/antirez/redis/blob/unstable/src/modules/INTRO.md&quot;&gt;redis module INTRO&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;在此之前想对redis扩展有两种方案：一是利用lua脚本；另一种则需要修改redis源码，类似于&lt;a href=&quot;https://github.com/mattsta/krmt&quot;&gt;Kit of Redis Module Tools&lt;/a&gt;提供的方案。lua脚本的扩展性有限，并且lua是通过redis的上层API来调用redis命令的，无法直接访问底层的存储数据，调用redis更底层的API；修改源码的方案就更加hack，是没有办法不断与上游分支合并的。&lt;/p&gt;</summary>
    
    
    
    <category term="program" scheme="http://amyangfei.me/categories/program/"/>
    
    
    <category term="golang" scheme="http://amyangfei.me/tags/golang/"/>
    
    <category term="redis" scheme="http://amyangfei.me/tags/redis/"/>
    
    <category term="redis module" scheme="http://amyangfei.me/tags/redis-module/"/>
    
  </entry>
  
  <entry>
    <title>RQ (Redis Queue) 使用的一些思考</title>
    <link href="http://amyangfei.me/2016/01/30/redis-queue-rethink/"/>
    <id>http://amyangfei.me/2016/01/30/redis-queue-rethink/</id>
    <published>2016-01-30T00:00:00.000Z</published>
    <updated>2020-12-13T07:02:34.407Z</updated>
    
    <content type="html"><![CDATA[<p>最近使用了 <a href="http://python-rq.org/">rq</a> 这个简单的队列处理库，其中有一些任务需要使用MySQL的连接或者redis的连接，对此有一些思考。</p><h2 id="MySQL-redis的连接复用"><a href="#MySQL-redis的连接复用" class="headerlink" title="MySQL/redis的连接复用"></a>MySQL/redis的连接复用</h2><p>rq 提供了两种 worker 模型：基于 <code>fork</code> 的 worker 模型和直接在主线程执行任务的 worker 模型。基于 fork 的 worker 在执行任务之前先 fork 一个子进程，在子进程中执行具体的任务，父进程等待子进程执行返回。在基于 fork 的 worker 模型下，如果在父进程有一个 MySQL/redis 连接，由于子进程会继承父进程的地址空间，具有相同的打开文件、socket、管道等，所以子进程中也有同样的 MySQL/redis 连接，那么在这种情况下这个连接可以直接使用么？通过以下代码简单测试一下，连接 MySQL 使用 <a href="https://github.com/bdarnell/torndb">torndb</a> ，连接 redis 使用 <a href="https://github.com/andymccurdy/redis-py">redis-py</a>：</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="keyword">import</span> torndb</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_redis_conn</span>():</span></span><br><span class="line">    <span class="keyword">return</span> redis.StrictRedis(port=<span class="number">6380</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_mysql_conn</span>():</span></span><br><span class="line">    <span class="keyword">return</span> torndb.Connection(</span><br><span class="line">        host=<span class="string">&#x27;127.0.0.1&#x27;</span>, user=<span class="string">&#x27;root&#x27;</span>, password=<span class="string">&#x27;password&#x27;</span>, database=<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line"></span><br><span class="line">_redis_conn = init_redis_conn()</span><br><span class="line">_mysql_conn = init_mysql_conn()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_redis_conn</span>():</span></span><br><span class="line">    <span class="keyword">global</span> _redis_conn</span><br><span class="line">    <span class="keyword">if</span> _redis_conn <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        _redis_conn = init_redis_conn()</span><br><span class="line">    <span class="keyword">return</span> _redis_conn</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_mysql_conn</span>():</span></span><br><span class="line">    <span class="keyword">global</span> _mysql_conn</span><br><span class="line">    <span class="keyword">if</span> _mysql_conn <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        _mysql_conn = init_mysql_conn()</span><br><span class="line">    <span class="keyword">return</span> _mysql_conn</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> errno</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> mconn</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">redis_op</span>():</span></span><br><span class="line">    conn = mconn.get_redis_conn()</span><br><span class="line">    k = <span class="built_in">int</span>(time.time())</span><br><span class="line">    conn.<span class="built_in">set</span>(k, k)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mysql_op</span>():</span></span><br><span class="line">    conn = mconn.get_mysql_conn()</span><br><span class="line">    sql = <span class="string">&#x27;INSERT INTO users (name) values (%s)&#x27;</span></span><br><span class="line">    conn.insert(sql, <span class="built_in">str</span>(<span class="built_in">int</span>(time.time())))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fork_test</span>(<span class="params">func</span>):</span></span><br><span class="line">    child_pid = os.fork()</span><br><span class="line">    <span class="keyword">if</span> child_pid == <span class="number">0</span>:</span><br><span class="line">        func()</span><br><span class="line">        os._exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            os.waitpid(child_pid, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">except</span> OSError <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">if</span> e.errno != errno.EINTR:</span><br><span class="line">                <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line">        <span class="comment"># fork_test(mysql_op)</span></span><br><span class="line">        fork_test(redis_op)</span><br></pre></td></tr></table></figure><p>执行 main.py，观察3306端口和6380端口的连接数，发现 MySQL 的连接会被复用，但是在 redis 的连接并没有复用，产生了大量到 redis 的 TCP 连接。查看一下 redis-py 的代码，很容易发现为什么每个工作子进程都新建了一个到 redis 的连接。redis-py 通过 <code>StrictRedis</code> 对象向 redis 发起命令时，首先调用 ConnectionPool 对象的 get_connection 方法获取一个可用的连接。在 <code>get_connection</code> 方法中，会首先调用 <code>_checkpid</code> 函数。<code>_checkpid</code> 检查 connnection_pool 的 pid与当前进程的pid是否一致，如果不相同，会关闭 connection_pool 中的所有连接，然后重新建立到 redis 的 TCP 连接。相关代码如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StrictRedis</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execute_command</span>(<span class="params">self, *args, **options</span>):</span></span><br><span class="line">        <span class="string">&quot;Execute a command and return a parsed response&quot;</span></span><br><span class="line">        pool = self.connection_pool</span><br><span class="line">        connection = pool.get_connection(command_name, **options)</span><br><span class="line">        <span class="comment"># connection send_command ...</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConnectionPool</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_connection</span>(<span class="params">self, command_name, *keys, **options</span>):</span></span><br><span class="line">        <span class="string">&quot;Get a connection from the pool&quot;</span></span><br><span class="line">        self._checkpid()</span><br><span class="line">        <span class="comment"># get connection ...</span></span><br><span class="line">        <span class="keyword">return</span> connection</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_checkpid</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.pid != os.getpid():</span><br><span class="line">            <span class="keyword">with</span> self._check_lock:</span><br><span class="line">                <span class="keyword">if</span> self.pid == os.getpid():</span><br><span class="line">                    <span class="comment"># another thread already did the work while we waited</span></span><br><span class="line">                    <span class="comment"># on the lock.</span></span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                self.disconnect()</span><br><span class="line">                self.reset()</span><br></pre></td></tr></table></figure><p>通过上述代码就很清楚为什么在 fork 工作模式下 redis 连接没有复用了，ConnectPool 对象的 pid 是父进程的 pid，在子进程中与子进程的 pid不同，于是到 redis 的连接被重置。</p><h2 id="fork-模型下共享-MySQL-连接合理么"><a href="#fork-模型下共享-MySQL-连接合理么" class="headerlink" title="fork 模型下共享 MySQL 连接合理么"></a>fork 模型下共享 MySQL 连接合理么</h2><p>不合理，会有很多问题。比如在子进程中到 MySQL 的 TCP 连接因为异常关闭（或者主动调用 <code>db.close()</code>），由于 copy-on-write 的特性，子进程中修改 *db = None (*db 是 torndb 中保存到 MySQL连接的对象)并不会影响父进程的值，父进程再次 fork 出的子进程使用该 torndb 连接对象时就会出现 <code>OperationalError: (OperationalError) (2006, &#39;MySQL server has gone away&#39;)</code> 的错误。使用 uWSGI 就会有这样的使用场景，于是 uWSGI 有了 <code>lazy-apps</code> 的选项。</p><h2 id="为什么-rq-提供了基于-fork-的-worker-模型"><a href="#为什么-rq-提供了基于-fork-的-worker-模型" class="headerlink" title="为什么 rq 提供了基于 fork 的 worker 模型"></a>为什么 rq 提供了基于 fork 的 worker 模型</h2><p>回到最初的问题，现在需要在 rq 的任务中使用 MySQL 或者 redis 连接，如果使用 fork 模型的 worker，就需要每次重建一个 TCP 连接，这会带来很大的性能开销，通常是不可接受的。直接使用另外一种在主线程执行任务的 worker 似乎是更好的方案。那么为什么 rq 提供了基于 fork 的 worker 模型？rq 的作者给出了这样的理由：</p><blockquote><p>This mainly has to do with stability. When you spawn a child process (with fork(), or multiprocessing, or whatever) you get an isolated execution context, which has a few nice benefits. Some of which are: 1. If a process crashes (by a segfault in a C module for example), only the child crashes; 2. Additionally, the worker will always be responsive and can easily kill the child after a time out; 3. Also, memory leaks caused in the child can never affect the main worker. The child is killed after every job, so memory should never grow, even when running rqworker for long periods of time.</p></blockquote><p>rq 所看到的任务是一个可加载的 python 函数对象，执行任务时加载该对象并传入参数执行，对于可能出现的任务执行崩溃或内存泄漏等情况 rq 本身并不能处理（比如提到的 C 模块段错误，python 的 try-except 是无法捕捉的）。作为一个执行任务的通用库，fork-based worker 采用了一种保守的手段，通过进程级别的隔离保证了主进程的稳定运行。</p><h2 id="关于-rq-的使用场景"><a href="#关于-rq-的使用场景" class="headerlink" title="关于 rq 的使用场景"></a>关于 rq 的使用场景</h2><p>最后，谈一谈 rq 在不同场景下的使用。</p><p>当有很多小任务、每个任务可能需要等待IO，这种情况下使用非阻塞模型最适合了，比如 gevent。那么 rq 是否支持 gevent？目前是没有官方支持的，当然有一些第三方的扩展，需要注意的是使用 gevent 时最好是重写worker执行的入口，即 rqworker，因为如果只是在 -w 对应的 worker 类中使用 gevent，在 monkey patch 之前已经引用了一些模块，可能会有未知的问题。一些实现参考：<a href="https://github.com/zhangliyong/rq-gevent-worker">rq-gevent-worker</a>, <a href="https://gist.github.com/jhorman/e16ed695845fca683057">gevent_rqworker.py</a></p><p>另外一种场景，执行的任务是 CPU 密集型的，通常使用多进程比较合适。rq 对于支持使用多进程并发执行任务的 worker 也没有官方支持，一种解决方案是启动多个 rqorker 进程来从同一个任务队列消费任务；当然，也可以自己去扩展 rqworker。</p><p>总体而言，rq 代码本身实现得比较简洁，只支持 redis 作为队列存储任务，比较适合一些轻量级的异步任务处理。另一方面由于是一个通用库，一些具体场景下的需求就需要使用者自己来定制。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近使用了 &lt;a href=&quot;http://python-rq.org/&quot;&gt;rq&lt;/a&gt; 这个简单的队列处理库，其中有一些任务需要使用MySQL的连接或者redis的连接，对此有一些思考。&lt;/p&gt;
&lt;h2 id=&quot;MySQL-redis的连接复用&quot;&gt;&lt;a href=&quot;#MySQL-redis的连接复用&quot; class=&quot;headerlink&quot; title=&quot;MySQL/redis的连接复用&quot;&gt;&lt;/a&gt;MySQL/redis的连接复用&lt;/h2&gt;&lt;p&gt;rq 提供了两种 worker 模型：基于 &lt;code&gt;fork&lt;/code&gt; 的 worker 模型和直接在主线程执行任务的 worker 模型。基于 fork 的 worker 在执行任务之前先 fork 一个子进程，在子进程中执行具体的任务，父进程等待子进程执行返回。在基于 fork 的 worker 模型下，如果在父进程有一个 MySQL/redis 连接，由于子进程会继承父进程的地址空间，具有相同的打开文件、socket、管道等，所以子进程中也有同样的 MySQL/redis 连接，那么在这种情况下这个连接可以直接使用么？通过以下代码简单测试一下，连接 MySQL 使用 &lt;a href=&quot;https://github.com/bdarnell/torndb&quot;&gt;torndb&lt;/a&gt; ，连接 redis 使用 &lt;a href=&quot;https://github.com/andymccurdy/redis-py&quot;&gt;redis-py&lt;/a&gt;：&lt;/p&gt;</summary>
    
    
    
    <category term="program" scheme="http://amyangfei.me/categories/program/"/>
    
    
    <category term="python" scheme="http://amyangfei.me/tags/python/"/>
    
    <category term="redis" scheme="http://amyangfei.me/tags/redis/"/>
    
    <category term="job queue" scheme="http://amyangfei.me/tags/job-queue/"/>
    
  </entry>
  
  <entry>
    <title>SSH through different kinds of proxy</title>
    <link href="http://amyangfei.me/2015/01/24/ssh-and-proxy/"/>
    <id>http://amyangfei.me/2015/01/24/ssh-and-proxy/</id>
    <published>2015-01-24T00:00:00.000Z</published>
    <updated>2020-12-13T07:05:03.613Z</updated>
    
    <content type="html"><![CDATA[<p>有时候因为网络、安全等原因，我们不能通过 ssh 直接连接到目标主机，而是需要通过代理服务器或跳板机实现连接。本文总结通过代理或跳板机使用 ssh 的各种方法，并且分析这些方法的基本原理。</p><p>我们设定本地主机的地址为 homepc，绑定有公网 ip；运行有各类代理的代理服务器或跳板机地址为 proxy-server，proxy-server 上绑定一个公网 ip，同时绑定一个内网 ip（假定为10.0.10.252）；需要连接的目标主机 target-server，绑定内网 ip（假定为 10.0.10.25）。所有的用户名、登录用户名使用 apple。</p><a id="more"></a><p>首先我们介绍一些常见的连接方法</p><h3 id="登录跳板机，在跳板机上连接目标主机"><a href="#登录跳板机，在跳板机上连接目标主机" class="headerlink" title="登录跳板机，在跳板机上连接目标主机"></a>登录跳板机，在跳板机上连接目标主机</h3><hr><ul><li>方法A：直接登录，可以通过 <code>-A</code> 选项利用Agent forwarding 特性</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># now on homepc</span></span><br><span class="line">apple@homepc</span><br><span class="line">➜ ssh -A apple@proxy-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># now on proxy-server</span></span><br><span class="line">apple@proxy-server</span><br><span class="line">➜ ssh apple@10.0.10.25</span><br></pre></td></tr></table></figure><ul><li>方法B：A useful trick，通过 <code>-tt</code> 强制分配 tty，直接执行 ssh 命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apple@homepc</span><br><span class="line">➜  ssh -A -tt apple@proxy-server ssh apple@10.0.10.25</span><br></pre></td></tr></table></figure><ul><li>方法C：利用 netcat 在跳板机上建立 tunnel，通过此 tunnel 连接目标主机</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apple@homepc</span><br><span class="line">➜  ssh -oProxyCommand=<span class="string">&#x27;ssh apple@proxy-server nc %h %p&#x27;</span> apple@10.0.10.25</span><br></pre></td></tr></table></figure><h3 id="借助-proxy-连接目标主机"><a href="#借助-proxy-连接目标主机" class="headerlink" title="借助 proxy 连接目标主机"></a>借助 proxy 连接目标主机</h3><hr><ul><li>方法D：本地 ssh 代理，在 proxy-server 上用户 apple 设有 nologin 的 shell 权限，不能通过 ssh 登录 proxy-server 但是可以进行 ssh 连接，通过 <code>-D</code> 进行本地的端口转发，详情可以查看 man ssh。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># run ssh daemon on homepc for local “dynamic” application-level port forwarding</span></span><br><span class="line">apple@homepc</span><br><span class="line">➜  ssh -N -D 12171 apple@proxy-server &amp;</span><br><span class="line"></span><br><span class="line">apple@homepc</span><br><span class="line">➜  ssh -oProxyCommand=<span class="string">&#x27;nc -x 127.0.0.1:12171 %h %p&#x27;</span> apple@10.0.10.25</span><br></pre></td></tr></table></figure><ul><li><p>方法E：类似于本地 ssh 代理的方式，可以在 proxy-server 上运行任何协议类型的代理，在 homepc 本地运行代理客户端连接 proxy-server 上的 proxy，在 ssh 的 ProxyCommand 指定为本地代理客户端的连接点即可。</p></li><li><p>方法F：利用 <a href="http://www.agroman.net/corkscrew/">corkscrew</a> ，<a href="https://packages.debian.org/source/sid/connect-proxy">connect-proxy</a>，<a href="https://github.com/rofl0r/proxychains-ng">proxychains</a> 等直接连接 proxy-server 上的代理。假定 proxy-server 上运行有 squid http 代理，代理使用用户名/密码这种基本验证方式。corkscrew 仅支持 http 代理，connect-proxy 和 proxychains 支持 http, socks4, socks5 代理。proxychains 还支持 shell 内所有流量都通过代理，提供了更过的功能，这里不展开叙述。只简单看一下通过它们使用 http 代理连接 ssh 的情况。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># corkscrew can specify authfile with pattern of username:password for http proxy authentication</span></span><br><span class="line">apple@homepc</span><br><span class="line">➜  ssh -oProxyCommand=<span class="string">&#x27;corkscrew proxy-server 3128 %h %p ~/.ssh/authfile&#x27;</span> apple@10.0.10.25</span><br><span class="line"></span><br><span class="line"><span class="comment"># use connect-proxy</span></span><br><span class="line">apple@homepc</span><br><span class="line">➜  ssh -oProxyCommand=<span class="string">&#x27;connect -H apple@proxy-server:3128 %h %p&#x27;</span> apple@10.0.10.25</span><br><span class="line"></span><br><span class="line"><span class="comment"># use proxychains</span></span><br><span class="line"><span class="comment"># add &quot;http xxx.yyy.zzz.www 3128 apple apple&quot; to &quot;[ProxyList]&quot; node in proxychains config file</span></span><br><span class="line"><span class="comment"># xxx.yyy.zzz.www is the WAN ip of proxy-server. proxychains doesn&#x27;t support dns lookup for proxy server</span></span><br><span class="line"><span class="comment"># more details: https://github.com/rofl0r/proxychains-ng/issues/25</span></span><br><span class="line">apple@homepc</span><br><span class="line">➜  proxychains4 ssh apple@10.0.10.25</span><br></pre></td></tr></table></figure><h3 id="ProxyCommand"><a href="#ProxyCommand" class="headerlink" title="ProxyCommand"></a>ProxyCommand</h3><hr><p>关于 ProxyCommand 在此不多叙述，详情参考 <code>man ssh_config</code>。可以在 ~/.ssh/config 中配置 ProxyCommand，还可以根据不同的 host 配置不同的 ProxyCommand。</p><h3 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h3><hr><p>这些方法看起来有些眼花缭乱，但其实原理都很简单，除去登录到跳板机的情形，剩下场景的都是通过某种形式连接到代理服务器上的代理（或通过更多层的代理连接到代理服务器上的代理，形成一个代理链），由代理转发数据到目标服务器。</p><p>首先看方法C 的场景，参考<a href="http://backdrift.org/transparent-proxy-with-ssh">transparent-proxy-with-ssh</a></p><pre><code>    +--------+                  +--------------+                +---------------+    | homepc |                  | proxy-server |                | target-server |    |        | ===ssh=over=netcat=tunnel======================&gt; | 10.0.10.25    |    +--------+                  +--------------+                +---------------+</code></pre><p>该场景中，proxy-server 上实际运行有 <code>nc 10.0.10.25 22</code> 进程，该进程将会完成数据在 homepc 和 target-server 之间的转发。</p><p>方法D, E, F 中包含有明显的代理，以方法F 中的 corkscrew + squid http proxy 进行分析。</p><p>ssh 指定使用 ProxyCommand 之后，在建立连接时有这样一段关键代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// from openssh-5.9p1, sshconnect.c</span></span><br><span class="line"><span class="keyword">int</span></span><br><span class="line">ssh_connect(<span class="keyword">const</span> <span class="keyword">char</span> *host, struct sockaddr_storage * hostaddr,</span><br><span class="line">    u_short port, <span class="keyword">int</span> family, <span class="keyword">int</span> connection_attempts, <span class="keyword">int</span> *timeout_ms,</span><br><span class="line">    <span class="keyword">int</span> want_keepalive, <span class="keyword">int</span> needpriv, <span class="keyword">const</span> <span class="keyword">char</span> *proxy_command)</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">/* If a proxy command is given, connect using it. */</span></span><br><span class="line">        <span class="keyword">if</span> (proxy_command != <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> ssh_proxy_connect(host, port, proxy_command);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 ssh_proxy_connect 中会 fork 出子进程来执行 ProxyCommand 中的命令，同时会重定向子进程的标准输入和标准输出，子进程的标准输入重定向到 pin[0]，所以子进程会通过 pin[1] 获得父进程标准输出的内容；子进程的标准输出重定向到 pout[1]，所以写到子进程标准输出的内容可以在父进程通过读取 pout[0] 获得。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// from openssh-5.9p1, sshconnect.c</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span></span><br><span class="line">ssh_proxy_connect(<span class="keyword">const</span> <span class="keyword">char</span> *host, u_short port, <span class="keyword">const</span> <span class="keyword">char</span> *proxy_command)</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Fork and execute the proxy command. */</span></span><br><span class="line"><span class="keyword">if</span> ((pid = fork()) == <span class="number">0</span>) &#123;</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Redirect stdin and stdout. */</span></span><br><span class="line">close(pin[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">if</span> (pin[<span class="number">0</span>] != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (dup2(pin[<span class="number">0</span>], <span class="number">0</span>) &lt; <span class="number">0</span>)</span><br><span class="line">perror(<span class="string">&quot;dup2 stdin&quot;</span>);</span><br><span class="line">close(pin[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line">close(pout[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">if</span> (dup2(pout[<span class="number">1</span>], <span class="number">1</span>) &lt; <span class="number">0</span>)</span><br><span class="line">perror(<span class="string">&quot;dup2 stdout&quot;</span>);</span><br><span class="line"><span class="comment">/* Cannot be 1 because pin allocated two descriptors. */</span></span><br><span class="line">close(pout[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Stderr is left as it is so that error messages get</span></span><br><span class="line"><span class="comment">   printed on the user&#x27;s terminal. */</span></span><br><span class="line">argv[<span class="number">0</span>] = shell;</span><br><span class="line">argv[<span class="number">1</span>] = <span class="string">&quot;-c&quot;</span>;</span><br><span class="line">argv[<span class="number">2</span>] = command_string;</span><br><span class="line">argv[<span class="number">3</span>] = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Execute the proxy command.  Note that we gave up any</span></span><br><span class="line"><span class="comment">   extra privileges above. */</span></span><br><span class="line">signal(SIGPIPE, SIG_DFL);</span><br><span class="line">execv(argv[<span class="number">0</span>], argv);</span><br><span class="line">perror(argv[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">    ...</span><br><span class="line"><span class="comment">/* Close child side of the descriptors. */</span></span><br><span class="line">close(pin[<span class="number">0</span>]);</span><br><span class="line">close(pout[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Set the connection file descriptors. */</span></span><br><span class="line">packet_set_connection(pout[<span class="number">0</span>], pin[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code> +----------+             +---------------+               +----------+              +---------------+ | terminal |  --------&gt;  | parent stdout |  ----------&gt;  |  pin[0]  |  ---------&gt;  |  child stdin  | |  input   |             |    pin[1]     |     read      |          |   redirect   |               | +----------+             +---------------+               +----------+              +---------------+ +----------+             +---------------+               +----------+              +---------------+ | terminal |  &lt;--------  | parent stdin  |  &lt;----------  |  pout[1] |  &lt;---------  |  child stdout | | display  |             |    pout[0]    |     read      |          |   redirect   |               | +----------+             +---------------+               +----------+              +---------------+</code></pre><p>上图描述了调用 ProxyCommand 时 ssh 客户端数据的流动情况，在我们的应用场景中，父进程对应 ssh 客户端进程，子进程运行 corkscrew。corkscrew 的实现很简单，它与代理服务器创建 tcp 连接，然后进入一个主循环，通过 select(2) 处理文件事件。<br>（注意 corkscrew 将与代理服务器协商的代码也写在主循环中，通过 setup 标志来确定处于建立连接后的协商阶段还是已经建立好到代理的连接，协商部分的代码可以抽离出来，类似的 connect-proxy 就是抽离出协商阶段和稳定连接阶段。下边分析的主循环略过协商阶段的代码。），这样处理文件读写事件的代码就非常简单：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// from corkscrew2.0, corkscrew.c</span></span><br><span class="line"><span class="keyword">for</span>(;;) &#123;</span><br><span class="line">    FD_ZERO(&amp;sfd);</span><br><span class="line">    FD_ZERO(&amp;rfd);</span><br><span class="line"></span><br><span class="line">    FD_SET(csock, &amp;rfd);</span><br><span class="line">    FD_SET(<span class="number">0</span>, &amp;rfd);</span><br><span class="line"></span><br><span class="line">    tv.tv_sec = <span class="number">5</span>;</span><br><span class="line">    tv.tv_usec = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(select(csock+<span class="number">1</span>,&amp;rfd,&amp;sfd,<span class="literal">NULL</span>,&amp;tv) == <span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (FD_ISSET(csock, &amp;rfd)) &#123;</span><br><span class="line">        len = read(csock, buffer, <span class="keyword">sizeof</span>(buffer));</span><br><span class="line">        <span class="keyword">if</span> (len&lt;=<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        len = write(<span class="number">1</span>, buffer, len);</span><br><span class="line">        <span class="keyword">if</span> (len&lt;=<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (FD_ISSET(<span class="number">0</span>, &amp;rfd)) &#123;</span><br><span class="line">        len = read(<span class="number">0</span>, buffer, <span class="keyword">sizeof</span>(buffer));</span><br><span class="line">        <span class="keyword">if</span> (len&lt;=<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        len = write(csock, buffer, len);</span><br><span class="line">        <span class="keyword">if</span> (len&lt;=<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>corkscrew 的处理逻辑很清楚，从标准输入读取的数据，write 到 csock 中；从 csock 读取的数据，write 到标准输出。与 ssh 客户端结合起来，就可以得到下边的一张图：</p><pre><code> +--------------+             +------------+               +-----------------+          +---------+ | child stdin  |  --------&gt;  | corkscrew  |  ----------&gt;  | csock           |  -----&gt;  |  proxy  | | corkscrew    |    read     |            |     write     | conn with proxy |          |         | +--------------+             +------------+               +-----------------+          +---------+ +--------------+             +------------+               +-----------------+          +---------+ | child stdout |  &lt;--------  | corkscrew  |  &lt;----------  | csock           |  &lt;-----  |  proxy  | | corkscrew    |    write    |            |     read      | conn with proxy |          |         | +--------------+             +------------+               +-----------------+          +---------+</code></pre><p>从代理到目标服务器的数据收发与上述实现类似，只是 socket 有所不同，不再按照不同代理具体分析。使用不同的代理形式，只是在代理协商阶段有所不同，当稳定连接后，代理的工作就是不停的转发数据了。从数据的发送接收角度，加入代理后不影响 ssh 客户端和服务器之间传输数据的内容和顺序，因而可以将代理看做是透明的，就好像 ssh 客户端直接连接到目标服务器一样。</p><h3 id="问答"><a href="#问答" class="headerlink" title="问答"></a>问答</h3><p>TODO</p><ol><li>使用代理会不会存在安全问题？例如 <a href="http://www.unixwiz.net/techtips/ssh-agent-forwarding.html#sec">Security Issues With Key Agents</a> 提到的安全问题。</li><li>我使用 <a href="https://mosh.mit.edu/">mosh</a>，这些方法是否可以使用？</li><li>如果我使用公私钥登录的方式，代理服务器上需要进行哪些操作？</li></ol><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol><li><a href="http://backdrift.org/transparent-proxy-with-ssh">Using SSH ProxyCommand to Tunnel Connections</a></li><li><a href="http://daniel.haxx.se/docs/sshproxy.html">SSH Through or Over Proxy</a></li><li><a href="http://www.agroman.net/corkscrew/">Corkscrew</a></li><li><a href="http://en.wikibooks.org/wiki/OpenSSH/Cookbook/Proxies_and_Jump_Hosts">OpenSSH/Cookbook/Proxies and Jump Hosts</a></li><li><a href="http://www.unixwiz.net/techtips/ssh-agent-forwarding.html">An Illustrated Guide to SSH Agent Forwarding</a></li><li><a href="http://www.zeitoun.net/articles/ssh-through-http-proxy/start">SSH through HTTP proxy</a></li><li><a href="http://www.lainme.com/doku.php/blog/2011/01/%E9%80%8F%E8%BF%87%E4%BB%A3%E7%90%86%E8%BF%9E%E6%8E%A5ssh">透过代理连接SSH</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;有时候因为网络、安全等原因，我们不能通过 ssh 直接连接到目标主机，而是需要通过代理服务器或跳板机实现连接。本文总结通过代理或跳板机使用 ssh 的各种方法，并且分析这些方法的基本原理。&lt;/p&gt;
&lt;p&gt;我们设定本地主机的地址为 homepc，绑定有公网 ip；运行有各类代理的代理服务器或跳板机地址为 proxy-server，proxy-server 上绑定一个公网 ip，同时绑定一个内网 ip（假定为10.0.10.252）；需要连接的目标主机 target-server，绑定内网 ip（假定为 10.0.10.25）。所有的用户名、登录用户名使用 apple。&lt;/p&gt;</summary>
    
    
    
    <category term="program" scheme="http://amyangfei.me/categories/program/"/>
    
    
    <category term="ssh" scheme="http://amyangfei.me/tags/ssh/"/>
    
    <category term="proxy" scheme="http://amyangfei.me/tags/proxy/"/>
    
  </entry>
  
  <entry>
    <title>python 拾遗2</title>
    <link href="http://amyangfei.me/2014/12/04/python-tips-2/"/>
    <id>http://amyangfei.me/2014/12/04/python-tips-2/</id>
    <published>2014-12-04T00:00:00.000Z</published>
    <updated>2020-12-13T07:04:45.824Z</updated>
    
    <content type="html"><![CDATA[<p>本文是上一篇文章 <a href="/2014/11/27/python-tips/" target="_blank">python 拾遗</a> 的延续，继续整理 python 的一些使用技巧，以及一些可能被忽略的细节</p><p>注意: 以下讨论主要为 Python2.7 版本， Python 3 的内容有待跟进</p><a id="more"></a><h2 id="Get-MD5-hash-of-big-files"><a href="#Get-MD5-hash-of-big-files" class="headerlink" title="Get MD5 hash of big files"></a>Get MD5 hash of big files</h2><p>当我们需要通过 python 得到一个很大文件的 md5 值的时候，我们可以通过分段读取文件的方法来节约内存，选择合适的分段大小还会适当提高计算效率。<br><a href="https://gist.github.com/amyangfei/37b7d52003f38f8a3877" target="_blank">chksum.py</a> 通过 <code>memory_profiler</code> 统计执行过程中内存的使用情况并统计每一次计算的执行时间，同时给出了1Gb 数据的测试结果。</p><p>stackoverflow 上的一些讨论：<a href="http://stackoverflow.com/questions/1131220/get-md5-hash-of-big-files-in-python" target="_blank">Get MD5 hash of big files in Python</a>, <a href="http://stackoverflow.com/questions/519633/lazy-method-for-reading-big-file-in-python" target="_blank">Lazy Method for Reading Big File in Python</a></p><h2 id="io-BytesIO-vs-cString-StringIO"><a href="#io-BytesIO-vs-cString-StringIO" class="headerlink" title="io.BytesIO vs cString.StringIO"></a>io.BytesIO vs cString.StringIO</h2><p>python2 和 python3 在 StringIO 和 BytesIO 之间有诸多不同，<a href="https://pypi.python.org/pypi/six" target="_blank">six</a> 是一个提供同时兼容 py2 和 py3 的解决方案，这个几个模块的具体区别参考下边的表格。</p><table><thead><tr><th>模块</th><th>Python 2</th><th>Python 3</th></tr></thead><tbody><tr><td>StringIO.StringIO</td><td>内存中的字符串缓存，可以存储字符串或Unicode 类型</td><td>删除</td></tr><tr><td>cStringIO.StringIO</td><td>基于C实现提供类似StringIO.StringIO的接口且更高效，但是相比StringIO.StringIO使用有一定限制</td><td>删除</td></tr><tr><td>io.StringIO</td><td>对 Unicode文本内容的内存缓存，只能存储 Unicode 对象</td><td>对文本数据的内存缓存，不能接收 Unicode 类型</td></tr><tr><td>io.BytesIO</td><td>存储字节的内存缓存</td><td>存储字节的内存缓存</td></tr><tr><td>six.StringIO</td><td>StringIO.StringIO</td><td>io.StringIO</td></tr><tr><td>six.BytesIO</td><td>StringIO.StringIO</td><td>io.BytesIO</td></tr></tbody></table><p>在性能上：通常 cStringIO.StringIO 是最快的。io.Bytes 同样是通过 C 实现的，但是例如通过 <code>io.BytesIO(b'data')</code> 初始化 BytesIO 对象时会对数据进行一次复制，这会引起性能上的损失。</p><p>关于 StringIO 和 BytesIO 的性能区别，对于 IO 性能敏感的场景还是有很大影响，例如在 <a href="https://github.com/tornadoweb/tornado/issues/1110" target="_blank">tornado</a>，<a href="https://github.com/scrapy/scrapy/pull/803" target="_blank">scrapy</a> 的项目中以及 <a href="https://mail.python.org/pipermail//python-dev/2014-July/135542.html" target="_blank">Python 邮件列表</a> 中都有相关讨论。<br>在未来 Python3.5 版本中将会对 io.BytesIO 进行 copy-on-write 的优化，详见：<a href="http://bugs.python.org/issue22003" target="_blank">Python Issue22003</a>。</p><p>当具体需要创建 file-like 的数据流时并且需要考虑对 Python2 和 Python3 代码的兼容性时，我们需要根据具体的数据类型（字符串或者 Unicode 或者 Bytes），以及使用场景对性能的要求选择合适的模块。</p><h2 id="List-comprehensions-leak-the-loop-control-variable"><a href="#List-comprehensions-leak-the-loop-control-variable" class="headerlink" title="List comprehensions leak the loop control variable"></a>List comprehensions leak the loop control variable</h2><p>看一段很简单的列表生成的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="string">&#x27;before&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="string">&#x27;before&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = (x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line"><span class="string">&#x27;before&#x27;</span></span><br></pre></td></tr></table></figure><p>在 python2.x 中，list comprehension 中变量的作用域并不仅限于 [] 中，而是会泄露出来，而 Generator expressions 执行时会创建一个独立的运行域，因而不会发生变量泄露。在 Python3 中 list comprehension 变量泄露已经得到了修改。</p><p>下边是 <a href="http://python-history.blogspot.com/2010/06/from-list-comprehensions-to-generator.html" target="_blank">Python History</a> 中的原文</p><blockquote><p>This was an artifact of the original implementation of list comprehensions; it was one of Python’s “dirty little secrets” for years. It started out as an intentional compromise to make list comprehensions blindingly fast, and while it was not a common pitfall for beginners, it definitely stung people occasionally. For generator expressions we could not do this. Generator expressions are implemented using generators, whose execution requires a separate execution frame. Thus, generator expressions (especially if they iterate over a short sequence) were less efficient than list comprehensions.</p></blockquote><h2 id="socket-settimeout-value"><a href="#socket-settimeout-value" class="headerlink" title="socket.settimeout(value)"></a>socket.settimeout(value)</h2><p>socket 设置超时之后，该 socket 就是 non-blocking 模式</p><blockquote><p><strong>Timeout mode internally sets the socket in non-blocking mode.</strong> The blocking and timeout modes are shared between file descriptors and socket objects that refer to the same network endpoint. A consequence of this is that file objects returned by the makefile() method must only be used when the socket is in blocking mode; in timeout or non-blocking mode file operations that cannot be completed immediately will fail.</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文是上一篇文章 &lt;a href=&quot;/2014/11/27/python-tips/&quot; target=&quot;_blank&quot;&gt;python 拾遗&lt;/a&gt; 的延续，继续整理 python 的一些使用技巧，以及一些可能被忽略的细节&lt;/p&gt;
&lt;p&gt;注意: 以下讨论主要为 Python2.7 版本， Python 3 的内容有待跟进&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="http://amyangfei.me/categories/python/"/>
    
    
    <category term="python" scheme="http://amyangfei.me/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python 拾遗</title>
    <link href="http://amyangfei.me/2014/11/27/python-tips/"/>
    <id>http://amyangfei.me/2014/11/27/python-tips/</id>
    <published>2014-11-27T00:00:00.000Z</published>
    <updated>2020-12-13T07:04:49.339Z</updated>
    
    <content type="html"><![CDATA[<p>整理 python 使用的一些技巧，以及一些可能被忽略的细节，很多在文档可以查找到的内容将不会过多的描述，更多以外链的形式存在。</p><p>注意: 以下讨论主要为 Python2.7 版本， Python 3 的内容有待跟进</p><a id="more"></a><h3 id="import"><a href="#import" class="headerlink" title="import"></a>import</h3><p>python 的 import 通过调用 <code>__import__(name[, globals[, locals[, fromlist[, level]]]])</code> 这个函数实现，借助这个函数可以通过 python 模块的名字动态引用模块。来自tornado 的 <a href="http://tornado.readthedocs.org/en/latest/_modules/tornado/util.html#import_object" target="_blank">import_object</a> 是一个很简洁的封装。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">import_object</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Imports an object by name.</span></span><br><span class="line"><span class="string">    import_object(&#x27;x&#x27;) is equivalent to &#x27;import x&#x27;.</span></span><br><span class="line"><span class="string">    import_object(&#x27;x.y.z&#x27;) is equivalent to &#x27;from x.y import z&#x27;.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> name.count(<span class="string">&#x27;.&#x27;</span>) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">__import__</span>(name, <span class="literal">None</span>, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">    parts = name.split(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    obj = <span class="built_in">__import__</span>(<span class="string">&#x27;.&#x27;</span>.join(parts[:-<span class="number">1</span>]), <span class="literal">None</span>, <span class="literal">None</span>, [parts[-<span class="number">1</span>]], <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">getattr</span>(obj, parts[-<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">except</span> AttributeError:</span><br><span class="line">        <span class="keyword">raise</span> ImportError(<span class="string">&quot;No module named %s&quot;</span> % parts[-<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>除此之外，我们还可以利用 python2.7 开始提供的 <a href="https://docs.python.org/2/library/importlib.html" target="_blank">importlib.import_module</a> （<a href="http://svn.python.org/projects/python/trunk/Lib/importlib/__init__.py" target="_blank">实现代码</a>）来进行动态引用。例如：<code>importlib.import_module('tornado.httpclient')</code></p><h3 id="reload"><a href="#reload" class="headerlink" title="reload"></a>reload</h3><p>当 reload 一个 python 模块之后有两处不会使用新的模块的值：</p><ol><li><p>原来已经使用的实例还是会使用旧的模块，而新生产的实例会使用新的模块；</p></li><li><p>其他模块引用该模块的对象，这些引用不会绑定到新的对象上。</p></li></ol><p><a href="https://github.com/jparise/python-reloader" target="_blank">python-reloader</a> 是一个很有趣的项目，它将 <code>__builtin__.__import__</code> 修改为自定义的 <code>_import</code> 函数，新的 <code>_import</code> 在原有调用 <code>__import__(name[, globals[, locals[, fromlist[, level]]]])</code> 的同时记录下引用模块之间的依赖关系。python-reloader 实现的是 reload 一个模块之后，reload 该模块所依赖的所有模块，而不是 reload 所有依赖该模块的模块。说起来很绕，这里 <a href="https://github.com/jparise/python-reloader/issues/14" target="_blank">issue(It should reload dependants instead of dependencies)</a>有很好的讨论。在实际运行的系统中动态 reload 模块可能并非一种很好的选择。</p><h3 id="Catching-an-exception-while-using-‘with’"><a href="#Catching-an-exception-while-using-‘with’" class="headerlink" title="Catching an exception while using ‘with’"></a>Catching an exception while using ‘with’</h3><p>当我们使用 with 表达式并且需要捕捉异常的时候，我们可以这样做：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>( <span class="string">&quot;foo.txt&quot;</span> ) <span class="keyword">as</span> f :</span><br><span class="line">        <span class="built_in">print</span> f.readlines()</span><br><span class="line"><span class="keyword">except</span> EnvironmentError: <span class="comment"># parent of IOError, OSError</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;oops&#x27;</span></span><br></pre></td></tr></table></figure><p>如果希望捕捉 with 表达式的异常与内部工作代码的异常分离出来，我们可以这样做：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;foo.txt&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> IOError:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;oops&#x27;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">with</span> f:</span><br><span class="line">        <span class="built_in">print</span> f.readlines()</span><br></pre></td></tr></table></figure><p>关于 python 使用 try-except-else, with 的一些讨论：<a href="http://stackoverflow.com/questions/16138232/is-it-a-good-practice-to-use-try-except-else-in-python" target="_blank">Is it a good practice to use try-except-else</a>，<a href="http://stackoverflow.com/questions/3642080/using-python-with-statement-with-try-except-block" target="_blank">Using python “with” statement with try-except block</a></p><h3 id="StringIO"><a href="#StringIO" class="headerlink" title="StringIO"></a>StringIO</h3><p>当我们使用一些接收参数是文件类型的 API 时，我们可能需要使用到 StringIO，例如使用 gzip 模块压缩一个字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gzip, StringIO</span><br><span class="line"></span><br><span class="line">stringio = StringIO.StringIO()</span><br><span class="line">gzip_file = gzip.GzipFile(fileobj=stringio, mode=<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">gzip_file.write(<span class="string">&#x27;Hello World&#x27;</span>)</span><br><span class="line">gzip_file.close()</span><br><span class="line"></span><br><span class="line">stringio.getvalue()</span><br></pre></td></tr></table></figure><p>在 Python2.7 中 <a href="https://docs.python.org/2/library/stringio.html#module-cStringIO" target="_blank">cStringIO</a> 提供了与 StringIO 类似的接口，并且运行效率更高。在 Python3.4 中这两者被统一成为了 io.StringIO。</p><p>注意：cStringIO 的使用有一些限制：cStringIO 不能作为基类被继承；cStringIO 不能接收非 ASCII 字符的字符串参数；还有一点与 StringIO 不同的是当使用字符串参数初始化一个 cStringIO 对象时，该对象是只读的。</p><h3 id="Queue-Queue-vs-collections-deque"><a href="#Queue-Queue-vs-collections-deque" class="headerlink" title="Queue.Queue vs collections.deque"></a>Queue.Queue vs collections.deque</h3><p>Queue (python3 重命名为 queue)是一个可用于多线程之间同步、交换数据的队列模块，包括 FIFO，LIFO，优先级队列三个实现。</p><p>collections.deque 是一个双端队列的数据结构，在头和尾的插入、删除、读取操作是O(1)复杂度；在队列中部的随机读取操作是O(n)的。</p><p>reference：<a href="http://stackoverflow.com/questions/717148/python-queue-queue-vs-collections-deque" target="_blank">Python: Queue.Queue vs. collections.deque</a></p><h3 id="heapq"><a href="#heapq" class="headerlink" title="heapq"></a>heapq</h3><p>python 内置的 heapq 是一个小顶堆，并且 <code>heapify</code>, <code>heappush</code>, <code>heappop</code> 操作是不支持传递 <code>key</code> 参数的。如果想实现大顶堆，可以这样 <code>lambda x: -x</code>，或者自己封装一层。例如：<br><a href="http://stackoverflow.com/a/14189741/1115857" target="_blank">python topN max heap</a>。另外，<code>heapq.nlargest</code> 和 <code>heapq.nsmallest</code> 支持 key 参数。<br>邮件列表里的讨论：<a href="http://code.activestate.com/lists/python-list/162387/" target="_blank">为什么 python 的 heapq 没有支持 key 参数</a></p><h3 id="itertools-tee"><a href="#itertools-tee" class="headerlink" title="itertools.tee"></a>itertools.tee</h3><p><code>itertools.tee</code> 从一个迭代器返回 n 个独立的迭代器，原始迭代器将不允许被使用，如果使用，那么可能会导致新的迭代器失效。<a href="http://discontinuously.com/2012/06/inside-python-tee/" target="_blank">Inside Python’s itertools.tee</a> 很详细的探究了 <code>itertools.tee</code> 的实现细节。</p><h3 id="when-should-we-use-operator"><a href="#when-should-we-use-operator" class="headerlink" title="when should we use operator"></a>when should we use operator</h3><p>最常用的就是 <code> operator.itemgetter</code>，例如我们有一个 tuple 列表，需要对这些元组按照第i个元素排序，那么可以这样：<code>lst.sort(key=operator.itemgetter(i))</code>。</p><p><code>operator.add</code> 与 <code>lambda x, y: x+y</code> 具有相同的效果，二者的不同主要有两个方面：一方面是它们的可读性、开发者的使用习惯的差别；另一方面是性能差别。在<a href="https://wiki.python.org/moin/PythonSpeed" target="_blank">python wiki</a> 中有这样一段话：</p><blockquote><p>Likewise, the builtin functions run faster than hand-built equivalents. For example, map(operator.add, v1, v2) is faster than map(lambda x,y: x+y, v1, v2).</p></blockquote><p>我们对二者做一次简单的实验对比：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">➜ python -m timeit <span class="string">&#x27;import operator&#x27;</span> <span class="string">&#x27;map(operator.add, [x for x in range(5000)], [y for y in range(5000)])&#x27;</span></span><br><span class="line"><span class="number">1000</span> loops, best of <span class="number">3</span>: <span class="number">710</span> usec per loop</span><br><span class="line"></span><br><span class="line">➜ python3 -m timeit <span class="string">&#x27;import operator&#x27;</span> <span class="string">&#x27;map(operator.add, [x for x in range(5000)], [y for y in range(5000)])&#x27;</span></span><br><span class="line"><span class="number">1000</span> loops, best of <span class="number">3</span>: <span class="number">401</span> usec per loop</span><br><span class="line"></span><br><span class="line">➜ python -m timeit <span class="string">&#x27;map(lambda x,y:x+y, [x for x in range(5000)], [y for y in range(5000)])&#x27;</span></span><br><span class="line"><span class="number">100</span> loops, best of <span class="number">3</span>: <span class="number">929</span> usec per loop</span><br><span class="line"></span><br><span class="line">➜ python3 -m timeit <span class="string">&#x27;map(lambda x,y:x+y, [x for x in range(5000)], [y for y in range(5000)])&#x27;</span></span><br><span class="line"><span class="number">1000</span> loops, best of <span class="number">3</span>: <span class="number">397</span> usec per loop</span><br></pre></td></tr></table></figure><p>实验结果中，在 Python2.7 环境下 <code>operator.add</code> 稍微快于使用 lambda 表达式，在 Python3 环境下两者几乎没有差别。事实上 Python 并不适合 CPU 密集型的应用场景，当 CPU 不是性能瓶颈时，operator 和 lambda 之间的性能差距基本可以忽略。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;整理 python 使用的一些技巧，以及一些可能被忽略的细节，很多在文档可以查找到的内容将不会过多的描述，更多以外链的形式存在。&lt;/p&gt;
&lt;p&gt;注意: 以下讨论主要为 Python2.7 版本， Python 3 的内容有待跟进&lt;/p&gt;</summary>
    
    
    
    <category term="program" scheme="http://amyangfei.me/categories/program/"/>
    
    
    <category term="python" scheme="http://amyangfei.me/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Making Ebooks of Pro Git</title>
    <link href="http://amyangfei.me/2014/01/10/making-progit-ebook/"/>
    <id>http://amyangfei.me/2014/01/10/making-progit-ebook/</id>
    <published>2014-01-10T00:00:00.000Z</published>
    <updated>2020-12-13T07:04:40.695Z</updated>
    
    <content type="html"><![CDATA[<p>Pro Git 是一本用来学习 git 使用很不错的书，从 <a href="https://github.com/progit/progit" target="_blank">progit</a> 这个开源项目可以获得这本书的全部内容，下边介绍在 Ubuntu Server 12.04 环境下制作电子书的过程。</p><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><h3 id="1-ruby-rubygems"><a href="#1-ruby-rubygems" class="headerlink" title="1. ruby, rubygems"></a>1. ruby, rubygems</h3><p>参考 Ruby-China 的 <a href="http://ruby-china.org/wiki/install-rails-on-ubuntu-12-04-server" target="_blank">wiki</a></p><h3 id="2-rdiscount"><a href="#2-rdiscount" class="headerlink" title="2. rdiscount"></a>2. rdiscount</h3><p>markdown 使用的模板，通过 rubygems 安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ gem install rdiscount</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-calibre"><a href="#3-calibre" class="headerlink" title="3. calibre"></a>3. calibre</h3><p><a href="http://en.wikipedia.org/wiki/Calibre_(software)" target="_blank">calibre</a> 是一款开源的电子书管理软件，生成 epub 或 mobi 格式需要安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ sudo apt-get install calibre</span><br><span class="line"></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="4-pandoc，xelatex"><a href="#4-pandoc，xelatex" class="headerlink" title="4. pandoc，xelatex"></a>4. pandoc，xelatex</h3><p>生成 pdf 格式需要安装这两个依赖，pandoc 安装比较简单，直接apt；安装 xelatex 则需要首先安装 texlive-xetex，然后打上 LaTeX::Driver 补丁（参考了这个网址 <a href="http://ledgersmb.org/faq/xelatex" target="_blank">Frequently Asked Questions - XeLaTeX</a> ）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ sudo apt-get install pandoc</span><br><span class="line">$ sudo apt-get install texlive-xetex texlive-latex-base texlive-latex-extra</span><br><span class="line">$ sudo apt-get install liblatex-&#123;driver,encode,table&#125;-perl</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-install-font"><a href="#5-install-font" class="headerlink" title="5. install font"></a>5. install font</h3><p>生成 pdf 时读取 latex/config.yml 中的配置，使用过程中可能会出现一些字体不存在的错误。比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">./makepdf en</span><br><span class="line">en:</span><br><span class="line">        Parsing markdown... <span class="keyword">done</span></span><br><span class="line">        Creating main.tex <span class="keyword">for</span> en... <span class="keyword">done</span></span><br><span class="line">        Running XeTeX:</span><br><span class="line">                Pass 1... failed with:</span><br><span class="line">                        ! I can<span class="string">&#x27;t find file `Helvetica&#x27;</span>.</span><br><span class="line">        Consider running this again with --debug.</span><br></pre></td></tr></table></figure><p>这个错误的原因是 Ubuntu 系统中 Helvetica 字体名字为 Nimbus Sans L，修改 confi.yml 文件default 节点下的 font 值即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ fc-match <span class="string">&quot;Helvetica Neue&quot;</span></span><br><span class="line">DejaVuSans.ttf: <span class="string">&quot;DejaVu Sans&quot;</span> <span class="string">&quot;Book&quot;</span></span><br><span class="line">$ fc-match <span class="string">&quot;Helvetica&quot;</span></span><br><span class="line">n019003l.pfb: <span class="string">&quot;Nimbus Sans L&quot;</span> <span class="string">&quot;Regular&quot;</span></span><br></pre></td></tr></table></figure><p>生成中文pdf时同样遇到了中文字体不存在的情况，默认的配置文件使用的是 AR PL UMing CN 和 AR PL UKai CN，直接安装即可。但是我个人感觉 AR PL UMing CN 字体太细瘦，换成了文泉驿微米黑字体，圆润多了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ttf-arphic-ukai    <span class="comment"># &quot;AR PL UKai&quot; 文鼎PL中楷</span></span><br><span class="line">sudo apt-get install ttf-arphic-uming<span class="comment"># &quot;AR PL UMing&quot; 文鼎PL细上海宋</span></span><br><span class="line">sudo apt-get install ttf-wqy-microhei<span class="comment"># &quot;WenQuanYi Micro Hei&quot; 文泉驿微米黑</span></span><br></pre></td></tr></table></figure><h2 id="make"><a href="#make" class="headerlink" title="make"></a>make</h2><p>最后一步，生成电子书，好书一本，细细品读，Enjoy！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ./makeebooks en<span class="comment"># 默认生成mobi格式，en英文</span></span><br><span class="line">$ <span class="built_in">export</span> FORMAT=epub<span class="comment"># 设置FORMAT为epub，生成epub格式</span></span><br><span class="line">$ ./makeebooks zh<span class="comment"># 生成epub格式，zh中文</span></span><br><span class="line">$ ./makepdfs zh<span class="comment"># 生成pdf</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Pro Git 是一本用来学习 git 使用很不错的书，从 &lt;a href=&quot;https://github.com/progit/progit&quot; target=&quot;_blank&quot;&gt;progit&lt;/a&gt; 这个开源项目可以获得这本书的全部内容，下边介绍在 Ubuntu Server 12.04 环境下制作电子书的过程。&lt;/p&gt;
&lt;h2 id=&quot;安装依赖&quot;&gt;&lt;a href=&quot;#安装依赖&quot; class=&quot;headerlink&quot; title=&quot;安装依赖&quot;&gt;&lt;/a&gt;安装依赖&lt;/h2&gt;&lt;h3 id=&quot;1-ruby-rubygems&quot;&gt;&lt;a href=&quot;#1-ruby-rubygems&quot; class=&quot;headerlink&quot; title=&quot;1. ruby, rubygems&quot;&gt;&lt;/a&gt;1. ruby, rubygems&lt;/h3&gt;&lt;p&gt;参考 Ruby-China 的 &lt;a href=&quot;http://ruby-china.org/wiki/install-rails-on-ubuntu-12-04-server&quot; target=&quot;_blank&quot;&gt;wiki&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-rdiscount&quot;&gt;&lt;a href=&quot;#2-rdiscount&quot; class=&quot;headerlink&quot; title=&quot;2. rdiscount&quot;&gt;&lt;/a&gt;2. rdiscount&lt;/h3&gt;&lt;p&gt;markdown 使用的模板，通过 rubygems 安装&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ gem install rdiscount&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;3-calibre&quot;&gt;&lt;a href=&quot;#3-calibre&quot; class=&quot;headerlink&quot; title=&quot;3. calibre&quot;&gt;&lt;/a&gt;3. calibre&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Calibre_(software)&quot; target=&quot;_blank&quot;&gt;calibre&lt;/a&gt; 是一款开源的电子书管理软件，生成 epub 或 mobi 格式需要安装。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo apt-get install calibre&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="program" scheme="http://amyangfei.me/categories/program/"/>
    
    
  </entry>
  
  <entry>
    <title>APScheduler 源码阅读笔记</title>
    <link href="http://amyangfei.me/2013/11/06/apscheduler-source-analyse/"/>
    <id>http://amyangfei.me/2013/11/06/apscheduler-source-analyse/</id>
    <published>2013-11-06T00:00:00.000Z</published>
    <updated>2020-12-13T07:04:18.569Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>APScheduler 是由 python 实现的一个轻量级任务调度器，它可以按照一定间隔（IntervalTrigger）、指定时间（2.1中的SimpleTrigger/3.0中的DateTrigger）或者以类似 cron（CronTrigger） 的形式触发待执行任务（即调用函数或者调用 python 的 callable 对象）。现在 pypi 上的稳定版是 <a href="https://pypi.python.org/pypi/APScheduler/2.1.1" target="_blank">APScheduler 2.1.1</a>，3.0 版本在 class Scheduler 中移除了针对不同 trigger 的 add_trigger_job() 接口，统一为 add_job()，但是底层实现变化不大。我主要看了 2.1.1 的代码。代码很简洁，加起来一共2049行。</p><h3 id="模块组织"><a href="#模块组织" class="headerlink" title="模块组织"></a>模块组织</h3><ul><li><p><strong>Scheduler</strong>  调度器的核心部分，负责对 job 的管理和调度，用户使用添加/移除任务，启动调度器都通过 Scheduler 提供的接口完成。</p></li><li><p><strong>Job</strong>  封装了需要调度的任务，每一个 Job 实例是在 Scheduler 添加 job 时被初始化，具体的初始化参数决定了调度被触发的形式（3类不同的trigger）。</p></li><li><p><strong>Trigger</strong>  包含 SimpleTrigger，IntervalTrigger和 CronTrigger 三个类。Trigger 的作用就是计算下一次触发任务的时间。</p></li><li><p><strong>JobStore</strong>  抽象基类，针对任务存储的介质有多个实现，包括基于内存（RAMJobStore）、使用shelve的简单持久化存储（ShelveJobStore）、使用数据库存储（RedisJobStore，MongoDBJobStore）等。如果不指定参数默认使用 RAMJobStore，使用持久化的 JobStore 的目的是在 Scheduler 重启之后能够恢复原有的任务调度。</p></li></ul><h3 id="底层实现"><a href="#底层实现" class="headerlink" title="底层实现"></a>底层实现</h3><p>从分析 Scheduler 类入手，首先看项目中自带的example：</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> apscheduler.scheduler <span class="keyword">import</span> Scheduler</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tick</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;Tick! The time is: %s&#x27;</span> % datetime.now())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    scheduler = Scheduler(standalone=<span class="literal">True</span>)</span><br><span class="line">    scheduler.add_interval_job(tick, seconds=<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">&#x27;Press Ctrl+C to exit&#x27;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        scheduler.start()</span><br><span class="line">    <span class="keyword">except</span> (KeyboardInterrupt, SystemExit):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上边代码的最核心的三行就是初始化Scheduler，添加以interval为触发的 job 和启动scheduler。这也是使用APScheduler 最基本也最主要的方式。</p><p>初始化 Scheduler 有很多参数可以选择（详细可以参考 <a href="http://apscheduler.readthedocs.org/en/v2.1.0/#scheduler-configuration-options" target="_blank">scheduler-configuration-options</a>），这里简单介绍 standalone 和 daemonic 两个参数。standalone 设置为 False，那么 scheduler 将会以 embedded 模式运行，该模式下调度器会在一个新的线程中运行调度循环(_main_loop)；如果 standlone 设置为True，那么 scheduler 会阻塞当前线程，执行调度循环，直到不再有调度任务后返回，被阻塞的线程继续运行。daemonic 即是否以守护线程运行 scheduler，与python 守护线程的效果一致，如果 daemonic 设置为 False，显然该参数在 embedded 模式（standalone==False）下才有效果。Scheduler 默认的运行参数是 standalone == False, daemonic == True，即以 embedded 模式的守护线程中运行调度循环。</p><p>start 是启动 scheduler 的方法，如下所示。代码很简洁，启动前读取所有 job_store 中pending job（pending job 是 scheduler 未启动前添加的job），如果为 standalone 模式，会直接进入 _main_loop 调度循环，否则在新的线程中运行调度循环。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">if</span> self.running:</span><br><span class="line">        <span class="keyword">raise</span> SchedulerAlreadyRunningError</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Create a RAMJobStore as the default if there is no default job store</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="string">&#x27;default&#x27;</span> <span class="keyword">in</span> self._jobstores:</span><br><span class="line">        self.add_jobstore(RAMJobStore(), <span class="string">&#x27;default&#x27;</span>, <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Schedule all pending jobs</span></span><br><span class="line">    <span class="keyword">for</span> job, jobstore <span class="keyword">in</span> self._pending_jobs:</span><br><span class="line">        self._real_add_job(job, jobstore, <span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">del</span> self._pending_jobs[:]</span><br><span class="line"></span><br><span class="line">    self._stopped = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> self.standalone:</span><br><span class="line">        self._main_loop()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        self._thread = Thread(target=self._main_loop, name=<span class="string">&#x27;APScheduler&#x27;</span>)</span><br><span class="line">        self._thread.setDaemon(self.daemonic)</span><br><span class="line">        self._thread.start()</span><br></pre></td></tr></table></figure><p>_main_loop 就是调度循环，主体就是一个 while 循环。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> self._stopped:</span><br><span class="line">    logger.debug(<span class="string">&#x27;Looking for jobs to run&#x27;</span>)</span><br><span class="line">    now = datetime.now()</span><br><span class="line">    next_wakeup_time = self._process_jobs(now)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Sleep until the next job is scheduled to be run, a new job is added or the scheduler is stopped</span></span><br><span class="line">    <span class="keyword">if</span> next_wakeup_time <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        wait_seconds = time_difference(next_wakeup_time, now)</span><br><span class="line">        self._wakeup.wait(wait_seconds)</span><br><span class="line">        self._wakeup.clear()</span><br><span class="line">    <span class="keyword">elif</span> self.standalone:</span><br><span class="line">        self.shutdown()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        self._wakeup.wait()</span><br><span class="line">        self._wakeup.clear()</span><br></pre></td></tr></table></figure><p>进入循环后首先调用 <code>_process_jobs</code> 处理任务，以此处理不同 job_store 中的 每一个 job。在处理 job 过程中首先通过 <code>get_run_times</code> 获取 run_times（<code>get_run_times</code> 很有趣，它获取在 next_run_time 和 now 之间所有需要进行任务调度的时间点，之所以这样做的原因是 APScheduler 允许设定一个 misfire_grace_time 时间，也就是事件执行的延迟时间，因为有很多原因会导致计划调度不能准确在设定好的时间执行。）<code>_process_jobs</code> 处理很简单，将 job 的执行调度交给 scheduler 的线程池，针对每一个 job 的触发会开启一个新的线程（一个疑问：这个线程设置了 <code>t.setDaemon(True)</code>，但是文档上却说”Jobs are always executed in non-daemonic threads.”）来执行，而实际的任务执行发生在 Scheduler 的 <code>_run_job</code> 方法中。</p><p><code>_process_jobs</code> 会返回下次执行调度的时间，调度循环会根据返回值进行相应的处理，wait 指定时间、或一直 wait 等待事件通知唤醒、或退出循环。调度循环的阻塞和唤醒是由 python 原生 Event 的 wait 和 set 来实现的，阻塞结束的方式有两种：一是 wait(wait_seconds) 超时；另一种是在 scheduler 处于 running 状态添加新的任务，添加新任务过程中会自动调用 set()唤醒 event。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>总体而言 APScheduler 以 <a href="http://docs.python.org/2/library/threading.html#module-threading" target="_blank">threading</a> 模块为基础实现，主要用到了 threading.Event 和 threading.Thread，用到的 ThreadPool 是对 threading.Thread 的简单封装。真是因为此所以 APScheduler 有 “No (hard) external dependencies” 和 “Thread-safe API” 这两项优点。但同时存在一个问题，由于 <a href="https://wiki.python.org/moin/GlobalInterpreterLock" target="_blank">GIL</a> 的存在，任务的执行一定会阻塞主线程，所以如果任务执行时间较长、有更多异步调度的需求，那么可能就会用到另外一个更强大的框架：<a href="http://www.celeryproject.org/" target="_blank">Celery</a>。 Celery 毕竟是一个分布式的任务队列，相比而言 APScheduler 的特点是轻巧，一言以蔽之即: APScheduler is a light but powerful in-process task scheduler.</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;APScheduler 是由 python 实现的一个轻量级任务调度器，它可以按照一定间隔（IntervalTrigger）、指定时间（2.1中的SimpleTrigger/3.0中的DateTrigger）或者以类似 cron（CronTrigger） 的形式触发待执行任务（即调用函数或者调用 python 的 callable 对象）。现在 pypi 上的稳定版是 &lt;a href=&quot;https://pypi.python.org/pypi/APScheduler/2.1.1&quot; target=&quot;_blank&quot;&gt;APScheduler 2.1.1&lt;/a&gt;，3.0 版本在 class Scheduler 中移除了针对不同 trigger 的 add_trigger_job() 接口，统一为 add_job()，但是底层实现变化不大。我主要看了 2.1.1 的代码。代码很简洁，加起来一共2049行。&lt;/p&gt;
&lt;h3 id=&quot;模块组织&quot;&gt;&lt;a href=&quot;#模块组织&quot; class=&quot;headerlink&quot; title=&quot;模块组织&quot;&gt;&lt;/a&gt;模块组织&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Scheduler&lt;/strong&gt;  调度器的核心部分，负责对 job 的管理和调度，用户使用添加/移除任务，启动调度器都通过 Scheduler 提供的接口完成。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Job&lt;/strong&gt;  封装了需要调度的任务，每一个 Job 实例是在 Scheduler 添加 job 时被初始化，具体的初始化参数决定了调度被触发的形式（3类不同的trigger）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Trigger&lt;/strong&gt;  包含 SimpleTrigger，IntervalTrigger和 CronTrigger 三个类。Trigger 的作用就是计算下一次触发任务的时间。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;JobStore&lt;/strong&gt;  抽象基类，针对任务存储的介质有多个实现，包括基于内存（RAMJobStore）、使用shelve的简单持久化存储（ShelveJobStore）、使用数据库存储（RedisJobStore，MongoDBJobStore）等。如果不指定参数默认使用 RAMJobStore，使用持久化的 JobStore 的目的是在 Scheduler 重启之后能够恢复原有的任务调度。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;底层实现&quot;&gt;&lt;a href=&quot;#底层实现&quot; class=&quot;headerlink&quot; title=&quot;底层实现&quot;&gt;&lt;/a&gt;底层实现&lt;/h3&gt;&lt;p&gt;从分析 Scheduler 类入手，首先看项目中自带的example：&lt;/p&gt;</summary>
    
    
    
    <category term="program" scheme="http://amyangfei.me/categories/program/"/>
    
    
    <category term="python" scheme="http://amyangfei.me/tags/python/"/>
    
    <category term="task scheduler" scheme="http://amyangfei.me/tags/task-scheduler/"/>
    
  </entry>
  
  <entry>
    <title>xenserver 使用小结</title>
    <link href="http://amyangfei.me/2013/09/06/xenserver-use-tip/"/>
    <id>http://amyangfei.me/2013/09/06/xenserver-use-tip/</id>
    <published>2013-09-06T00:00:00.000Z</published>
    <updated>2020-12-13T07:05:26.267Z</updated>
    
    <content type="html"><![CDATA[<p>手头四台服务器，准备搭建一个小的云平台，了解了几种不同的方案，包括Vmware Esxi，Xen，OpenStack 等。先把各种方法都试一试，然后确定一个具体实施。之前有使用过 Vmware ESXi，虽说 ESXi 可以免费使用，但是 Vmware 浓厚的商业气息让我有种道不同不相为谋的感觉。XenServer 最近有开源，于是昨天花了一个下午尝试了一下。</p><h3 id="安装-XenServer-和-XenCenter"><a href="#安装-XenServer-和-XenCenter" class="headerlink" title="安装 XenServer 和 XenCenter"></a>安装 XenServer 和 XenCenter</h3><p>首先去官网下载 XenServer 的镜像文件，我下载了 6.2.0 版本。XenServer 本身其实就是一个 Linux 操作系统，于是服务器直接通过启动 bios 引导安装 XenServer，安装过程中配置好 root 的密码以及网络信息，这样就可以通过管理工具管理 XenServer 了。</p><p>使用的管理工具是 Windows 版的，貌似有 Linux 版本的<a href="http://sourceforge.net/projects/openxenceter/" target="_blank">OpenXenCenter</a>，我没有试验。进入 XenCenter，服务器是四网卡，现在接了0，2号网卡。2号网卡连接外网，配有有一个 166.111.xx.yy的 ip。0号网卡接内部网络，ip 设为 192.168.10.254。配置如下图：</p><a id="more"></a><p><img src="/images/20130906_server_network.png"></p><h3 id="安装一台虚拟机"><a href="#安装一台虚拟机" class="headerlink" title="安装一台虚拟机"></a>安装一台虚拟机</h3><p>接下来安装一台虚拟机。可以选择的操作系统比较多，比如选择 Ubuntu Server 12.04，需要注意的是加载虚拟镜像的方法，有两大类：一类是 Install from ISO library or DVD drive，另一类是 Boot from network。第二类我没有试验，第一类又分两种，一种是从光驱加载镜像，由于我在远程操作所以选择了另一种 ISO Library。建立 ISO Library 的方法是在左侧导航选择目标 xenserver 建立 New SR，然后选择 windwos 的文件共享或者是 NFS。选择好安装虚拟机时就可以找到镜像文件了。然后一步步配置好参数，开始运行，继续就是熟悉的 Ubuntu 安装过程。</p><h3 id="通过-iptables-进行-NAT"><a href="#通过-iptables-进行-NAT" class="headerlink" title="通过 iptables 进行 NAT"></a>通过 iptables 进行 NAT</h3><p>安装好一台虚拟机后进行网络配置，首先在 XenCenter 中激活安装虚拟机的0号网卡，然后到 Console 界面配置 ip，比如设定 ip 为192.168.10.11，网关设为 192.168.10.254，OK。接下类需要到 XenServer 中配置 iptables 的 NAT 转发。<a href="http://blog.tangjianwei.com/2009/01/12/my-understanding-about-dnat-and-snat-in-iptables/" target="_blank"> iptables中DNAT与SNAT的理解 </a>这篇文章中作者对 iptables NAT 的原理解释比较清楚，其实无论是 NAT 穿透还是端口转发，本质都是在 iptables 处对 ip 数据包的源地址和目标地址的一定规则的转换。我配置了3条 iptables 规则，实现了内部虚拟机可以正常访问外网，同时外网的主机可以通过10022这个端口 ssh 访问内部虚拟机。其实第2条规则被第3条规则包含，可以去掉。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 端口重定向</span></span><br><span class="line">$ iptables -t nat -A PREROUTING -d 166.111.xx.yy -p tcp --dport 10022 -j DNAT --to 192.168.10.11:22</span><br><span class="line">$ iptables -t nat -A POSTROUTING -d 192.168.10.11 -p tcp --dport 22 -j SNAT --to 166.111.xx.yy</span><br><span class="line"></span><br><span class="line"><span class="comment"># NAT代理上网</span></span><br><span class="line">$ iptables -t nat -A POSTROUTING -j SNAT --to 166.111.xx.yy</span><br></pre></td></tr></table></figure><p>总体过程比较顺利，配置 iptables NAT 折腾了一小会儿。于是，have fun, enjoy it ~</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;手头四台服务器，准备搭建一个小的云平台，了解了几种不同的方案，包括Vmware Esxi，Xen，OpenStack 等。先把各种方法都试一试，然后确定一个具体实施。之前有使用过 Vmware ESXi，虽说 ESXi 可以免费使用，但是 Vmware 浓厚的商业气息让我有种道不同不相为谋的感觉。XenServer 最近有开源，于是昨天花了一个下午尝试了一下。&lt;/p&gt;
&lt;h3 id=&quot;安装-XenServer-和-XenCenter&quot;&gt;&lt;a href=&quot;#安装-XenServer-和-XenCenter&quot; class=&quot;headerlink&quot; title=&quot;安装 XenServer 和 XenCenter&quot;&gt;&lt;/a&gt;安装 XenServer 和 XenCenter&lt;/h3&gt;&lt;p&gt;首先去官网下载 XenServer 的镜像文件，我下载了 6.2.0 版本。XenServer 本身其实就是一个 Linux 操作系统，于是服务器直接通过启动 bios 引导安装 XenServer，安装过程中配置好 root 的密码以及网络信息，这样就可以通过管理工具管理 XenServer 了。&lt;/p&gt;
&lt;p&gt;使用的管理工具是 Windows 版的，貌似有 Linux 版本的&lt;a href=&quot;http://sourceforge.net/projects/openxenceter/&quot; target=&quot;_blank&quot;&gt;OpenXenCenter&lt;/a&gt;，我没有试验。进入 XenCenter，服务器是四网卡，现在接了0，2号网卡。2号网卡连接外网，配有有一个 166.111.xx.yy的 ip。0号网卡接内部网络，ip 设为 192.168.10.254。配置如下图：&lt;/p&gt;</summary>
    
    
    
    <category term="program" scheme="http://amyangfei.me/categories/program/"/>
    
    
    <category term="virtualization" scheme="http://amyangfei.me/tags/virtualization/"/>
    
  </entry>
  
  <entry>
    <title>使用 Tornado 进行异步编程</title>
    <link href="http://amyangfei.me/2013/06/17/asynchronous-programming-with-tornado/"/>
    <id>http://amyangfei.me/2013/06/17/asynchronous-programming-with-tornado/</id>
    <published>2013-06-17T00:00:00.000Z</published>
    <updated>2020-12-13T07:04:23.610Z</updated>
    
    <content type="html"><![CDATA[<p>翻译自：<a href="http://lbolla.info/blog/2012/10/03/asynchronous-programming-with-tornado" target="_blank">Asynchronous programming with Tornado</a></p><p>对于初学者来说异步编程很令人迷惑，因此我觉得有必要介绍一些有用的基本概念来帮助初学者避免一些常见的陷阱。如果希望理解通用的异步编程模型，可以查看以下这些网络资源，<a href="http://cs.brown.edu/courses/cs196-5/f12/handouts/async.pdf" target="_blank">Introduction to Asynchronous Programming</a>，<a href="http://krondo.com/?page_id=1327" target="_blank">Twisted Introduction</a>。在这篇文章中我将会着眼于如何使用 Tornado 进行异步编程。</p><p>来自Tornado主页的一段话：</p><blockquote><p>FriendFeed’s web server is a relatively simple, non-blocking web server written in Python. The FriendFeed application is written using a web framework that looks a bit like web.py or Google’s webapp, but with additional tools and optimizations to take advantage of the non-blocking web server and tools. Tornado is an open source version of this web server and some of the tools we use most often at FriendFeed. The framework is distinct from most mainstream web server frameworks (and certainly most Python frameworks) because it is non-blocking and reasonably fast. Because it is non-blocking and uses epoll or kqueue, it can handle thousands of simultaneous standing connections, which means the framework is ideal for real-time web services. We built the web server specifically to handle FriendFeed’s real-time features every active user of FriendFeed maintains an open connection to the FriendFeed servers. (For more information on scaling servers to support thousands of clients, see The C10K problem.)</p></blockquote><p>对于初学者首先需要认清的是自己是否真的需要异步操作。异步编程比同步编程复杂得多，因此有人说：异步编程是不适合人类大脑的。</p><a id="more"></a><p>如果你的应用需要监控一些资源并且当这些资源的状态发生变化时需要采取一定的操作，那么你需要使用异步编程。比如对于一个 web 服务器，如果没有请求到达，那么它处于空闲状态；当有请求通过 socket 到达 web 服务器它就需要对这条请求进行一定的处理。另外一种需要异步编程的情况比如一个应用需要定期的执行一些任务或者延迟一段时间再执行代码。可以使用多线程/进程来控制多个任务的并发执行，那样编程模型也会迅速变得复杂起来。</p><p>第二步是需要确认你想要的操作是否能够进行异步操作。不幸的是在 Tornado 中，并非所有的功能都可以异步执行。</p><p>Tornado是单线程运行的（尽管在实际应用中，它支持多线程模式），因此阻塞操作会阻塞整个服务器。这意味着一个阻塞操作将会阻止系统执行下一个等待执行的任务。任务的调度通过<a href="http://www.tornadoweb.org/en/stable/ioloop.html" target="_blank"> IOLoop </a>完成，IOLoop运行在唯一的可用的线程中。</p><p>下边是一个错误使用 IOLoop 的例子（译者注：这段代码与原文不一样，是按照原文的描述修改的）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> tornado.ioloop <span class="keyword">import</span> IOLoop</span><br><span class="line"><span class="keyword">from</span> tornado <span class="keyword">import</span> gen</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@gen.engine</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;sleeping&#x27;</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;awake!&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># Note that now code is executed &quot;concurrently&quot;</span></span><br><span class="line">    IOLoop.instance().add_callback(f)</span><br><span class="line">    IOLoop.instance().add_callback(f)</span><br><span class="line">    IOLoop.instance().start()</span><br></pre></td></tr></table></figure><p>注意到 blocking_call（译者注：函数f，不知道为什么原文作者说这是blocking_call） 被正确地调用，但是由于它被 time.sleep 阻塞，会阻止接下来任务（第二次调用该函数）的执行。只有当第一次调用结束后，这个函数才会被IOLoop 调度第二次调用。因此输出是这样的一个序列（“sleeping”, “awake!”, “sleeping”, “awake!”）。</p><p>对比同样的代码，但是使用 time.sleep 的异步版本，例如 add_timeout：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Example of non-blocking sleep.</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> tornado.ioloop <span class="keyword">import</span> IOLoop</span><br><span class="line"><span class="keyword">from</span> tornado <span class="keyword">import</span> gen</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@gen.engine</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;sleeping&#x27;</span></span><br><span class="line">    <span class="keyword">yield</span> gen.Task(IOLoop.instance().add_timeout, time.time() + <span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;awake!&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># Note that now code is executed &quot;concurrently&quot;</span></span><br><span class="line">    IOLoop.instance().add_callback(f)</span><br><span class="line">    IOLoop.instance().add_callback(f)</span><br><span class="line">    IOLoop.instance().start()</span><br></pre></td></tr></table></figure><p>在这种情况下，函数 f 第一次被调用，会打印“sleeping”，然后它会在1秒之后向 IOLoop 请求继续执行。IOLoop 重获控制权，它会调度函数 f 的第二次调用，第二次调用首先打印“sleeping”，之后将控制权还给 IOLoop。1秒钟后 IOLoop 会在第一个函数挂起的位置继续执行并且打印“awake”。最后，第二次“awake”也会被打印。所以全部的打印序列为“sleeping”, “sleeping”, “awake!”, “awake!”。这两次函数调用是并发执行的（但不是<a href="http://stackoverflow.com/questions/1897993/difference-between-concurrent-programming-and-parallel-programming" target="_blank">并行</a>！）</p><p>现在我会听到你提问：“我如何创建一个函数并且异步地执行它？”在 Tornado 中，每一个有“callback”参数的函数都可以使用 “gen.engine.Task（译者注：应该是gen.Task）”进行异步操作。但是要注意：使用 Task 并不意味着就一定是异步执行！一个事实是函数会被调度获得控制权并执行，执行后任何传递给 callback 的值都会在 Task 中返回。看下边的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> tornado.ioloop <span class="keyword">import</span> IOLoop</span><br><span class="line"><span class="keyword">from</span> tornado <span class="keyword">import</span> gen</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_function</span>(<span class="params">callback</span>):</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;do some work&#x27;</span></span><br><span class="line">    <span class="comment"># Note: this line will block!</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    callback(<span class="number">123</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@gen.engine</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;start&#x27;</span></span><br><span class="line">    <span class="comment"># Call my_function and return here as soon as &quot;callback&quot; is called.</span></span><br><span class="line">    <span class="comment"># &quot;result&quot; is whatever argument was passed to &quot;callback&quot; in &quot;my_function&quot;.</span></span><br><span class="line">    result = <span class="keyword">yield</span> gen.Task(my_function)</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;result is&#x27;</span>, result</span><br><span class="line">    IOLoop.instance().stop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    f()</span><br><span class="line">    IOLoop.instance().start()</span><br></pre></td></tr></table></figure><p>绝大多数初学者可能会这样写：Task(my_func)，然后认为 my_func 会自动被异步执行。事实上这并不是 Tornado 工作的原理，这是<a href="http://golang.org/" target="_blank"> Go </a>如何工作的！下边是我最后的建议(译者注：我觉得这是这篇文章最重要的建议)：</p><blockquote><p>** In a function that is going to be used “asynchronously”, only asynchronous libraries should be used. **</p></blockquote><p>就是说如果希望异步编程，那么一些阻塞的调用比如 time.sleep 或者 urllib2.urlopen 或者 db.query，它们需要替换成相应的异步版本。比如，IOLoop.add_timeout 是 time.sleep 的替换，AsyncHTTPClient.fetch 是 urllib2.urlopen 的替换等等。对于数据库查询，情况比较复杂，需要一些特定的异步查询驱动，比如对于 MongoDB 的<a href="http://blog.mongodb.org/post/30927719826/motor-asynchronous-driver-for-mongodb-and-python" target="_blank"> Motor </a>。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;翻译自：&lt;a href=&quot;http://lbolla.info/blog/2012/10/03/asynchronous-programming-with-tornado&quot; target=&quot;_blank&quot;&gt;Asynchronous programming with Tornado&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;对于初学者来说异步编程很令人迷惑，因此我觉得有必要介绍一些有用的基本概念来帮助初学者避免一些常见的陷阱。如果希望理解通用的异步编程模型，可以查看以下这些网络资源，&lt;a href=&quot;http://cs.brown.edu/courses/cs196-5/f12/handouts/async.pdf&quot; target=&quot;_blank&quot;&gt;Introduction to Asynchronous Programming&lt;/a&gt;，&lt;a href=&quot;http://krondo.com/?page_id=1327&quot; target=&quot;_blank&quot;&gt;Twisted Introduction&lt;/a&gt;。在这篇文章中我将会着眼于如何使用 Tornado 进行异步编程。&lt;/p&gt;
&lt;p&gt;来自Tornado主页的一段话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;FriendFeed’s web server is a relatively simple, non-blocking web server written in Python. The FriendFeed application is written using a web framework that looks a bit like web.py or Google’s webapp, but with additional tools and optimizations to take advantage of the non-blocking web server and tools. Tornado is an open source version of this web server and some of the tools we use most often at FriendFeed. The framework is distinct from most mainstream web server frameworks (and certainly most Python frameworks) because it is non-blocking and reasonably fast. Because it is non-blocking and uses epoll or kqueue, it can handle thousands of simultaneous standing connections, which means the framework is ideal for real-time web services. We built the web server specifically to handle FriendFeed’s real-time features every active user of FriendFeed maintains an open connection to the FriendFeed servers. (For more information on scaling servers to support thousands of clients, see The C10K problem.)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对于初学者首先需要认清的是自己是否真的需要异步操作。异步编程比同步编程复杂得多，因此有人说：异步编程是不适合人类大脑的。&lt;/p&gt;</summary>
    
    
    
    <category term="program" scheme="http://amyangfei.me/categories/program/"/>
    
    
    <category term="python" scheme="http://amyangfei.me/tags/python/"/>
    
    <category term="tornado" scheme="http://amyangfei.me/tags/tornado/"/>
    
    <category term="asynchronous programming" scheme="http://amyangfei.me/tags/asynchronous-programming/"/>
    
  </entry>
  
  <entry>
    <title>stl make_heap在llvm和g++下的不同实现</title>
    <link href="http://amyangfei.me/2013/05/05/stl-heap-llvm-gcc/"/>
    <id>http://amyangfei.me/2013/05/05/stl-heap-llvm-gcc/</id>
    <published>2013-05-05T00:00:00.000Z</published>
    <updated>2020-12-13T07:05:07.621Z</updated>
    
    <content type="html"><![CDATA[<p>先来看一段十分简单的使用stl的c++代码，</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; ++i)</span><br><span class="line">        vec.push_back(i);</span><br><span class="line">    make_heap(vec.begin(), vec.end());</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator iter = vec.begin(); iter != vec.end(); iter++) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *iter &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现在 xcode 中运行和在 mac terminal 中利用 g++ 编译运行结果不一样，分别为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xcode-default : 5 4 2 1 3</span><br><span class="line">terminal-g++  : 5 4 3 1 2</span><br></pre></td></tr></table></figure><a id="more"></a><p>建堆产生不同结果的原因很简单，即两次编译代码所使用的编译器不同，xcode中默认使用”Apple LLVM compiler”，在g++中使用的是”LLVM GCC”。而这两种不同编译器选择的STL实现方法是不一样的，LLVM默认选择”libc++(LLVM C++ standard library)”，而g++默认使用的是”libstdc++(GNU C++ standard library)”。</p><h3 id="libc-中的实现"><a href="#libc-中的实现" class="headerlink" title="libc++中的实现"></a>libc++中的实现</h3><p>在libc++中make_heap的实现如下所示，从代码中可以看出，通过 __last 这个随机访问的迭代器，从前向后遍历，调用 __push_heap_back 将数据依次插入到堆中。__push_heap_back 的实现是将新插入元素放在堆尾，然后针对这个元素使用 shift up 策略调整至合适位置。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Compare</span>, <span class="keyword">class</span> _<span class="title">RandomAccessIterator</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">__make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> iterator_traits&lt;_RandomAccessIterator&gt;::difference_type difference_type;</span><br><span class="line">    difference_type __n = __last - __first;</span><br><span class="line">    <span class="keyword">if</span> (__n &gt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        __last = __first;</span><br><span class="line">        ++__last;</span><br><span class="line">        <span class="keyword">for</span> (difference_type __i = <span class="number">1</span>; __i &lt; __n;)</span><br><span class="line">            __push_heap_back&lt;_Compare&gt;(__first, ++__last, __comp, ++__i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="libstdc-中的实现"><a href="#libstdc-中的实现" class="headerlink" title="libstdc++中的实现"></a>libstdc++中的实现</h3><p>在 libstdc++ 中 make_heap 首先将所有元素按照原顺序放入堆的存储结构，然后从最大的非叶子节点开始调整元素位置，即调用 __adjust_heap 操作，__adjust_heap 会自上向下依次选择每个子节点中较大的元素上升。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _RandomAccessIterator&gt;</span><br><span class="line">  <span class="keyword">void</span></span><br><span class="line">  make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> iterator_traits&lt;_RandomAccessIterator&gt;::value_type _ValueType;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> iterator_traits&lt;_RandomAccessIterator&gt;::difference_type _DistanceType;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// concept requirements</span></span><br><span class="line">    __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept&lt;_RandomAccessIterator&gt;)</span><br><span class="line">    __glibcxx_function_requires(_LessThanComparableConcept&lt;_ValueType&gt;)</span><br><span class="line">    __glibcxx_requires_valid_range(__first, __last);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (__last - __first &lt; <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> _DistanceType __len = __last - __first;</span><br><span class="line">    _DistanceType __parent = (__len - <span class="number">2</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">std</span>::__adjust_heap(__first, __parent, __len,</span><br><span class="line">               _ValueType(*(__first + __parent)));</span><br><span class="line">    <span class="keyword">if</span> (__parent == <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    __parent--;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>注：以上结果是在 OS X 10.8.4，Xcode4 下的测试结果。不同版本编译器结果会有不同。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;先来看一段十分简单的使用stl的c++代码，&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; vec;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; len = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;lt;= len; ++i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        vec.push_back(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    make_heap(vec.begin(), vec.end());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt;::iterator iter = vec.begin(); iter != vec.end(); iter++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; *iter &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;发现在 xcode 中运行和在 mac terminal 中利用 g++ 编译运行结果不一样，分别为：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;xcode-default : 5 4 2 1 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;terminal-g++  : 5 4 3 1 2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="program" scheme="http://amyangfei.me/categories/program/"/>
    
    
    <category term="c++" scheme="http://amyangfei.me/tags/c/"/>
    
    <category term="stl" scheme="http://amyangfei.me/tags/stl/"/>
    
    <category term="llvm" scheme="http://amyangfei.me/tags/llvm/"/>
    
  </entry>
  
  <entry>
    <title>tornado源码分析5</title>
    <link href="http://amyangfei.me/2013/03/01/tornado-source-analysis-5/"/>
    <id>http://amyangfei.me/2013/03/01/tornado-source-analysis-5/</id>
    <published>2013-03-01T00:00:00.000Z</published>
    <updated>2020-12-13T07:05:23.408Z</updated>
    
    <content type="html"><![CDATA[<p>Tornado的web框架在web.py中实现，主要包括RequestHandler类（本质为对http请求处理的封装）和Application类（是一些列请求处理的集合，构成的一个web-application，源代码注释不翻译更容易理解：A collection of request handlers that make up a web application）。</p><h3 id="RequestHandler分析"><a href="#RequestHandler分析" class="headerlink" title="RequestHandler分析"></a>RequestHandler分析</h3><p>RequestHandler提供了一个针对http请求处理的基类封装，方法比较多，主要有以下功能：</p><ol><li><p>提供了GET/HEAD/POST/DELETE/PATCH/PUT/OPTIONS等方法的功能接口，具体开发时RequestHandler的子类重写这些方法以支持不同需求的请求处理。</p></li><li><p>提供对http请求的处理方法，包括对headers，页面元素，cookie的处理。</p></li><li><p>提供对请求响应的一些列功能，包括redirect，write（将数据写入输出缓冲区），渲染模板（render, reander_string）等</p></li><li><p>其他的一些辅助功能，如结束请求/响应，刷新输出缓冲区，对用户授权相关处理等。</p></li></ol><a id="more"></a><h3 id="Application分析"><a href="#Application分析" class="headerlink" title="Application分析"></a>Application分析</h3><p>源代码中的注释写的非常好：A collection of request handlers that make up a web application. Instances of this class are <strong>callable</strong> and can be passed directly to HTTPServer to serve the application. 该类初始化的第一个参数接受一个(regexp, request_class)形式的列表，指定了针对不同URL请求所采取的处理方法，包括对静态文件请求的处理（web.StaticFileHandler）。Application类中实现 <a href="http://docs.python.org/2/reference/datamodel.html#object.__call__" target="_blank">__call__</a> 函数，这样该类就成为可调用的对象，由HTTPServer来进行调用。比如下边是httpserver.py中HTTPConection类的代码，该处request_callback即为Application对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_on_headers</span>(<span class="params">self, data</span>):</span></span><br><span class="line"><span class="comment"># some codes...</span></span><br><span class="line">self.request_callback(self._request)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>__call__函数会遍历Application的handlers列表，匹配到相应的URL后通过handler._execute进行相应处理；如果没有匹配的URL，则会调用ErrorHandler。</p><p>在Application初始时有一个debug参数，当debug=True时，运行程序时当有代码、模块发生修改，程序会自动重新加载，即实现了auto-reload功能。该功能在autoreload.py文件中实现，是否需要reload的检查在每次接收到http请求时进行，基本原理是检查每一个sys.modules以及_watched_files所包含的模块在程序中所保存的最近修改时间和文件系统中的最近修改时间是否一致，如果不一致，则整个程序重新加载。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_reload_on_update</span>(<span class="params">modify_times</span>):</span></span><br><span class="line"><span class="keyword">for</span> module <span class="keyword">in</span> sys.modules.values():</span><br><span class="line">        <span class="comment"># module test and some path handles</span></span><br><span class="line">        _check_file(modify_times, path)</span><br><span class="line">    <span class="keyword">for</span> path <span class="keyword">in</span> _watched_files:</span><br><span class="line">        _check_file(modify_times, path)</span><br></pre></td></tr></table></figure><p>Tornado的autoreload模块提供了一个对外的main接口，可以通过下边的方法实现运行test.py程序运行的auto-reload。但是测试了一下，功能有限，相比于django的autorelaod模块（具有较好的封装和较完善的功能）还是有一定的差距。最主要的原因是Tornado中的实现耦合了一些ioloop的功能，因而autoreload不是一个可独立的模块。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tornado</span></span><br><span class="line">python -m tornado.autoreload test.py [args...]</span><br><span class="line"></span><br><span class="line"><span class="comment"># django</span></span><br><span class="line">from django.utils import autoreload</span><br><span class="line">autoreload.main(your-main-func)</span><br></pre></td></tr></table></figure><h3 id="asynchronous方法"><a href="#asynchronous方法" class="headerlink" title="asynchronous方法"></a>asynchronous方法</h3><p>该方法通常被用为请求处理函数的decorator，以实现异步操作，被@asynchronous修饰后的请求处理为长连接，在调用self.finish之前会一直处于连接等待状态。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><a href="/2013/01/29/tornado-source-analysis-2/" target="_blank">tornado源码分析2</a> 一文中给出了一张tornado httpserver的工作流程图，调用Application发生在HTTPConnection大方框的handle_request椭圆中。那篇文章里使用的是一个简单的请求处理函数handle_request，无论是handle_request还是application，其本质是一个函数（可调用的对象），当服务器接收连接并读取http请求header之后进行调用，进行请求处理和应答。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http_server = httpserver.HTTPServer(handle_request)</span><br><span class="line">http_server = httpserver.HTTPServer(application)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Tornado的web框架在web.py中实现，主要包括RequestHandler类（本质为对http请求处理的封装）和Application类（是一些列请求处理的集合，构成的一个web-application，源代码注释不翻译更容易理解：A collection of request handlers that make up a web application）。&lt;/p&gt;
&lt;h3 id=&quot;RequestHandler分析&quot;&gt;&lt;a href=&quot;#RequestHandler分析&quot; class=&quot;headerlink&quot; title=&quot;RequestHandler分析&quot;&gt;&lt;/a&gt;RequestHandler分析&lt;/h3&gt;&lt;p&gt;RequestHandler提供了一个针对http请求处理的基类封装，方法比较多，主要有以下功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;提供了GET/HEAD/POST/DELETE/PATCH/PUT/OPTIONS等方法的功能接口，具体开发时RequestHandler的子类重写这些方法以支持不同需求的请求处理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;提供对http请求的处理方法，包括对headers，页面元素，cookie的处理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;提供对请求响应的一些列功能，包括redirect，write（将数据写入输出缓冲区），渲染模板（render, reander_string）等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;其他的一些辅助功能，如结束请求/响应，刷新输出缓冲区，对用户授权相关处理等。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="program" scheme="http://amyangfei.me/categories/program/"/>
    
    
    <category term="python" scheme="http://amyangfei.me/tags/python/"/>
    
    <category term="tornado" scheme="http://amyangfei.me/tags/tornado/"/>
    
    <category term="web framework" scheme="http://amyangfei.me/tags/web-framework/"/>
    
  </entry>
  
  <entry>
    <title>Android运行脚本与定时工具</title>
    <link href="http://amyangfei.me/2013/02/08/android-taskscheduler-and-scripting/"/>
    <id>http://amyangfei.me/2013/02/08/android-taskscheduler-and-scripting/</id>
    <published>2013-02-08T00:00:00.000Z</published>
    <updated>2020-12-13T07:04:14.637Z</updated>
    
    <content type="html"><![CDATA[<p>用惯了crontab，希望在自己的Android手机上完成定时执行一些脚本的任务。google一下找到了 <a href="http://i55m411.appspot.com/?p=594004" target="_blank">android应用实现定时打电话</a> 这样一篇文章，正好满足我的需求。下面做一个简单的总结。</p><h3 id="安装的软件"><a href="#安装的软件" class="headerlink" title="安装的软件"></a>安装的软件</h3><ul><li><p><a href="http://code.google.com/p/android-scripting" target="_blank">SL4A(Scripting Layer for Android)</a>，Andriod系统下运行脚本的环境，可以在终端、后台或Locale中运行，现阶段支持Python, Perl, JRuby, Lua, BeanShell, JavaScript, Tcl和shell脚本。</p></li><li><p><a href="http://code.google.com/p/android-scripting/downloads/detail?name=PythonForAndroid_r4.apk&can=2" target="_blank">Py4A</a>，SL4A的python插件，安装之后就可以运行python脚本。</p></li><li><p><a href="https://play.google.com/store/apps/details?id=org.androidideas.taskbomb" target="_blank">TaskBomb task scheduler</a>，一个可以执行计划任务的app，类似于Unix中的crontab。</p></li><li><p><a href="https://play.google.com/store/apps/details?id=org.androidideas.scriptlauncher" target="_blank">SL4A Script Launcher</a>，TaskBomb可以通过此app执行SL4A脚本。</p></li></ul><a id="more"></a><h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><ul><li><p>安装Py4A后进入程序，点击最上边的Install会自动下载Python运行所需要的类库。</p></li><li><p>进入SL4A会看到在SL4A程序Scripts目录下的脚本，可以在terminal或后台运行这些脚本；在SL4A中可以添加、修改、删除脚本程序，使用方法很简单，不详细说明。</p></li><li><p>需要注意的是Py4A支持的是python2.6，最新的python-for-android的项目地址已经在 <a href="http://code.google.com/p/python-for-android/" target="_blank">这里</a> 。Py4A不仅支持python的原生API，同时可以很方便的调用Android的系统API，比如可以使用下边很简单的代码向目标手机发送短信。详细可参考 <a href="http://code.google.com/p/android-scripting/wiki/ApiReference" target="_blank">ApiReference</a>。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android</span><br><span class="line"></span><br><span class="line">droid = android.Android()</span><br><span class="line">droid.smsSend(<span class="string">&#x27;15120000xxx&#x27;</span>, <span class="string">&#x27;this is an sms auto sent by Py4A.&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>最后这部分就是与文章内容不相关了。是一个虾米音乐自动签到的程序。需要注意的就是登录时一定要将headers中的User-Agent修改为浏览器的User-Agent，签到的post请求需要修改headers中的User-Agent和Referer地址。其他就没有什么了（突然想到和某只喵喵的比赛是不是可以拿TaskBomb+SL4A作弊），各位看官求轻拍，捂面。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib2, urllib</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">email, password</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cookies = urllib2.HTTPCookieProcessor()</span><br><span class="line">        opener = urllib2.build_opener(cookies)</span><br><span class="line">        urllib2.install_opener(opener)</span><br><span class="line">        params = &#123;<span class="string">&#x27;email&#x27;</span>:email, <span class="string">&#x27;password&#x27;</span>:password, <span class="string">&#x27;submit&#x27;</span>:<span class="string">&#x27;登 录&#x27;</span>&#125;</span><br><span class="line">        loginUrl = <span class="string">&#x27;http://www.xiami.com/member/login&#x27;</span></span><br><span class="line"></span><br><span class="line">        headers = &#123;</span><br><span class="line">            <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2) AppleWebKit/537.17 (KHTML, like Gecko) Chrome/24.0.1312.57 Safari/537.17&quot;</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        request = urllib2.Request(</span><br><span class="line">            url     = loginUrl,</span><br><span class="line">            headers = headers,</span><br><span class="line">            data    = urllib.urlencode(params)</span><br><span class="line">            )</span><br><span class="line">        login = urllib2.urlopen(request)</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;login successfully...&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> login</span><br><span class="line">    <span class="keyword">except</span> Exception, e:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;login failed:&#x27;</span>, e</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">signin</span>(<span class="params">email, password</span>):</span></span><br><span class="line">    signurl = <span class="string">&#x27;http://www.xiami.com/task/signin&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> login(email, password) != <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            headers = &#123;</span><br><span class="line">                <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;http://www.xiami.com/?register&quot;</span>,</span><br><span class="line">                <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2) AppleWebKit/537.17 (KHTML, like Gecko) Chrome/24.0.1312.57 Safari/537.17&quot;</span>,</span><br><span class="line">            &#125;</span><br><span class="line">            request = urllib2.Request(</span><br><span class="line">            url = signurl,</span><br><span class="line">            headers = headers</span><br><span class="line">            )</span><br><span class="line">            response = urllib2.urlopen(request)</span><br><span class="line">            retcode = response.read()</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">str</span>.isdigit(retcode):</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&#x27;sign in days:&#x27;</span>, retcode</span><br><span class="line">        <span class="keyword">except</span> Exception, e:</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&#x27;signin error:&#x27;</span>, e</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    email = <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">    password = <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">    signin(email, password)</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://i55m411.appspot.com/?p=594004" target="_blank">android应用实现定时打电话</a>， <a href="http://code.google.com/p/android-scripting/" target="_blank">google code SL4A</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;用惯了crontab，希望在自己的Android手机上完成定时执行一些脚本的任务。google一下找到了 &lt;a href=&quot;http://i55m411.appspot.com/?p=594004&quot; target=&quot;_blank&quot;&gt;android应用实现定时打电话&lt;/a&gt; 这样一篇文章，正好满足我的需求。下面做一个简单的总结。&lt;/p&gt;
&lt;h3 id=&quot;安装的软件&quot;&gt;&lt;a href=&quot;#安装的软件&quot; class=&quot;headerlink&quot; title=&quot;安装的软件&quot;&gt;&lt;/a&gt;安装的软件&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://code.google.com/p/android-scripting&quot; target=&quot;_blank&quot;&gt;SL4A(Scripting Layer for Android)&lt;/a&gt;，Andriod系统下运行脚本的环境，可以在终端、后台或Locale中运行，现阶段支持Python, Perl, JRuby, Lua, BeanShell, JavaScript, Tcl和shell脚本。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://code.google.com/p/android-scripting/downloads/detail?name=PythonForAndroid_r4.apk&amp;can=2&quot; target=&quot;_blank&quot;&gt;Py4A&lt;/a&gt;，SL4A的python插件，安装之后就可以运行python脚本。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://play.google.com/store/apps/details?id=org.androidideas.taskbomb&quot; target=&quot;_blank&quot;&gt;TaskBomb task scheduler&lt;/a&gt;，一个可以执行计划任务的app，类似于Unix中的crontab。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://play.google.com/store/apps/details?id=org.androidideas.scriptlauncher&quot; target=&quot;_blank&quot;&gt;SL4A Script Launcher&lt;/a&gt;，TaskBomb可以通过此app执行SL4A脚本。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="program" scheme="http://amyangfei.me/categories/program/"/>
    
    
    <category term="android" scheme="http://amyangfei.me/tags/android/"/>
    
    <category term="python" scheme="http://amyangfei.me/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>tornado源码分析4</title>
    <link href="http://amyangfei.me/2013/02/05/tornado-source-analysis-4/"/>
    <id>http://amyangfei.me/2013/02/05/tornado-source-analysis-4/</id>
    <published>2013-02-05T00:00:00.000Z</published>
    <updated>2020-12-13T07:05:20.414Z</updated>
    
    <content type="html"><![CDATA[<p>IOStream对socket读写进行了封装，分别提供读、写缓冲区实现对socket的异步读写。当socket被accept之后HTTPServer的_handle_connection会被回调并初始化IOStream对象，进一步通过IOStream提供的功能接口完成socket的读写。文章接下来将关注IOStream实现读写的细节。</p><h3 id="IOStream的初始化"><a href="#IOStream的初始化" class="headerlink" title="IOStream的初始化"></a>IOStream的初始化</h3><p>IOStream初始化过程中主要完成以下操作：</p><ol><li>绑定对应的socket</li><li>绑定ioloop</li><li>创建读缓冲区_read_buffer，一个python deque容器</li><li>创建写缓冲区_write_buffer，同样也是一个python deque容器</li></ol><a id="more"></a><h3 id="IOStream提供的主要功能接口"><a href="#IOStream提供的主要功能接口" class="headerlink" title="IOStream提供的主要功能接口"></a>IOStream提供的主要功能接口</h3><p>主要的读写接口包括以下四个：</p><table width="100%">    <tbody>        <tr>            <td>                class IOStream(object):            </td>        </tr>        <tr>            <td>&nbsp;&nbsp;&nbsp;&nbsp;def read_until(self, delimiter, callback):            <br>                &nbsp;&nbsp;&nbsp;&nbsp;def read_bytes(self, num_bytes, callback, streaming_callback=None):            <br>                &nbsp;&nbsp;&nbsp;&nbsp;def read_until_regex(self, regex, callback):            <br>                &nbsp;&nbsp;&nbsp;&nbsp;def read_until_close(self, callback, streaming_callback=None):            <br>                &nbsp;&nbsp;&nbsp;&nbsp;def write(self, data, callback=None):            </td>        </tr>    </tbody></table><ul><li>read_until和read_bytes是最常用的读接口，它们工作的过程都是先注册读事件结束时调用的回调函数，然后调用_try_inline_read方法。_try_inline_read首先尝试_read_from_buffer，即从上一次的读缓冲区中取数据，如果有数据直接调用 self._run_callback(callback, self._consume(data_length)) 执行回调函数，_consume消耗掉了_read_buffer中的数据；否则即_read_buffer之前没有未读数据，先通过_read_to_buffer将数据从socket读入_read_buffer，然后再执行_read_from_buffer操作。read_until和read_bytes的区别在于_read_from_buffer过程中截取数据的方法不同，read_until读取到delimiter终止，而read_bytes则读取num_bytes个字节终止。执行过程如下图所示：</li></ul><p><img src="/images/20130205iostream_read.png"></p><ul><li><p>read_until_regex相当于delimiter为某一正则表达式的read_until。</p></li><li><p>read_until_close主要用于IOStream流关闭前后的读取：如果调用read_until_close时stream已经关闭，那么将会_consume掉_read_buffer中的所有数据；否则_read_until_close标志位设为True，注册_streaming_callback回调函数，调用_add_io_state添加io_loop.READ状态。</p></li><li><p>write首先将data按照数据块大小WRITE_BUFFER_CHUNK_SIZE分块写入_write_buffer，然后调用_handle_write向socket发送数据。</p></li></ul><h3 id="其他内部功能接口"><a href="#其他内部功能接口" class="headerlink" title="其他内部功能接口"></a>其他内部功能接口</h3><ul><li><p>def _handle_events(self, fd, events): 通常为IOLoop对象add_handler方法传入的回调函数，由IOLoop的事件机制来进行调度。</p></li><li><p>def _add_io_state(self, state): 为IOLoop对象的handler注册IOLoop.READ或IOLoop.WRITE状态，handler为IOStream对象的_handle_events方法。</p></li><li><p>def _consume(self, loc): 合并读缓冲区loc个字节，从读缓冲区删除并返回这些数据</p></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://kenby.iteye.com/blog/1159621" target="_blank">Tornado源码分析之http服务器篇</a>， <a href="http://www.cnblogs.com/Bozh/archive/2012/07/22/2603976.html" target="_blank">tornado源码分析系列</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;IOStream对socket读写进行了封装，分别提供读、写缓冲区实现对socket的异步读写。当socket被accept之后HTTPServer的_handle_connection会被回调并初始化IOStream对象，进一步通过IOStream提供的功能接口完成socket的读写。文章接下来将关注IOStream实现读写的细节。&lt;/p&gt;
&lt;h3 id=&quot;IOStream的初始化&quot;&gt;&lt;a href=&quot;#IOStream的初始化&quot; class=&quot;headerlink&quot; title=&quot;IOStream的初始化&quot;&gt;&lt;/a&gt;IOStream的初始化&lt;/h3&gt;&lt;p&gt;IOStream初始化过程中主要完成以下操作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;绑定对应的socket&lt;/li&gt;
&lt;li&gt;绑定ioloop&lt;/li&gt;
&lt;li&gt;创建读缓冲区_read_buffer，一个python deque容器&lt;/li&gt;
&lt;li&gt;创建写缓冲区_write_buffer，同样也是一个python deque容器&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="program" scheme="http://amyangfei.me/categories/program/"/>
    
    
    <category term="python" scheme="http://amyangfei.me/tags/python/"/>
    
    <category term="tornado" scheme="http://amyangfei.me/tags/tornado/"/>
    
    <category term="asynchronous I/O" scheme="http://amyangfei.me/tags/asynchronous-I-O/"/>
    
  </entry>
  
  <entry>
    <title>tornado源码分析3</title>
    <link href="http://amyangfei.me/2013/02/03/tornado-source-analysis-3/"/>
    <id>http://amyangfei.me/2013/02/03/tornado-source-analysis-3/</id>
    <published>2013-02-03T00:00:00.000Z</published>
    <updated>2020-12-13T07:05:17.415Z</updated>
    
    <content type="html"><![CDATA[<p>注：在分割线之前是基于 Tornado2.4 的分析。在Tornado3.0+以后IOLoop发生了一些改动，分割线之后有相应的介绍。</p><p>IOLoop是基于epoll实现的底层网络I/O的核心调度模块，用于处理socket相关的连接、响应、异步读写等网络事件。每个Tornado进程都会初始化一个全局唯一的IOLoop实例，在IOLoop中通过静态方法instance()进行封装，获取IOLoop实例直接调用此方法即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">instance</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    class MyClass(object):</span></span><br><span class="line"><span class="string">        def __init__(self, io_loop=None):</span></span><br><span class="line"><span class="string">            self.io_loop = io_loop or IOLoop.instance()</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(IOLoop, <span class="string">&quot;_instance&quot;</span>):</span><br><span class="line">        <span class="keyword">with</span> IOLoop._instance_lock:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(IOLoop, <span class="string">&quot;_instance&quot;</span>):</span><br><span class="line">                <span class="comment"># New instance after double check</span></span><br><span class="line">                IOLoop._instance = IOLoop()</span><br><span class="line">    <span class="keyword">return</span> IOLoop._instance</span><br></pre></td></tr></table></figure><a id="more"></a><p>在上一篇文章中已经分析Tornado服务器启动时会创建监听socket，并将socket的file descriptor注册到IOLoop实例中，IOLoop添加对socket的IOLoop.READ事件监听并传入回调处理函数。当某个socket通过accept接受连接请求后调用注册的回调函数进行读写。接下来主要分析IOLoop对epoll的封装和I/O调度具体实现。</p><p><a href="http://www.kernel.org/doc/man-pages/online/pages/man4/epoll.4.html" target="_blank">epoll</a>是Linux内核中实现的一种可扩展的I/O事件通知机制，是对POISX系统中<a href="http://www.kernel.org/doc/man-pages/online/pages/man2/select.2.html" target="_blank"> select(2) </a> 和<a href="http://www.kernel.org/doc/man-pages/online/pages/man2/poll.2.html" target="_blank"> poll(2) </a>的替代，具有更高的性能和扩展性，FreeBSD中类似的实现是kqueue。Tornado中基于Python C扩展实现的的epoll模块(或kqueue)对epoll(kqueue)的使用进行了封装，使得IOLoop对象可以通过相应的事件处理机制对I/O进行调度。</p><p>IOLoop模块对网络事件类型的封装与epoll一致，分为READ，WRITE， ERROR三类，具体如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">READ = _EPOLLIN</span><br><span class="line">WRITE = _EPOLLOUT</span><br><span class="line">ERROR = _EPOLLERR | _EPOLLHUP</span><br></pre></td></tr></table></figure><h3 id="IOLoop的初始化"><a href="#IOLoop的初始化" class="headerlink" title="IOLoop的初始化"></a>IOLoop的初始化</h3><p>初始化过程中选择epoll的实现方式，Linux平台为epoll，BSD平台为kqueue，其他平台如果安装有C模块扩展的epoll则使用tornado对epoll的封装，否则退化为select。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, impl=<span class="literal">None</span></span>):</span></span><br><span class="line">    self._impl = impl <span class="keyword">or</span> _poll()</span><br><span class="line">    <span class="comment">#省略部分代码</span></span><br><span class="line">    self._waker = Waker()</span><br><span class="line">    self.add_handler(self._waker.fileno(),</span><br><span class="line">                     <span class="keyword">lambda</span> fd, events: self._waker.consume(),</span><br><span class="line">                     self.READ)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_handler</span>(<span class="params">self, fd, handler, events</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Registers the given handler to receive the given events for fd.&quot;&quot;&quot;</span></span><br><span class="line">    self._handlers[fd] = stack_context.wrap(handler)</span><br><span class="line">    self._impl.register(fd, events | self.ERROR)</span><br></pre></td></tr></table></figure><p>在IOLoop初始化的过程中创建了一个Waker对象，将Waker对象fd的读端注册到事件循环中并设定相应的回调函数（这样做的好处是当事件循环阻塞而没有响应描述符出现，需要在最大timeout时间之前返回，就可以向这个管道发送一个字符）。Waker的使用：一种是在其他线程向IOLoop添加callback时使用，唤醒IOLoop同时会将控制权转移给IOLoop线程并完成特定请求。唤醒的方法向管道中写入一个字符’x’。另外，在IOLoop的stop函数中会调用self._waker.wake()，通过向管道写入’x’停止事件循环。</p><p>add_handler函数使用了stack_context提供的wrap方法。wrap返回了一个可以直接调用的对象并且保存了传入之前的堆栈信息，在执行时可以恢复，这样就保证了函数的异步调用时具有正确的运行环境。</p><h3 id="IOLoop的start方法"><a href="#IOLoop的start方法" class="headerlink" title="IOLoop的start方法"></a>IOLoop的start方法</h3><p>IOLoop的核心调度集中在start方法中，IOLoop实例对象调用start后开始epoll事件循环机制，该方法会一直运行直到IOLoop对象调用stop函数、当前所有事件循环完成。start方法中主要分三个部分：一个部分是对超时的相关处理；一部分是epoll事件通知阻塞、接收；一部分是对epoll返回I/O事件的处理。</p><ul><li><p>为防止IO event starvation，将回调函数延迟到下一轮事件循环中执行。</p></li><li><p>超时的处理<br>heapq维护一个最小堆，记录每个回调函数的超时时间（deadline）。每次取出deadline最早的回调函数，如果callback标志位为True并且已经超时，通过_run_callback调用函数；如果没有超时需要重新设定poll_timeout的值。</p></li><li><p>通过self._impl.poll(poll_timeout)进行事件阻塞，当有事件通知或超时时poll返回特定的event_pairs。</p></li><li><p>epoll返回通知事件后将新事件加入待处理队列，将就绪事件逐个弹出，通过stack_context.wrap(handler)保存的可执行对象调用事件处理。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    poll_timeout = <span class="number">3600.0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> self._callback_lock:</span><br><span class="line">        callbacks = self._callbacks</span><br><span class="line">        self._callbacks = []</span><br><span class="line">    <span class="keyword">for</span> callback <span class="keyword">in</span> callbacks:</span><br><span class="line">        self._run_callback(callback)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 超时处理</span></span><br><span class="line">    <span class="keyword">if</span> self._timeouts:</span><br><span class="line">        now = time.time()</span><br><span class="line">        <span class="keyword">while</span> self._timeouts:</span><br><span class="line">            <span class="keyword">if</span> self._timeouts[<span class="number">0</span>].callback <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="comment"># the timeout was cancelled</span></span><br><span class="line">                heapq.heappop(self._timeouts)</span><br><span class="line">            <span class="keyword">elif</span> self._timeouts[<span class="number">0</span>].deadline &lt;= now:</span><br><span class="line">                timeout = heapq.heappop(self._timeouts)</span><br><span class="line">                self._run_callback(timeout.callback)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                seconds = self._timeouts[<span class="number">0</span>].deadline - now</span><br><span class="line">                poll_timeout = <span class="built_in">min</span>(seconds, poll_timeout)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> self._callbacks:</span><br><span class="line">        <span class="comment"># If any callbacks or timeouts called add_callback,</span></span><br><span class="line">        <span class="comment"># we don&#x27;t want to wait in poll() before we run them.</span></span><br><span class="line">        poll_timeout = <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> self._running:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> self._blocking_signal_threshold <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="comment"># clear alarm so it doesn&#x27;t fire while poll is waiting for events.</span></span><br><span class="line">        signal.setitimer(signal.ITIMER_REAL, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># epoll阻塞，当有事件通知或超时返回event_pairs</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        event_pairs = self._impl.poll(poll_timeout)</span><br><span class="line">    <span class="keyword">except</span> Exception, e:</span><br><span class="line">        <span class="comment"># 异常处理，省略</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对epoll返回event_pairs事件的处理</span></span><br><span class="line">    self._events.update(event_pairs)</span><br><span class="line">    <span class="keyword">while</span> self._events:</span><br><span class="line">        fd, events = self._events.popitem()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self._handlers[fd](fd, events)</span><br><span class="line">        <span class="keyword">except</span> Exception e:</span><br><span class="line">            <span class="comment"># 异常处理，省略</span></span><br></pre></td></tr></table></figure><p>至此IOLoop模块的分析基本完成。下一篇文章将会继续分析IOStream模块。</p><p>————————————————我是分割线—————————————————</p><p>补充于2013年4月30日，介绍Tornado3.0以后IOLoop模块的一些改动。</p><p>1. IOLoop成为util.Configurable的子类，IOLoop 中绝大多数成员方法都作为抽象接口，具体实现由派生类 PollIOLoop 完成。IOLoop实现了 Configurable 中的 configurable_base 和 configurable_default 这两个抽象接口，用于初始化过程中获取类类型和类的实现方法（即 IOLoop 中 poller 的实现方式）。在Tornado3.0+ 中针对不同平台，单独出 poller 相应的实现，EPollIOLoop、KQueueIOLoop、SelectIOLoop 均继承于 PollIOLoop。下边的代码是 configurable_default 方法根据平台选择相应的 epoll 实现。初始化 IOLoop 的过程中会自动根据平台选择合适的 poller 的实现方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">configurable_default</span>(<span class="params">cls</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">hasattr</span>(select, <span class="string">&quot;epoll&quot;</span>):</span><br><span class="line">        <span class="keyword">from</span> tornado.platform.epoll <span class="keyword">import</span> EPollIOLoop</span><br><span class="line">        <span class="keyword">return</span> EPollIOLoop</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">hasattr</span>(select, <span class="string">&quot;kqueue&quot;</span>):</span><br><span class="line">        <span class="comment"># Python 2.6+ on BSD or Mac</span></span><br><span class="line">        <span class="keyword">from</span> tornado.platform.kqueue <span class="keyword">import</span> KQueueIOLoop</span><br><span class="line">        <span class="keyword">return</span> KQueueIOLoop</span><br><span class="line">    <span class="keyword">from</span> tornado.platform.select <span class="keyword">import</span> SelectIOLoop</span><br><span class="line">    <span class="keyword">return</span> SelectIOLoop</span><br></pre></td></tr></table></figure><p>2. 其他有很多细节上的改动，详细可参见官方文档<a href="http://www.tornadoweb.org/en/stable/releases/v3.0.0.html#tornado-ioloop" target="_blank">What’s new in Tornado 3.0</a> </p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://kenby.iteye.com/blog/1159621" target="_blank">Tornado源码分析之http服务器篇</a>， <a href="http://www.cnblogs.com/Bozh/archive/2012/07/22/2603976.html" target="_blank">tornado源码分析系列</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;注：在分割线之前是基于 Tornado2.4 的分析。在Tornado3.0+以后IOLoop发生了一些改动，分割线之后有相应的介绍。&lt;/p&gt;
&lt;p&gt;IOLoop是基于epoll实现的底层网络I/O的核心调度模块，用于处理socket相关的连接、响应、异步读写等网络事件。每个Tornado进程都会初始化一个全局唯一的IOLoop实例，在IOLoop中通过静态方法instance()进行封装，获取IOLoop实例直接调用此方法即可。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@staticmethod&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;instance&lt;/span&gt;():&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    class MyClass(object):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;        def __init__(self, io_loop=None):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;            self.io_loop = io_loop or IOLoop.instance()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;hasattr&lt;/span&gt;(IOLoop, &lt;span class=&quot;string&quot;&gt;&amp;quot;_instance&amp;quot;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; IOLoop._instance_lock:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;hasattr&lt;/span&gt;(IOLoop, &lt;span class=&quot;string&quot;&gt;&amp;quot;_instance&amp;quot;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;# New instance after double check&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                IOLoop._instance = IOLoop()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; IOLoop._instance&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="program" scheme="http://amyangfei.me/categories/program/"/>
    
    
    <category term="python" scheme="http://amyangfei.me/tags/python/"/>
    
    <category term="tornado" scheme="http://amyangfei.me/tags/tornado/"/>
    
    <category term="asynchronous I/O" scheme="http://amyangfei.me/tags/asynchronous-I-O/"/>
    
  </entry>
  
  <entry>
    <title>tornado源码分析2</title>
    <link href="http://amyangfei.me/2013/01/29/tornado-source-analysis-2/"/>
    <id>http://amyangfei.me/2013/01/29/tornado-source-analysis-2/</id>
    <published>2013-01-29T00:00:00.000Z</published>
    <updated>2020-12-13T07:05:14.428Z</updated>
    
    <content type="html"><![CDATA[<p>httpserver.py中给出了一个简单的http服务器的demo，代码如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tornado <span class="keyword">import</span> httpserver</span><br><span class="line"><span class="keyword">from</span> tornado <span class="keyword">import</span> ioloop</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_request</span>(<span class="params">request</span>):</span></span><br><span class="line">   message = <span class="string">&quot;You requested %s\n&quot;</span> % request.uri</span><br><span class="line">   request.write(<span class="string">&quot;HTTP/1.1 200 OK\r\nContent-Length: %d\r\n\r\n%s&quot;</span> % (</span><br><span class="line">                 <span class="built_in">len</span>(message), message))</span><br><span class="line">   request.finish()</span><br><span class="line"></span><br><span class="line">http_server = httpserver.HTTPServer(handle_request)</span><br><span class="line">http_server.bind(<span class="number">8888</span>)</span><br><span class="line">http_server.start()</span><br><span class="line">ioloop.IOLoop.instance().start()</span><br></pre></td></tr></table></figure><p>该http服务器主要使用到IOLoop, IOStream, HTTPServer, HTTPConnection几大模块，分别在代码ioloop.py, iostream.py, httpserver.py中实现。工作的流程如下图所示：</p><a id="more"></a><p><img src="/images/20130128tornado-httpserver.png" alt="tornado http server"></p><p>服务器的工作流程：首先按照socket-&gt;bind-&gt;listen顺序创建listen socket监听客户端，并将每个listen socket的fd注册到IOLoop的单例实例中；当listen socket可读时回调_handle_events处理客户端请求；在与客户端通信的过程中使用IOStream封装了读、写缓冲区，实现与客户端的异步读写。</p><h3 id="HTTPServer分析"><a href="#HTTPServer分析" class="headerlink" title="HTTPServer分析"></a>HTTPServer分析</h3><p>HTTPServer在httpserver.py中实现，继承自TCPServer（netutil.py中实现），是一个无阻塞、单线程HTTP服务器。支持HTTP/1.1协议keep-alive连接，但不支持chunked encoding。服务器支持’X-Real-IP’和’X-Scheme’头以及SSL传输，支持多进程为prefork模式实现。在源代码的注释中对以上描述比较详细的说明，这里就不再细说。</p><p>HTTPServer和TCPServer的类结构</p><table width="100%">    <tbody>        <tr>            <td>                class HTTPServer(TCPServer):            </td>        </tr>        <tr>            <td>&nbsp;&nbsp;&nbsp;&nbsp;def __init__(self, request_callback, no_keep_alive=False, io_loop=None,                 xheaders=False, ssl_options=None, **kwargs):                <br>                &nbsp;&nbsp;&nbsp;&nbsp;def handle_stream(self, stream, address):            </td>        </tr>    </tbody></table><table width="100%">    <tbody>        <tr>            <td>                class TCPServer(object):            </td>        </tr>        <tr>            <td>&nbsp;&nbsp;&nbsp;&nbsp;def __init__(self, io_loop=None, ssl_options=None):            <br>                &nbsp;&nbsp;&nbsp;&nbsp;def listen(self, port, address=""):            <br>                &nbsp;&nbsp;&nbsp;&nbsp;def add_sockets(self, sockets):            <br>                &nbsp;&nbsp;&nbsp;&nbsp;def bind(self, port, address=None, family=socket.AF_UNSPEC, backlog=128):            <br>                &nbsp;&nbsp;&nbsp;&nbsp;def start(self, num_processes=1):            <br>                &nbsp;&nbsp;&nbsp;&nbsp;def stop(self):            <br>                &nbsp;&nbsp;&nbsp;&nbsp;def handle_stream(self, stream, address):            <br>                &nbsp;&nbsp;&nbsp;&nbsp;def _handle_connection(self, connection, address):            </td>        </tr>    </tbody></table><p>文章开始部分创建HTTPServer的过程：首先需要定义处理request的回调函数，在tornado中通常使用tornado.web.Application封装。然后构造HTTPServer实例，注册回调函数。接下来监听端口，启动服务器。最后启动IOLoop。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">listen</span>(<span class="params">self, port, address=<span class="string">&quot;&quot;</span></span>):</span></span><br><span class="line">    sockets = bind_sockets(port, address=address)</span><br><span class="line">    self.add_sockets(sockets)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bind_sockets</span>(<span class="params">port, address=<span class="literal">None</span>, family=socket.AF_UNSPEC, backlog=<span class="number">128</span></span>):</span></span><br><span class="line">    <span class="comment"># 省略sockets创建，address，flags处理部分代码</span></span><br><span class="line">    <span class="keyword">for</span> res <span class="keyword">in</span> <span class="built_in">set</span>(socket.getaddrinfo(address, port, family, socket.SOCK_STREAM,</span><br><span class="line">                                  <span class="number">0</span>, flags)):</span><br><span class="line">        af, socktype, proto, canonname, sockaddr = res</span><br><span class="line">        <span class="comment"># 创建socket</span></span><br><span class="line">        sock = socket.socket(af, socktype, proto)</span><br><span class="line">        <span class="comment"># 设置socket属性，代码省略</span></span><br><span class="line"></span><br><span class="line">        sock.bind(sockaddr)</span><br><span class="line">        sock.listen(backlog)</span><br><span class="line">        sockets.append(sock)</span><br><span class="line">    <span class="keyword">return</span> sockets</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_sockets</span>(<span class="params">self, sockets</span>):</span></span><br><span class="line">    <span class="keyword">if</span> self.io_loop <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        self.io_loop = IOLoop.instance()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> sock <span class="keyword">in</span> sockets:</span><br><span class="line">        self._sockets[sock.fileno()] = sock</span><br><span class="line">        add_accept_handler(sock, self._handle_connection,</span><br><span class="line">                           io_loop=self.io_loop)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_accept_handler</span>(<span class="params">sock, callback, io_loop=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> io_loop <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        io_loop = IOLoop.instance()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">accept_handler</span>(<span class="params">fd, events</span>):</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                connection, address = sock.accept()</span><br><span class="line">            <span class="keyword">except</span> socket.error, e:</span><br><span class="line">                <span class="keyword">if</span> e.args[<span class="number">0</span>] <span class="keyword">in</span> (errno.EWOULDBLOCK, errno.EAGAIN):</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                <span class="keyword">raise</span></span><br><span class="line">            <span class="comment"># 当有连接被accepted时callback会被调用</span></span><br><span class="line">            callback(connection, address)</span><br><span class="line">    io_loop.add_handler(sock.fileno(), accept_handler, IOLoop.READ)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_handle_connection</span>(<span class="params">self, connection, address</span>):</span></span><br><span class="line">    <span class="comment"># SSL部分省略</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        stream = IOStream(connection, io_loop=self.io_loop)</span><br><span class="line">        self.handle_stream(stream, address)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        logging.error(<span class="string">&quot;Error in connection callback&quot;</span>, exc_info=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>这里分析HTTPServer通过listen函数启动监听，这种方法是单进程模式。另外可以通过先后调用bind和start(num_processes=1)函数启动监听同时创建多进程服务器实例，后文有关于此的详细描述。</p><p>bind_sockets在启动监听端口过程中调用，getaddrinfo返回服务器的所有网卡信息, 每块网卡上都要创建监听客户端的请求并返回创建的sockets。创建socket过程中绑定地址和端口，同时设置了fcntl.FD_CLOEXEC（创建子进程时关闭打开的socket）和socket.SO_REUSEADDR（保证某一socket关闭后立即释放端口，实现端口复用）标志位。sock.listen(backlog=128)默认设定等待被处理的连接最大个数为128。</p><p>返回的每一个socket都加入到IOLoop中同时添加回调函数_handle_connection，IOLoop添加对相应socket的IOLoop.READ事件监听。_handle_connection在接受客户端的连接处理结束之后会被调用，调用时传入连接和ioloop对象初始化IOStream对象，用于对客户端的异步读写；然后调用handle_stream，传入创建的IOStream对象初始化一个HTTPConnection对象，HTTPConnection封装了IOStream的一些操作，用于处理HTTPRequest并返回。至此HTTP Server的创建、启动、注册回调函数的过程分析结束。</p><h3 id="HTTPConnection分析"><a href="#HTTPConnection分析" class="headerlink" title="HTTPConnection分析"></a>HTTPConnection分析</h3><p>该类用于处理http请求。在HTTPConnection初始化时对self.request_callback赋值为一个可调用的对象（该对象用于对http请求的具体处理和应答）。该类首先读取http请求中header的结束符b(“\r\n\r\n”)，然后回调self._on_headers函数。request_callback的相关实现在以后的系列中有详细介绍。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, stream, address, request_callback, no_keep_alive=<span class="literal">False</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                 xheaders=<span class="literal">False</span></span>):</span></span><br><span class="line">    self.request_callback = request_callback</span><br><span class="line">    <span class="comment"># some configuration code</span></span><br><span class="line">    self._header_callback = stack_context.wrap(self._on_headers)</span><br><span class="line">    self.stream.read_until(b(<span class="string">&quot;\r\n\r\n&quot;</span>), self._header_callback)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_on_headers</span>(<span class="params">self, data</span>):</span></span><br><span class="line">    <span class="comment"># some codes</span></span><br><span class="line">    self.request_callback(self._request)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="多进程HTTPServer"><a href="#多进程HTTPServer" class="headerlink" title="多进程HTTPServer"></a>多进程HTTPServer</h3><p>Tornado的HTTPServer是单进程单线程模式，同时提供了创建多进程服务器的接口，具体实现是在主进程启动HTTPServer时通过process.fork_processes(num_processes)产生新的服务器子进程，所有进程之间共享端口。fork_process的方法在process.py中实现，十分简洁。<a href="http://fjctlzy.diandian.com/post/2012-08-04/40031899614" target="_blank">从开源代码学习Python之tornado的多进程</a> 对fork_process有详细的分析。</p><p>FriendFeed使用nginx提供负载均衡、反向代理服务并作为静态文件服务器，在后端服务器上可以部署多个Tornado实例。<a href="http://www.v2ex.com/t/17505" target="_blank">v2ex:Tornado 项目都是如何部署</a> 里讨论的方案是通过Supervisor控制Tornado app，然后再通过nginx对Tornado的输出进行反向代理。<a href="https://idndx.com/2011/10/18/ways-to-deploy-tornado-under-production-environment-using-supervisor/" target="_blank">Tornado + Supervisor 在生产环境下的部署方法</a> 这篇文章也有相似的讨论。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://kenby.iteye.com/blog/1159621" target="_blank">Tornado源码分析之http服务器篇</a>， <a href="http://www.cnblogs.com/Bozh/archive/2012/07/24/2606765.html" target="_blank">tornado源码分析系列</a>， <a href="http://golubenco.org/2009/09/19/understanding-the-code-inside-tornado-the-asynchronous-web-server-powering-friendfeed/" target="_blank">Understanding the code inside Tornado, the asynchronous web server</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;httpserver.py中给出了一个简单的http服务器的demo，代码如下所示：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; tornado &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; httpserver&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; tornado &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; ioloop&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;handle_request&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;request&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   message = &lt;span class=&quot;string&quot;&gt;&amp;quot;You requested %s\n&amp;quot;&lt;/span&gt; % request.uri&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   request.write(&lt;span class=&quot;string&quot;&gt;&amp;quot;HTTP/1.1 200 OK\r\nContent-Length: %d\r\n\r\n%s&amp;quot;&lt;/span&gt; % (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(message), message))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   request.finish()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;http_server = httpserver.HTTPServer(handle_request)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;http_server.bind(&lt;span class=&quot;number&quot;&gt;8888&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;http_server.start()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ioloop.IOLoop.instance().start()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;该http服务器主要使用到IOLoop, IOStream, HTTPServer, HTTPConnection几大模块，分别在代码ioloop.py, iostream.py, httpserver.py中实现。工作的流程如下图所示：&lt;/p&gt;</summary>
    
    
    
    <category term="program" scheme="http://amyangfei.me/categories/program/"/>
    
    
    <category term="python" scheme="http://amyangfei.me/tags/python/"/>
    
    <category term="tornado" scheme="http://amyangfei.me/tags/tornado/"/>
    
    <category term="web server framework" scheme="http://amyangfei.me/tags/web-server-framework/"/>
    
  </entry>
  
  <entry>
    <title>tornado源码分析1</title>
    <link href="http://amyangfei.me/2013/01/27/tornado-source-analysis-1/"/>
    <id>http://amyangfei.me/2013/01/27/tornado-source-analysis-1/</id>
    <published>2013-01-27T00:00:00.000Z</published>
    <updated>2020-12-13T07:05:10.748Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>Tornado是<a href="http://friendfeed.com/" target="_blank">FriendFeed</a>最早使用的一款由python编写的轻量级、无阻塞式Web服务器，还包括一些相关的工具和优化。现已由Facebook开源在<a href="https://github.com/facebook/tornado" target="_blank">github</a>。得益于无阻塞IO和epoll（or kqueue in FreeBSD, Mac OS X）的使用，Tornado每秒可以处理大量/数千的客户端连接，适用于实时的Web服务（详细可以参阅<a href="http://www.kegel.com/c10k.html" target="_blank">The C10K problem</a>）。</p><p>接下来几篇文章将会从Web服务器框架设计、代码实现细节等角度介绍我对Tornado源码的分析。这篇文章作为概述，首先介绍Tornado的模块按功能分类，同时提供后续文章的结构目录。</p><a id="more"></a><h3 id="Tornado模块分类"><a href="#Tornado模块分类" class="headerlink" title="Tornado模块分类"></a>Tornado模块分类</h3><ul><li><p><strong>Core web framework</strong></p><ul><li>tornado.web — 包含web框架的大部分主要功能，包含RequestHandler和Application两个重要的类</li><li>tornado.httpserver — 一个无阻塞HTTP服务器的实现</li><li>tornado.template — 模版系统</li><li>tornado.escape — HTML,JSON,URLs等的编码解码和一些字符串操作</li><li>tornado.locale — 国际化支持</li></ul></li><li><p><strong>Asynchronous networking 底层模块</strong></p><ul><li>tornado.ioloop — 核心的I/O循环</li><li>tornado.iostream — 对非阻塞式的 socket 的简单封装，以方便常用读写操作</li><li>tornado.httpclient — 一个无阻塞的HTTP服务器实现</li><li>tornado.netutil — 一些网络应用的实现，主要实现TCPServer类</li></ul></li><li><p><strong>Integration with other services</strong></p><ul><li>tornado.auth — 使用OpenId和OAuth进行第三方登录</li><li>tornado.database — 简单的MySQL服务端封装</li><li>tornado.platform.twisted — 在Tornado上运行为Twisted实现的代码</li><li>tornado.websocket — 实现和浏览器的双向通信</li><li>tornado.wsgi — 与其他python网络框架/服务器的相互操作</li></ul></li><li><p><strong>Utilities</strong></p><ul><li>tornado.autoreload — 生产环境中自动检查代码更新</li><li>tornado.gen — 一个基于生成器的接口，使用该模块保证代码异步运行</li><li>tornado.httputil — 分析HTTP请求内容</li><li>tornado.options — 解析终端参数</li><li>tornado.process — 多进程实现的封装</li><li>tornado.stack_context — 用于异步环境中对回调函数的上下文保存、异常处理</li><li>tornado.testing — 单元测试</li></ul></li></ul><h3 id="系列文章结构"><a href="#系列文章结构" class="headerlink" title="系列文章结构"></a>系列文章结构</h3><ol><li>概述</li><li><a href="/2013/01/29/tornado-source-analysis-2/" target="_blank">Tornado HTTP服务器介绍</a></li><li><a href="/2013/02/03/tornado-source-analysis-3/" target="_blank">I/O核心调度模块IOLoop</a></li><li><a href="/2013/02/05/tornado-source-analysis-4/" target="_blank">读写缓冲模块IOStream</a></li><li><a href="/2013/03/01/tornado-source-analysis-5/" target="_blank">核心web框架介绍</a></li><li>未完待续</li></ol><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://www.tornadoweb.org/documentation/index.html" target="_blank">Tornado Documentation</a>, <a href="http://www.tornadoweb.cn/documentation" target="_blank">Tornado Documentation CN</a></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h3&gt;&lt;p&gt;Tornado是&lt;a href=&quot;http://friendfeed.com/&quot; target=&quot;_blank&quot;&gt;FriendFeed&lt;/a&gt;最早使用的一款由python编写的轻量级、无阻塞式Web服务器，还包括一些相关的工具和优化。现已由Facebook开源在&lt;a href=&quot;https://github.com/facebook/tornado&quot; target=&quot;_blank&quot;&gt;github&lt;/a&gt;。得益于无阻塞IO和epoll（or kqueue in FreeBSD, Mac OS X）的使用，Tornado每秒可以处理大量/数千的客户端连接，适用于实时的Web服务（详细可以参阅&lt;a href=&quot;http://www.kegel.com/c10k.html&quot; target=&quot;_blank&quot;&gt;The C10K problem&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;接下来几篇文章将会从Web服务器框架设计、代码实现细节等角度介绍我对Tornado源码的分析。这篇文章作为概述，首先介绍Tornado的模块按功能分类，同时提供后续文章的结构目录。&lt;/p&gt;</summary>
    
    
    
    <category term="program" scheme="http://amyangfei.me/categories/program/"/>
    
    
    <category term="python" scheme="http://amyangfei.me/tags/python/"/>
    
    <category term="web server framework" scheme="http://amyangfei.me/tags/web-server-framework/"/>
    
    <category term="asynchronous" scheme="http://amyangfei.me/tags/asynchronous/"/>
    
  </entry>
  
  <entry>
    <title>bash subshell变量作用域问题</title>
    <link href="http://amyangfei.me/2013/01/07/abtest-script-and-bash-subshell/"/>
    <id>http://amyangfei.me/2013/01/07/abtest-script-and-bash-subshell/</id>
    <published>2013-01-07T00:00:00.000Z</published>
    <updated>2020-12-13T07:04:07.378Z</updated>
    
    <content type="html"><![CDATA[<p>今天研究apache ab这个测试工具，在网上看到<a href="http://blog.csdn.net/chosen0ne/article/details/7302991" target="_blank">压力测试shell脚本</a>一文介绍了一个封装的bash脚本，用于多次测试返回requests per second的平均值，对脚本进行了简单的改写，将所有的测试输出进行记录。改写脚本在文章的最后。</p><p>改写过程中发现这样一个问题，比如写下面的脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">result=<span class="string">&quot;&quot;</span></span><br><span class="line">cat abtest_temp.log | <span class="keyword">while</span> <span class="built_in">read</span> LINE</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    result=`<span class="built_in">echo</span> <span class="variable">$LINE</span> | grep <span class="string">&#x27;Requests per second:&#x27;</span>`</span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$result</span>&quot;</span> != <span class="string">&quot;&quot;</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">break</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;result is &quot;</span><span class="variable">$&#123;result&#125;</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>在读取abtest_temp.log文件内容后，result的值仍为空，这是因为bash遇到管道后会创建一个新的进程，于是result是subshell中的局域变量，subshell对变量的修改不会影响原shell中的变量。</p><p>subshell可以export父shell中的变量，但export出来的变量只是父shell中变量的一个拷贝，进行修改并不能影响到父shell。但反过来，父shell再次更改此变量时，subshell 再去读时，读到的是新值，而不是原来的值。参考bash man page中的说明：<a href="http://www.gnu.org/software/bash/manual/bashref.html#Pipelines" target="_blank">Each command in a pipeline is executed in its own subshell</a>以及<a href="http://linux.die.net/man/1/bash" target="_blank">Each command in a pipeline is executed as a separate process (i.e., in a subshell).</a></p><p>对于这种情形有一些解决方法，这里给出两种：第一种是将subshell外需要访问的变量输出到临时文件中。第二种是使用命名管道。本质都是进程间通信的实现。</p><h3 id="使用临时文件"><a href="#使用临时文件" class="headerlink" title="使用临时文件"></a>使用临时文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">result=<span class="string">&quot;&quot;</span></span><br><span class="line">cat abtest_temp.log | <span class="keyword">while</span> <span class="built_in">read</span> LINE</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    result=`<span class="built_in">echo</span> <span class="variable">$LINE</span> | grep <span class="string">&#x27;Requests per second:&#x27;</span>`</span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$result</span>&quot;</span> != <span class="string">&quot;&quot;</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$result</span> &gt; .result_temp</span><br><span class="line">        <span class="built_in">break</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;result is &quot;</span>`cat .result_temp`</span><br></pre></td></tr></table></figure><h3 id="使用命名管道"><a href="#使用命名管道" class="headerlink" title="使用命名管道"></a>使用命名管道</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">result=<span class="string">&quot;&quot;</span></span><br><span class="line">mkfifo pipetem</span><br><span class="line">(cat abtest_temp.log | <span class="keyword">while</span> <span class="built_in">read</span> LINE</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    result=`<span class="built_in">echo</span> <span class="variable">$LINE</span> | grep <span class="string">&#x27;Requests per second:&#x27;</span>`</span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$result</span>&quot;</span> != <span class="string">&quot;&quot;</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$result</span> &gt; pipetem &amp;</span><br><span class="line">        <span class="built_in">break</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span>)</span><br><span class="line"><span class="built_in">read</span> result &lt; pipetem</span><br><span class="line">rm pipetem</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;result is &quot;</span><span class="variable">$&#123;result&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="对apache-ab封装的测试脚本"><a href="#对apache-ab封装的测试脚本" class="headerlink" title="对apache ab封装的测试脚本"></a>对apache ab封装的测试脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">total_request=1000</span><br><span class="line">concurrency=100</span><br><span class="line"><span class="built_in">times</span>=1</span><br><span class="line"></span><br><span class="line">cmd_idx=1</span><br><span class="line">param_count=<span class="variable">$#</span></span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$cmd_idx</span> -lt <span class="variable">$param_count</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    cmd=<span class="variable">$1</span></span><br><span class="line">    <span class="built_in">shift</span> 1 <span class="comment">#remove $1</span></span><br><span class="line">    <span class="keyword">case</span> <span class="variable">$cmd</span> <span class="keyword">in</span></span><br><span class="line">        -n)</span><br><span class="line">            total_request=<span class="variable">$1</span></span><br><span class="line">            <span class="built_in">shift</span> 1;;</span><br><span class="line">        -c)</span><br><span class="line">            concurrency=<span class="variable">$1</span></span><br><span class="line">            <span class="built_in">shift</span> 1;;</span><br><span class="line">        -t)</span><br><span class="line">            <span class="built_in">times</span>=<span class="variable">$1</span></span><br><span class="line">            <span class="built_in">shift</span> 1;;</span><br><span class="line">        *)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$cmd</span>, support parameter: -n, -c, -t&quot;</span>;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line">    cmd_idx=`expr <span class="variable">$cmd_idx</span> + 2`</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">url=<span class="variable">$1</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$url</span> = <span class="string">&#x27;&#x27;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;the test url must be provided...&#x27;</span></span><br><span class="line">    <span class="built_in">exit</span> 2</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Total Request: <span class="variable">$total_request</span>, Concurrency: <span class="variable">$concurrency</span>, URL: <span class="variable">$url</span>, Times: <span class="variable">$times</span>&quot;</span></span><br><span class="line"></span><br><span class="line">ab_dir=/usr/bin</span><br><span class="line">ab_cmd=<span class="string">&quot;<span class="variable">$ab_dir</span>/ab -n <span class="variable">$total_request</span> -c <span class="variable">$concurrency</span> <span class="variable">$url</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$ab_cmd</span></span><br><span class="line">idx=1</span><br><span class="line">rps_sum=0</span><br><span class="line">max=-1</span><br><span class="line">min=99999999</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$idx</span> -le <span class="variable">$times</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;start loop <span class="variable">$idx</span>&quot;</span></span><br><span class="line">    <span class="variable">$ab_cmd</span> &gt;abtest_temp.log 2&gt;&amp;1</span><br><span class="line">    cat abtest_temp.log | <span class="keyword">while</span> <span class="built_in">read</span> LINE</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        result=`<span class="built_in">echo</span> <span class="variable">$LINE</span> | grep <span class="string">&#x27;Requests per second:&#x27;</span>`</span><br><span class="line">        <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$result</span>&quot;</span> != <span class="string">&quot;&quot;</span> ]</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="variable">$result</span> &gt; .result_temp</span><br><span class="line">            <span class="built_in">break</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    result=`cat .result_temp`</span><br><span class="line">    rm .result_temp</span><br><span class="line">    result=`<span class="built_in">echo</span> <span class="variable">$result</span> | awk -F <span class="string">&#x27; &#x27;</span> <span class="string">&#x27;&#123; print $4 &#125;&#x27;</span> | awk -F <span class="string">&#x27;.&#x27;</span> <span class="string">&#x27;&#123; print $1 &#125;&#x27;</span>`</span><br><span class="line">    rps_sum=`expr <span class="variable">$result</span> + <span class="variable">$rps_sum</span>`</span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$result</span> -gt <span class="variable">$max</span> ]; <span class="keyword">then</span></span><br><span class="line">        max=<span class="variable">$result</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$result</span> -lt <span class="variable">$min</span> ]; <span class="keyword">then</span></span><br><span class="line">        min=<span class="variable">$result</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    idx=`expr <span class="variable">$idx</span> + 1`</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;avg rps: &quot;</span>`expr <span class="variable">$rps_sum</span> / <span class="variable">$times</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;min rps: <span class="variable">$min</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;max rps: <span class="variable">$max</span>&quot;</span></span><br></pre></td></tr></table></figure><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="http://blog.csdn.net/chosen0ne/article/details/7302991" target="_blank">压力测试shell脚本</a>，<a href="http://blog.csdn.net/sosodream/article/details/5683515" target="_blank">实例解析shell子进程（subshell )</a>，<a href="http://lihdd.net/bash-pipe-pitfall" target="_blank">小心bash的管道</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天研究apache ab这个测试工具，在网上看到&lt;a href=&quot;http://blog.csdn.net/chosen0ne/article/details/7302991&quot; target=&quot;_blank&quot;&gt;压力测试shell脚本&lt;/a&gt;一文介绍了一个封装的bash脚本，用于多次测试返回requests per second的平均值，对脚本进行了简单的改写，将所有的测试输出进行记录。改写脚本在文章的最后。&lt;/p&gt;
&lt;p&gt;改写过程中发现这样一个问题，比如写下面的脚本：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;result=&lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cat abtest_temp.log | &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;read&lt;/span&gt; LINE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    result=`&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$LINE&lt;/span&gt; | grep &lt;span class=&quot;string&quot;&gt;&amp;#x27;Requests per second:&amp;#x27;&lt;/span&gt;`&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; [ &lt;span class=&quot;string&quot;&gt;&amp;quot;&lt;span class=&quot;variable&quot;&gt;$result&lt;/span&gt;&amp;quot;&lt;/span&gt; != &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;fi&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;result is &amp;quot;&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;$&amp;#123;result&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="program" scheme="http://amyangfei.me/categories/program/"/>
    
    
  </entry>
  
  <entry>
    <title>how to build this blog</title>
    <link href="http://amyangfei.me/2012/12/30/how-to-build-this-blog/"/>
    <id>http://amyangfei.me/2012/12/30/how-to-build-this-blog/</id>
    <published>2012-12-30T00:00:00.000Z</published>
    <updated>2020-12-13T07:04:36.651Z</updated>
    
    <content type="html"><![CDATA[<p>系统环境Mac OS X 10.8.2，这个博客主要通过jekyll生成静态页面，使用ruby提供的一些扩展插件，比如按月份进行归档等，配置环境的过程如下。</p><p>安装ruby，rubygems</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo port ruby</span><br><span class="line">sudo port install rb-rubygems</span><br><span class="line">sudo gem install rubygems-update</span><br><span class="line">sudo gem update --system</span><br></pre></td></tr></table></figure><p>安装bundle</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem install bundler</span><br></pre></td></tr></table></figure><a id="more"></a><p>安装jeklly，rdiscount（支持markdown语法，<a href="https://github.com/rtomayko/rdiscount" target="_blank">rdiscount github</a>），liquid（支持jekyll模板渲染，<a href="https://github.com/mojombo/jekyll/wiki/liquid-extensions" target="_blank">Liquid Extensions</a>）。可以写到一个Gemfile文件中然后 bundle install。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bundle install</span><br></pre></td></tr></table></figure><p>Gemfile文件内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> <span class="string">&quot;http://rubygems.org&quot;</span></span><br><span class="line"></span><br><span class="line">gem <span class="string">&quot;jekyll&quot;</span>, <span class="string">&quot;0.10.0&quot;</span></span><br><span class="line">gem <span class="string">&quot;jekyll_ext&quot;</span></span><br><span class="line">gem <span class="string">&quot;liquid&quot;</span>, <span class="string">&quot;2.2.2&quot;</span></span><br><span class="line">gem <span class="string">&quot;rdiscount&quot;</span></span><br></pre></td></tr></table></figure><p>关于jekyll的一些扩展插件，可以参考 <a href="https://github.com/mojombo/jekyll/wiki/Plugins" target="_blank">jekyll plugins</a> 和 <a href="https://github.com/rfelix/my_jekyll_extensions" target="_blank">rfelix’s jelyll extensions</a> 。        </p><p>生成静态页面，运行服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bundle <span class="built_in">exec</span> ejekyll --server</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;系统环境Mac OS X 10.8.2，这个博客主要通过jekyll生成静态页面，使用ruby提供的一些扩展插件，比如按月份进行归档等，配置环境的过程如下。&lt;/p&gt;
&lt;p&gt;安装ruby，rubygems&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo port ruby&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo port install rb-rubygems&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo gem install rubygems-update&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo gem update --system&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;安装bundle&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo gem install bundler&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="program" scheme="http://amyangfei.me/categories/program/"/>
    
    
    <category term="jekyll" scheme="http://amyangfei.me/tags/jekyll/"/>
    
    <category term="ruby" scheme="http://amyangfei.me/tags/ruby/"/>
    
  </entry>
  
  <entry>
    <title>随机排序算法简介</title>
    <link href="http://amyangfei.me/2012/11/29/shuffle-algorithm/"/>
    <id>http://amyangfei.me/2012/11/29/shuffle-algorithm/</id>
    <published>2012-11-29T00:00:00.000Z</published>
    <updated>2020-12-13T07:05:00.262Z</updated>
    
    <content type="html"><![CDATA[<p>前几天看了酷壳上的一篇文章<a href="http://coolshell.cn/articles/8593.html" target="_blank">如何测试洗牌程序</a>，之后仔细看了Wikipedia对<a href="http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle" target="_blank">Fisher–Yates shuffle</a>算法的介绍，这里简单的总结一下，基本是翻译Wikipedia。</p><h2 id="Fisher-and-Yates’-original-method"><a href="#Fisher-and-Yates’-original-method" class="headerlink" title="Fisher and Yates’ original method"></a>Fisher and Yates’ original method</h2><p>该算法最初是1938年由Ronald A. Fisher和Frank Yates在《Statistical tables for biological, agricultural and medical research》一书中描述，算法生成1-N个数的随机排列的过程如下：</p><ol><li>原始数组中有数字1到N</li><li>设原始数组未被标记的数字个数为k，生成一个1到k之间的随机数</li><li>取出原始数组未被标记数字中的第k个，将其标记并插入到新的排列数组尾端。</li><li>重复过程2直到原始数组中没有未被标记的数字</li><li>过程3中生成的新数组就是一个对原始数组的随机排列</li></ol><p>该算法可以理解为已知有n个元素，先从n个元素中任选一个，放入新空间的第一个位置，然后再从剩下的n-1个元素中任选一个，放入第二个位置，依此类推。算法在过程3查找未被标记的第k个数字有很多重复操作，导致算法效率并不高，总的时间复杂度为O(N^2 )，空间复杂度为O(N)。算法的python实现如下所示：</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">FisherYateOldShullfe</span>(<span class="params">items</span>):</span></span><br><span class="line">ret = [<span class="literal">None</span>] * <span class="built_in">len</span>(items)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(items))):</span><br><span class="line">j = <span class="built_in">int</span>(random() * (i+<span class="number">1</span>))</span><br><span class="line">ret[i] = items[j]</span><br><span class="line"><span class="keyword">del</span> items[j]</span><br><span class="line"><span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">srclist = [n <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span> FisherYateOldShullfe(srclist)</span><br></pre></td></tr></table></figure><h2 id="Modern-version-of-the-Fisher–Yates-shuffle"><a href="#Modern-version-of-the-Fisher–Yates-shuffle" class="headerlink" title="Modern version of the Fisher–Yates shuffle"></a>Modern version of the Fisher–Yates shuffle</h2><p>改进版的Fisher–Yates shuffle算法是1964年Richard Durstenfeld在 Communications of the ACM volume 7, issue 7中首次提出，相比于原始Fisher-Yates shuffle最大的改进是不需要在步骤3中重复的数未被标记的数字，该算法不再将标记过的数字移动到一个新数组的尾端，而是将随机数选出的数字与排在最后位置的未标记数字进行交换。算法在python下的实现如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">FisherYatesShuffle</span>(<span class="params">items</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(items))):</span><br><span class="line">    j = <span class="built_in">int</span>(random() * (i+<span class="number">1</span>))</span><br><span class="line">    items[i], items[j] = items[j], items[i]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">srclist = [n <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line">FisherYatesShuffle(srclist)</span><br><span class="line"><span class="built_in">print</span> srclist</span><br></pre></td></tr></table></figure><p>该算法同样可以理解成为这样的过程：从1到n个数字中依次随机抽取一个数字，并放到一个新序列的尾端（该算法通过互换数字实现），逐渐形成一个新的序列。计算一下概率：如果某个元素被放入第i（1≤i≤n）个位置，就必须是在前 i-1 次选取中都没有选到它，并且第 i 次恰好选中它。其概率为：</p><p><img src="/images/20121129probability.png" alt="probability"></p><p>算法中只有一个从1到N-1的循环，循环内操作为常数步，因而算法总的时间复杂度为O(N)，空间复杂度为O(1)。</p><h2 id="Inside-out-algorithm"><a href="#Inside-out-algorithm" class="headerlink" title="Inside-out algorithm"></a>Inside-out algorithm</h2><p>Fisher-Yates shuffle是一种在原地交换的生成过程，即给定一个序列，算法在这个序列本身的存储空间进行操作。与这种in-place的方式不同，inside-out针对给定序列，会生成该序列随机排列的一个副本。这种方法有利于对长度较大的序列进行随机排列。 Inside-out算法的基本思想是从前向后扫描，依次增加i，每一步操作中将新数组位置i的数字更新为原始数组位置i的数字，然后在新数组中将位置i和随机选出的位置j（0≤j≤i）交换数字。算法亦可以理解为现将原始数组完全复制到新数组，然后新数组位置i(i from 1 to n-1)依次和随机位置j交换数字。算法的python实现如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insideout</span>(<span class="params">source</span>):</span></span><br><span class="line">    ret = [<span class="literal">None</span>] * <span class="built_in">len</span>(source)</span><br><span class="line">    ret[<span class="number">0</span>] = source[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(source)):</span><br><span class="line">        j = <span class="built_in">int</span>(random() * (i+<span class="number">1</span>))</span><br><span class="line">        ret[i] = ret[j]</span><br><span class="line">        ret[j] = source[i]</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">srclist = [n <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span> insideout(srclist)</span><br></pre></td></tr></table></figure><p>对于这个算法，我们分析可以出现多少种不同的排列数，从$i=1$开始，每一次交换都可以衍生出$(i+1)$倍的排列数，因而总的排列方案数如下图。在随机函数完全随机的情况下每一种排列都是等概率出现的，因而这种算法得到的是一个随机排序。它的时间复杂度和空间复杂度都是O(N)。</p><p><img src="/images/20121129sum.png" alt="sum"></p><p>该算法有一个优点就是可以通过不断读取原始数组的下一个元素同时使新的排列数组长度加一，进而生成一个随机排列，即可以对长度未知的序列进行随机排列。实现的伪代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> source.moreDataAvailable</span><br><span class="line">      j &lt;- random integer with <span class="number">0</span> &lt;= j &lt;= a.length</span><br><span class="line">      <span class="keyword">if</span> j = a.length</span><br><span class="line">          a.append(source.next)</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">          a.append(a[j])</span><br><span class="line">          a[j] &lt;- source.next</span><br></pre></td></tr></table></figure><h2 id="另一种想法"><a href="#另一种想法" class="headerlink" title="另一种想法"></a>另一种想法</h2><p>对n个元素的随机排序对应于这n个元素全排列中的一种，所以有这样一种方法求随机排序：求n个元素的随机排列，给定一个随机数k（1≤k≤n!），取出n!个全排列中的第k个即是一种随机排序。于是需要解决2个问题：一是在一个足够大的范围内求随机数；另外是实现一种是在n!个全排列中求第k个全排列的方法。第一个问题很古老，有人说随机数的最大范围决定于随即种子的大小，我有一种想法是对分段求随机数，比如需要求最大范围为N的随机数，那么可以对N进行M进制分解，分别求M进制下的每一位的随机数，最后合成一个大的随机数；而第二个问题就比较容易了，有很多全排列生成算法，通过“原排列”-&gt;“原中介数”-&gt;“新中介数”-&gt;“新排列”的过程，可以很方便的求出第k个全排列。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://blog.csdn.net/huagong_adu/article/details/7621603" target="_blank">洗牌程序</a>，<a href="http://www.gocalf.com/blog/shuffle-algo.html" target="_blank">等概率随机排列数组（洗牌算法）</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;前几天看了酷壳上的一篇文章&lt;a href=&quot;http://coolshell.cn/articles/8593.html&quot; target=&quot;_blank&quot;&gt;如何测试洗牌程序&lt;/a&gt;，之后仔细看了Wikipedia对&lt;a href=&quot;http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle&quot; target=&quot;_blank&quot;&gt;Fisher–Yates shuffle&lt;/a&gt;算法的介绍，这里简单的总结一下，基本是翻译Wikipedia。&lt;/p&gt;
&lt;h2 id=&quot;Fisher-and-Yates’-original-method&quot;&gt;&lt;a href=&quot;#Fisher-and-Yates’-original-method&quot; class=&quot;headerlink&quot; title=&quot;Fisher and Yates’ original method&quot;&gt;&lt;/a&gt;Fisher and Yates’ original method&lt;/h2&gt;&lt;p&gt;该算法最初是1938年由Ronald A. Fisher和Frank Yates在《Statistical tables for biological, agricultural and medical research》一书中描述，算法生成1-N个数的随机排列的过程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;原始数组中有数字1到N&lt;/li&gt;
&lt;li&gt;设原始数组未被标记的数字个数为k，生成一个1到k之间的随机数&lt;/li&gt;
&lt;li&gt;取出原始数组未被标记数字中的第k个，将其标记并插入到新的排列数组尾端。&lt;/li&gt;
&lt;li&gt;重复过程2直到原始数组中没有未被标记的数字&lt;/li&gt;
&lt;li&gt;过程3中生成的新数组就是一个对原始数组的随机排列&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;该算法可以理解为已知有n个元素，先从n个元素中任选一个，放入新空间的第一个位置，然后再从剩下的n-1个元素中任选一个，放入第二个位置，依此类推。算法在过程3查找未被标记的第k个数字有很多重复操作，导致算法效率并不高，总的时间复杂度为O(N^2 )，空间复杂度为O(N)。算法的python实现如下所示：&lt;/p&gt;</summary>
    
    
    
    <category term="program" scheme="http://amyangfei.me/categories/program/"/>
    
    
  </entry>
  
  <entry>
    <title>A brief introduction to BIDE algorithm</title>
    <link href="http://amyangfei.me/2012/03/26/bide-algorithm/"/>
    <id>http://amyangfei.me/2012/03/26/bide-algorithm/</id>
    <published>2012-03-26T00:00:00.000Z</published>
    <updated>2020-12-13T07:04:28.455Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>最近在做的数据库活动检测引擎，要实现一个异常行为检测的模块。简单的说异常行为检测就是先确定描述用户访问数据库的行为模型，然后定义一系列描述正常访问数据库的行为，检测过程中一旦用户行为与正常行为轮廓不符，则被认定为攻击行为。在实际系统中，正常行为轮廓会组成正常行为知识库，这个知识库会很大，所以正常行为轮廓不能简单的人工定义，于是一个自动挖掘正常行为知识库的需求被提了出来。</p><p>在系统实现过程中，会将用户对数据库产生影响的原子性操作，比如一次select，一次update抽象成为一个item，用户访问数据库的一系列行为可以抽象成为一个item的序列，由此引出了通过频繁序列挖掘来获得正常行为知识库的想法。</p><h3 id="频繁序列挖掘"><a href="#频繁序列挖掘" class="headerlink" title="频繁序列挖掘"></a>频繁序列挖掘</h3><a id="more"></a><p>在介绍频繁序列挖掘之前先简单说一下关联规则挖掘，关联规则挖掘用于从大量数据中挖掘出有价值的数据项之间的相关关系。关联规则解决的常见问题如：“如果一个消费者购买了产品A，那么他有多大机会购买产品B?”以及“如果他购买了产品C和D，那么他还将购买什么产品？”。（引自<a href="http://en.wikipedia.org/wiki/Association_rule_learning" target="_blank">维基百科</a>），关联规则挖掘领域最著名的故事就是啤酒和尿布的故事了，比较经典的算法有<a href="http://en.wikipedia.org/wiki/Apriori_algorithm" target="_blank">Apriori</a>，Eclat，FP-Growth等。</p><p>频繁序列挖掘（<a href="http://en.wikipedia.org/wiki/Sequence_mining" target="_blank">Sequence Mining</a>）与关联规则挖掘类似，不同的是序列挖掘结果的各个项目之间是有序的。早期比较著名的序列挖掘算法有GSP，SPADE，PrefixSpan，BIDE算法是2004年被提出，它极大地提高了序列挖掘的性能。这里有一篇对各种序列挖掘算法详分析对比的论文：<a href="http://scholar.google.com.hk/scholar?q=Frequent+pattern+mining:+current+status+and+future+directions" target="_blank">Frequent pattern mining: current status and future directions</a></p><h3 id="BIDE算法的实现描述"><a href="#BIDE算法的实现描述" class="headerlink" title="BIDE算法的实现描述"></a>BIDE算法的实现描述</h3><p>提出BIDE算法的论文：BIDE:efficient mining of frequent closed sequences，下面按照论文中的一个例子对算法进行简单的介绍。</p><p>序列集合</p><table><thead><tr><th>Sequence identifier</th><th>Sequence content</th></tr></thead><tbody><tr><td>1</td><td>CAABC</td></tr><tr><td>2</td><td>ABCB</td></tr><tr><td>3</td><td>CABC</td></tr><tr><td>4</td><td>ABBCA</td></tr></tbody></table><p>frequent sequences</p><ul><li>A:4, AA:2, AB:4, ABB:2, ABC:4, AC:4, B:4, BB:2,BC:4, C:4, CA:3, CAB:2, CABC:2, CAC:2, CB:3, CBC:2,CC:2</li></ul><p>frequent closed sequences</p><ul><li>AA:2, ABB:2, ABC:4, CA:3, CABC:2,CB:3</li></ul><p>搜索树：</p><p><img src="/images/bide_search.png" alt="bide search tree"></p><p>一些背景知识：</p><ul><li>支持度：有绝对支持度和相对支持度两种，相对支持度是绝对支持度除以总序列数。上表中A，B，C为独立的项（item），不同item的组合形成一个序列，如果序列a中的每个item都在序列b中出现，并且是保序的，那么a是b的子序列。序列数据库（SDB）包含一些序列，一个序列a的所有父序列的总数目即为序列a在SDB中的绝对支持度，简单的说一个序列的支持度就是序列在SDB中出现的次数（在同一条序列中多次出现只记一次）。比如在上表中，A在CAABC中出现2次，计算支持度时只记1。</li><li>最小支持度：挖掘时候需要定义的常量，支持度大于最小支持度的序列被认为是频繁序列。</li><li>闭序列：序列可以进行扩展，比如上表序列1中包括序列CAB，可以扩展成为CABC。如果一个序列的支持度和它的一个扩展序列的支持度相等，那么这个序列就不是闭序列。反之，如果一个序列找不到一个扩展，使得扩展序列支持度与原序列支持度相等，那么这个序列就是闭序列。</li></ul><p>算法要点</p><p>1. 利用BackSpan search space Pruning减少不必要的搜索过程。比如在搜索树中，B开头的序列都会被AB开头的序列包含，所以以B开头的子树可以不用搜索。</p><p>2. 利用forward-extension 和 backward extension 检测一个序列是否为闭序列，如果不是闭序列则不会包含在结果集中。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>BIDE算法的高效体现在两个方面：一是挖掘过程中不需要产生临时的频繁项集，这极大的节约了存储空间；另一方面由于算法只挖掘频繁闭序列，挖掘过程中会减少很多非闭序列的挖掘过程。这两点加起来使得BIDE算法在性能上有了很大的提升。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;最近在做的数据库活动检测引擎，要实现一个异常行为检测的模块。简单的说异常行为检测就是先确定描述用户访问数据库的行为模型，然后定义一系列描述正常访问数据库的行为，检测过程中一旦用户行为与正常行为轮廓不符，则被认定为攻击行为。在实际系统中，正常行为轮廓会组成正常行为知识库，这个知识库会很大，所以正常行为轮廓不能简单的人工定义，于是一个自动挖掘正常行为知识库的需求被提了出来。&lt;/p&gt;
&lt;p&gt;在系统实现过程中，会将用户对数据库产生影响的原子性操作，比如一次select，一次update抽象成为一个item，用户访问数据库的一系列行为可以抽象成为一个item的序列，由此引出了通过频繁序列挖掘来获得正常行为知识库的想法。&lt;/p&gt;
&lt;h3 id=&quot;频繁序列挖掘&quot;&gt;&lt;a href=&quot;#频繁序列挖掘&quot; class=&quot;headerlink&quot; title=&quot;频繁序列挖掘&quot;&gt;&lt;/a&gt;频繁序列挖掘&lt;/h3&gt;</summary>
    
    
    
    <category term="program" scheme="http://amyangfei.me/categories/program/"/>
    
    
    <category term="algorithm" scheme="http://amyangfei.me/tags/algorithm/"/>
    
    <category term="frequent sequence mining" scheme="http://amyangfei.me/tags/frequent-sequence-mining/"/>
    
  </entry>
  
</feed>
